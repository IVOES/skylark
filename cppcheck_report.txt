plugins/pdfview/np_pdfviewer.c:112:5: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
    return false;
    ^
plugins/winexy/np_winexy.c:46:17: style: The scope of the variable 'exep' can be reduced. [variableScope]
    char const *exep[8 + 1] = { NULL };
                ^
plugins/winexy/np_winexy.c:39:12: error: Uninitialized variable: status [uninitvar]
    return status;
           ^
src/3rdparty/chardet/src/CharDistribution.h:51:3: warning: Member variable 'CharDistributionAnalysis::mCharToFreqOrder' is not initialized in the constructor. [uninitMemberVar]
  CharDistributionAnalysis() {Reset(false);};
  ^
src/3rdparty/chardet/src/CharDistribution.h:51:3: warning: Member variable 'CharDistributionAnalysis::mTableSize' is not initialized in the constructor. [uninitMemberVar]
  CharDistributionAnalysis() {Reset(false);};
  ^
src/3rdparty/chardet/src/CharDistribution.h:51:3: warning: Member variable 'CharDistributionAnalysis::mTypicalDistributionRatio' is not initialized in the constructor. [uninitMemberVar]
  CharDistributionAnalysis() {Reset(false);};
  ^
src/3rdparty/chardet/src/CharDistribution.h:54:8: performance:inconclusive: Technically the member function 'CharDistributionAnalysis::HandleData' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void HandleData(const char* aBuf, uint32_t aLen) {};
       ^
src/3rdparty/chardet/src/CharDistribution.h:77:9: style:inconclusive: Technically the member function 'CharDistributionAnalysis::GetConfidence' can be const. [functionConst]
  float GetConfidence(void);
        ^
src/3rdparty/chardet/src/CharDistribution.cpp:52:33: note: Technically the member function 'CharDistributionAnalysis::GetConfidence' can be const.
float CharDistributionAnalysis::GetConfidence()
                                ^
src/3rdparty/chardet/src/CharDistribution.h:77:9: note: Technically the member function 'CharDistributionAnalysis::GetConfidence' can be const.
  float GetConfidence(void);
        ^
src/3rdparty/chardet/src/CharDistribution.h:90:13: performance:inconclusive: Technically the member function 'CharDistributionAnalysis::SetOpion' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void      SetOpion(){};
            ^
src/3rdparty/chardet/src/CharDistribution.h:94:8: style:inconclusive: Technically the member function 'CharDistributionAnalysis::GotEnoughData' can be const. [functionConst]
  bool GotEnoughData() {return mTotalChars > ENOUGH_DATA_THRESHOLD;};
       ^
src/3rdparty/chardet/src/CharDistribution.h:136:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:100:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) {return -1;};
              ^
src/3rdparty/chardet/src/CharDistribution.h:136:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:154:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:100:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) {return -1;};
              ^
src/3rdparty/chardet/src/CharDistribution.h:154:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:171:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:100:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) {return -1;};
              ^
src/3rdparty/chardet/src/CharDistribution.h:171:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:189:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:100:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) {return -1;};
              ^
src/3rdparty/chardet/src/CharDistribution.h:189:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:209:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:100:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) {return -1;};
              ^
src/3rdparty/chardet/src/CharDistribution.h:209:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:234:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.h:100:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) {return -1;};
              ^
src/3rdparty/chardet/src/CharDistribution.h:234:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/CharDistribution.cpp:55:19: style: Checking if unsigned expression 'mTotalChars' is less than zero. [unsignedLessThanZero]
  if (mTotalChars <= 0 || mFreqChars <= mDataThreshold)
                  ^
src/3rdparty/chardet/src/JpCntx.h:79:9: style:inconclusive: Technically the member function 'JapaneseContextAnalysis::GetConfidence' can be const. [functionConst]
  float GetConfidence(void);
        ^
src/3rdparty/chardet/src/JpCntx.cpp:187:33: note: Technically the member function 'JapaneseContextAnalysis::GetConfidence' can be const.
float  JapaneseContextAnalysis::GetConfidence(void)
                                ^
src/3rdparty/chardet/src/JpCntx.h:79:9: note: Technically the member function 'JapaneseContextAnalysis::GetConfidence' can be const.
  float GetConfidence(void);
        ^
src/3rdparty/chardet/src/JpCntx.h:81:13: performance:inconclusive: Technically the member function 'JapaneseContextAnalysis::SetOpion' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void      SetOpion(){};
            ^
src/3rdparty/chardet/src/JpCntx.h:82:8: style:inconclusive: Technically the member function 'JapaneseContextAnalysis::GotEnoughData' can be const. [functionConst]
  bool GotEnoughData() {return mTotalRel > ENOUGH_REL_THRESHOLD;};
       ^
src/3rdparty/chardet/src/JpCntx.h:113:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str, uint32_t *charLen);
      ^
src/3rdparty/chardet/src/JpCntx.h:85:15: note: Virtual function in base class
  virtual int GetOrder(const char* str, uint32_t *charLen) = 0;
              ^
src/3rdparty/chardet/src/JpCntx.h:113:7: note: Function in derived class
  int GetOrder(const char* str, uint32_t *charLen);
      ^
src/3rdparty/chardet/src/JpCntx.h:115:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/JpCntx.h:86:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) = 0;
              ^
src/3rdparty/chardet/src/JpCntx.h:115:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/JpCntx.h:129:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str, uint32_t *charLen);
      ^
src/3rdparty/chardet/src/JpCntx.h:85:15: note: Virtual function in base class
  virtual int GetOrder(const char* str, uint32_t *charLen) = 0;
              ^
src/3rdparty/chardet/src/JpCntx.h:129:7: note: Function in derived class
  int GetOrder(const char* str, uint32_t *charLen);
      ^
src/3rdparty/chardet/src/JpCntx.h:130:7: style: The function 'GetOrder' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/JpCntx.h:86:15: note: Virtual function in base class
  virtual int GetOrder(const char* str) = 0;
              ^
src/3rdparty/chardet/src/JpCntx.h:130:7: note: Function in derived class
  int GetOrder(const char* str)
      ^
src/3rdparty/chardet/src/JpCntx.cpp:136:7: style: The scope of the variable 'order' can be reduced. [variableScope]
  int order;
      ^
src/3rdparty/chardet/src/chardet.cpp:41:15: style:inconclusive: Technically the member function 'Detector::getCharsetName' can be const. [functionConst]
  const char *getCharsetName () { return mDetectedCharset; }
              ^
src/3rdparty/chardet/src/chardet.cpp:42:9: style:inconclusive: Technically the member function 'Detector::getConfidence' can be const. [functionConst]
  float getConfidence () { return mDetectedConfidence; }
        ^
src/3rdparty/chardet/src/chardet.cpp:43:9: style:inconclusive: Technically the member function 'Detector::getIsBOM' can be const. [functionConst]
  short getIsBOM () { return mDetectedIsBOM; }
        ^
src/3rdparty/chardet/src/chardet.cpp:44:16: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void Reset () { this->nsUniversalDetector::Reset (); }
               ^
src/3rdparty/chardet/src/nsUniversalDetector.h:78:17: note: Virtual function in base class
   virtual void Reset();
                ^
src/3rdparty/chardet/src/chardet.cpp:44:16: note: Function in derived class
  virtual void Reset () { this->nsUniversalDetector::Reset (); }
               ^
src/3rdparty/chardet/src/chardet.cpp:46:16: style: The function 'Report' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void Report (const char* aCharset) { mDetectedCharset = aCharset; }
               ^
src/3rdparty/chardet/src/nsUniversalDetector.h:77:17: note: Virtual function in base class
   virtual void Report(const char* aCharset) = 0;
                ^
src/3rdparty/chardet/src/chardet.cpp:46:16: note: Function in derived class
  virtual void Report (const char* aCharset) { mDetectedCharset = aCharset; }
               ^
src/3rdparty/chardet/src/chardet.cpp:158:23: error: Dereferencing 'det' after it is deallocated / released [deallocuse]
 (*obj)->confidence = det->getConfidence ();
                      ^
src/3rdparty/chardet/src/chardet.cpp:159:16: error: Dereferencing 'det' after it is deallocated / released [deallocuse]
 (*obj)->bom = det->getIsBOM ();
               ^
src/3rdparty/chardet/src/nsCodingStateMachine.h:64:3: warning: Member variable 'nsCodingStateMachine::mCurrentCharLen' is not initialized in the constructor. [uninitMemberVar]
  nsCodingStateMachine(SMModel* sm) : mModel(sm) { mCurrentState = eStart; }
  ^
src/3rdparty/chardet/src/nsCodingStateMachine.h:64:3: warning: Member variable 'nsCodingStateMachine::mCurrentBytePos' is not initialized in the constructor. [uninitMemberVar]
  nsCodingStateMachine(SMModel* sm) : mModel(sm) { mCurrentState = eStart; }
  ^
src/3rdparty/chardet/src/nsCodingStateMachine.h:79:13: style:inconclusive: Technically the member function 'nsCodingStateMachine::GetCurrentCharLen' can be const. [functionConst]
  uint32_t  GetCurrentCharLen(void) {return mCurrentCharLen;};
            ^
src/3rdparty/chardet/src/nsCodingStateMachine.h:81:16: style:inconclusive: Technically the member function 'nsCodingStateMachine::GetCodingStateMachine' can be const. [functionConst]
  const char * GetCodingStateMachine() {return mModel->name;};
               ^
src/3rdparty/chardet/src/nsBig5Prober.h:51:4: warning: Class 'nsBig5Prober' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  {mCodingSM = new nsCodingStateMachine(&Big5SMModel);
   ^
src/3rdparty/chardet/src/nsBig5Prober.h:51:4: warning: Class 'nsBig5Prober' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  {mCodingSM = new nsCodingStateMachine(&Big5SMModel);
   ^
src/3rdparty/chardet/src/nsCodingStateMachine.h:64:3: style: Class 'nsCodingStateMachine' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsCodingStateMachine(SMModel* sm) : mModel(sm) { mCurrentState = eStart; }
  ^
src/3rdparty/chardet/src/nsBig5Prober.h:49:3: style: Class 'nsBig5Prober' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsBig5Prober(bool aIsPreferredLanguage)
  ^
src/3rdparty/chardet/src/nsBig5Prober.h:54:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsBig5Prober.h:54:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsBig5Prober.h:55:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "Big5";}
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsBig5Prober.h:55:15: note: Function in derived class
  const char* GetCharSetName() {return "Big5";}
              ^
src/3rdparty/chardet/src/nsBig5Prober.h:56:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;}
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsBig5Prober.h:56:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;}
                 ^
src/3rdparty/chardet/src/nsBig5Prober.h:57:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsBig5Prober.h:57:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsBig5Prober.h:58:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsBig5Prober.h:58:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsBig5Prober.h:59:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {}
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsBig5Prober.h:59:13: note: Function in derived class
  void      SetOpion() {}
            ^
src/3rdparty/chardet/src/nsEUCJPProber.h:57:4: warning: Class 'nsEUCJPProber' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  {mCodingSM = new nsCodingStateMachine(&EUCJPSMModel);
   ^
src/3rdparty/chardet/src/nsEUCJPProber.h:57:4: warning: Class 'nsEUCJPProber' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  {mCodingSM = new nsCodingStateMachine(&EUCJPSMModel);
   ^
src/3rdparty/chardet/src/nsEUCJPProber.h:55:3: style: Class 'nsEUCJPProber' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsEUCJPProber(bool aIsPreferredLanguage)
  ^
src/3rdparty/chardet/src/nsEUCJPProber.h:60:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsEUCJPProber.h:60:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsEUCJPProber.h:61:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "EUC-JP";};
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsEUCJPProber.h:61:15: note: Function in derived class
  const char* GetCharSetName() {return "EUC-JP";};
              ^
src/3rdparty/chardet/src/nsEUCJPProber.h:62:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsEUCJPProber.h:62:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsEUCJPProber.h:63:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsEUCJPProber.h:63:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsEUCJPProber.h:64:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsEUCJPProber.h:64:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsEUCJPProber.h:65:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsEUCJPProber.h:65:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsEUCKRProber.h:51:4: warning: Class 'nsEUCKRProber' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  {mCodingSM = new nsCodingStateMachine(&EUCKRSMModel);
   ^
src/3rdparty/chardet/src/nsEUCKRProber.h:51:4: warning: Class 'nsEUCKRProber' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  {mCodingSM = new nsCodingStateMachine(&EUCKRSMModel);
   ^
src/3rdparty/chardet/src/nsEUCKRProber.h:49:3: style: Class 'nsEUCKRProber' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsEUCKRProber(bool aIsPreferredLanguage)
  ^
src/3rdparty/chardet/src/nsEUCKRProber.h:54:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsEUCKRProber.h:54:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsEUCKRProber.h:55:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "EUC-KR";};
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsEUCKRProber.h:55:15: note: Function in derived class
  const char* GetCharSetName() {return "EUC-KR";};
              ^
src/3rdparty/chardet/src/nsEUCKRProber.h:56:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsEUCKRProber.h:56:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsEUCKRProber.h:57:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsEUCKRProber.h:57:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsEUCKRProber.h:58:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsEUCKRProber.h:58:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsEUCKRProber.h:59:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsEUCKRProber.h:59:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsEUCTWProber.h:51:4: warning: Class 'nsEUCTWProber' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  {mCodingSM = new nsCodingStateMachine(&EUCTWSMModel);
   ^
src/3rdparty/chardet/src/nsEUCTWProber.h:51:4: warning: Class 'nsEUCTWProber' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  {mCodingSM = new nsCodingStateMachine(&EUCTWSMModel);
   ^
src/3rdparty/chardet/src/nsEUCTWProber.h:49:3: style: Class 'nsEUCTWProber' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsEUCTWProber(bool aIsPreferredLanguage)
  ^
src/3rdparty/chardet/src/nsEUCTWProber.h:54:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsEUCTWProber.h:54:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsEUCTWProber.h:55:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "EUC-TW";};
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsEUCTWProber.h:55:15: note: Function in derived class
  const char* GetCharSetName() {return "EUC-TW";};
              ^
src/3rdparty/chardet/src/nsEUCTWProber.h:56:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsEUCTWProber.h:56:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsEUCTWProber.h:57:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsEUCTWProber.h:57:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsEUCTWProber.h:58:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsEUCTWProber.h:58:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsEUCTWProber.h:59:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsEUCTWProber.h:59:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:50:3: style: Class 'nsEscCharSetProber' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsEscCharSetProber(uint32_t aLanguageFilter);
  ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:52:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:52:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:53:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return mDetectedCharset;};
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:53:15: note: Function in derived class
  const char* GetCharSetName() {return mDetectedCharset;};
              ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:54:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:54:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:55:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:55:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:56:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void){return (float)0.99;};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:56:13: note: Function in derived class
  float     GetConfidence(void){return (float)0.99;};
            ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:57:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsEscCharsetProber.h:57:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsGB2312Prober.h:53:4: warning: Class 'nsGB18030Prober' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  {mCodingSM = new nsCodingStateMachine(&GB18030SMModel);
   ^
src/3rdparty/chardet/src/nsGB2312Prober.h:53:4: warning: Class 'nsGB18030Prober' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  {mCodingSM = new nsCodingStateMachine(&GB18030SMModel);
   ^
src/3rdparty/chardet/src/nsGB2312Prober.h:51:3: style: Class 'nsGB18030Prober' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsGB18030Prober(bool aIsPreferredLanguage)
  ^
src/3rdparty/chardet/src/nsGB2312Prober.h:56:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsGB2312Prober.h:56:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsGB2312Prober.h:57:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "GB18030";};
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsGB2312Prober.h:57:15: note: Function in derived class
  const char* GetCharSetName() {return "GB18030";};
              ^
src/3rdparty/chardet/src/nsGB2312Prober.h:58:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsGB2312Prober.h:58:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsGB2312Prober.h:59:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsGB2312Prober.h:59:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsGB2312Prober.h:60:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsGB2312Prober.h:60:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsGB2312Prober.h:61:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsGB2312Prober.h:61:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:101:8: style:inconclusive: Technically the member function 'nsSingleByteCharSetProber::KeepEnglishLetters' can be const. [functionConst]
  bool KeepEnglishLetters() {return mModel->keepEnglishLetter;} // (not implemented)
       ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:83:3: style: Class 'nsSingleByteCharSetProber' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsSingleByteCharSetProber(const SequenceModel *model)
  ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:88:23: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual const char* GetCharSetName();
                      ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:88:23: note: Function in derived class
  virtual const char* GetCharSetName();
                      ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:89:26: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                         ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:89:26: note: Function in derived class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                         ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:90:26: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual nsProbingState GetState(void) {return mState;}
                         ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:90:26: note: Function in derived class
  virtual nsProbingState GetState(void) {return mState;}
                         ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:91:21: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void      Reset(void);
                    ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:91:21: note: Function in derived class
  virtual void      Reset(void);
                    ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:92:21: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual float     GetConfidence(void);
                    ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:92:21: note: Function in derived class
  virtual float     GetConfidence(void);
                    ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:93:21: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void      SetOpion() {}
                    ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:93:21: note: Function in derived class
  virtual void      SetOpion() {}
                    ^
src/3rdparty/chardet/src/nsHebrewProber.h:53:26: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                         ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsHebrewProber.h:53:26: note: Function in derived class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                         ^
src/3rdparty/chardet/src/nsHebrewProber.h:54:23: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual const char* GetCharSetName();
                      ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsHebrewProber.h:54:23: note: Function in derived class
  virtual const char* GetCharSetName();
                      ^
src/3rdparty/chardet/src/nsHebrewProber.h:55:16: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void Reset(void);
               ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsHebrewProber.h:55:16: note: Function in derived class
  virtual void Reset(void);
               ^
src/3rdparty/chardet/src/nsHebrewProber.h:57:26: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual nsProbingState GetState(void);
                         ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsHebrewProber.h:57:26: note: Function in derived class
  virtual nsProbingState GetState(void);
                         ^
src/3rdparty/chardet/src/nsHebrewProber.h:59:21: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual float     GetConfidence(void) { return (float)0.0; }
                    ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsHebrewProber.h:59:21: note: Function in derived class
  virtual float     GetConfidence(void) { return (float)0.0; }
                    ^
src/3rdparty/chardet/src/nsHebrewProber.h:60:21: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void      SetOpion() {};
                    ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsHebrewProber.h:60:21: note: Function in derived class
  virtual void      SetOpion() {};
                    ^
src/3rdparty/chardet/src/nsHebrewProber.cpp:135:60: style: Condition 'cur!=' '' is always true [knownConditionTrueFalse]
      if ((mBeforePrev == ' ') && (isFinal(mPrev)) && (cur != ' ')) // case (3) [-2:space][-1:final letter][cur:not space]
                                                           ^
src/3rdparty/chardet/src/nsHebrewProber.cpp:123:13: note: Assuming condition 'cur==' '' is false
    if (cur == ' ') // We stand on a space - a word just ended
            ^
src/3rdparty/chardet/src/nsHebrewProber.cpp:135:60: note: Condition 'cur!=' '' is always true
      if ((mBeforePrev == ' ') && (isFinal(mPrev)) && (cur != ' ')) // case (3) [-2:space][-1:final letter][cur:not space]
                                                           ^
src/3rdparty/chardet/src/nsHebrewProber.cpp:118:8: style: The scope of the variable 'cur' can be reduced. [variableScope]
  char cur;
       ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:104:17: style: The function 'DumpStatus' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void  DumpStatus();
                ^
src/3rdparty/chardet/src/nsCharSetProber.h:66:17: note: Virtual function in base class
  virtual void  DumpStatus() {};
                ^
src/3rdparty/chardet/src/nsSBCharSetProber.h:104:17: note: Function in derived class
  virtual void  DumpStatus();
                ^
src/3rdparty/chardet/src/nsHebrewProber.h:66:17: style: The function 'DumpStatus' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void  DumpStatus();
                ^
src/3rdparty/chardet/src/nsCharSetProber.h:66:17: note: Virtual function in base class
  virtual void  DumpStatus() {};
                ^
src/3rdparty/chardet/src/nsHebrewProber.h:66:17: note: Function in derived class
  virtual void  DumpStatus();
                ^
src/3rdparty/chardet/src/nsLatin1Prober.h:52:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsLatin1Prober.h:52:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsLatin1Prober.h:53:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "windows-1252";};
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsLatin1Prober.h:53:15: note: Function in derived class
  const char* GetCharSetName() {return "windows-1252";};
              ^
src/3rdparty/chardet/src/nsLatin1Prober.h:54:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsLatin1Prober.h:54:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsLatin1Prober.h:55:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsLatin1Prober.h:55:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsLatin1Prober.h:56:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsLatin1Prober.h:56:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsLatin1Prober.h:57:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsLatin1Prober.h:57:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsLatin1Prober.cpp:129:17: style: The scope of the variable 'charClass' can be reduced. [variableScope]
  unsigned char charClass;
                ^
src/3rdparty/chardet/src/nsLatin1Prober.cpp:130:17: style: The scope of the variable 'freq' can be reduced. [variableScope]
  unsigned char freq;
                ^
src/3rdparty/chardet/src/nsLatin1Prober.h:60:17: style: The function 'DumpStatus' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual void  DumpStatus();
                ^
src/3rdparty/chardet/src/nsCharSetProber.h:66:17: note: Virtual function in base class
  virtual void  DumpStatus() {};
                ^
src/3rdparty/chardet/src/nsLatin1Prober.h:60:17: note: Function in derived class
  virtual void  DumpStatus();
                ^
src/3rdparty/chardet/src/nsSJISProber.h:58:4: warning: Class 'nsSJISProber' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  {mCodingSM = new nsCodingStateMachine(&SJISSMModel);
   ^
src/3rdparty/chardet/src/nsSJISProber.h:58:4: warning: Class 'nsSJISProber' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  {mCodingSM = new nsCodingStateMachine(&SJISSMModel);
   ^
src/3rdparty/chardet/src/nsUTF8Prober.h:49:17: warning: Class 'nsUTF8Prober' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
                mCodingSM = new nsCodingStateMachine(&UTF8SMModel);
                ^
src/3rdparty/chardet/src/nsUTF8Prober.h:49:17: warning: Class 'nsUTF8Prober' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
                mCodingSM = new nsCodingStateMachine(&UTF8SMModel);
                ^
src/3rdparty/chardet/src/nsSJISProber.h:56:3: style: Class 'nsSJISProber' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsSJISProber(bool aIsPreferredLanguage)
  ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:57:3: style: Class 'nsMBCSGroupProber' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  nsMBCSGroupProber(uint32_t aLanguageFilter);
  ^
src/3rdparty/chardet/src/nsSJISProber.h:61:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsSJISProber.h:61:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsSJISProber.h:62:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "cp932";};
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsSJISProber.h:62:15: note: Function in derived class
  const char* GetCharSetName() {return "cp932";};
              ^
src/3rdparty/chardet/src/nsSJISProber.h:63:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsSJISProber.h:63:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsSJISProber.h:64:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsSJISProber.h:64:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsSJISProber.h:65:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsSJISProber.h:65:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsSJISProber.h:66:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsSJISProber.h:66:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsUTF8Prober.h:52:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsUTF8Prober.h:52:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsUTF8Prober.h:53:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName() {return "UTF-8";}
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsUTF8Prober.h:53:15: note: Function in derived class
  const char* GetCharSetName() {return "UTF-8";}
              ^
src/3rdparty/chardet/src/nsUTF8Prober.h:54:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;}
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsUTF8Prober.h:54:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;}
                 ^
src/3rdparty/chardet/src/nsUTF8Prober.h:55:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsUTF8Prober.h:55:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsUTF8Prober.h:56:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsUTF8Prober.h:56:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsUTF8Prober.h:57:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {}
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsUTF8Prober.h:57:13: note: Function in derived class
  void      SetOpion() {}
            ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:59:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:59:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:60:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName();
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:60:15: note: Function in derived class
  const char* GetCharSetName();
              ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:61:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:61:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:62:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:62:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:63:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:63:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:64:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:64:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsMBCSGroupProber.cpp:137:22: style: Condition '--keepNext==0' is always true [knownConditionTrueFalse]
      if (--keepNext == 0)
                     ^
src/3rdparty/chardet/src/nsMBCSGroupProber.cpp:135:14: note: Assuming condition 'keepNext' is true
    else if (keepNext)
             ^
src/3rdparty/chardet/src/nsMBCSGroupProber.cpp:137:22: note: Condition '--keepNext==0' is always true
      if (--keepNext == 0)
                     ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:67:9: style: The function 'DumpStatus' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void  DumpStatus();
        ^
src/3rdparty/chardet/src/nsCharSetProber.h:66:17: note: Virtual function in base class
  virtual void  DumpStatus() {};
                ^
src/3rdparty/chardet/src/nsMBCSGroupProber.h:67:9: note: Function in derived class
  void  DumpStatus();
        ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:52:18: style: The function 'HandleData' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:59:26: note: Virtual function in base class
  virtual nsProbingState HandleData(const char* aBuf, uint32_t aLen) = 0;
                         ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:52:18: note: Function in derived class
  nsProbingState HandleData(const char* aBuf, uint32_t aLen);
                 ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:53:15: style: The function 'GetCharSetName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  const char* GetCharSetName();
              ^
src/3rdparty/chardet/src/nsCharSetProber.h:58:23: note: Virtual function in base class
  virtual const char* GetCharSetName() = 0;
                      ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:53:15: note: Function in derived class
  const char* GetCharSetName();
              ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:54:18: style: The function 'GetState' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsCharSetProber.h:60:26: note: Virtual function in base class
  virtual nsProbingState GetState(void) = 0;
                         ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:54:18: note: Function in derived class
  nsProbingState GetState(void) {return mState;};
                 ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:55:13: style: The function 'Reset' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:61:21: note: Virtual function in base class
  virtual void      Reset(void)  = 0;
                    ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:55:13: note: Function in derived class
  void      Reset(void);
            ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:56:13: style: The function 'GetConfidence' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:62:21: note: Virtual function in base class
  virtual float     GetConfidence(void) = 0;
                    ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:56:13: note: Function in derived class
  float     GetConfidence(void);
            ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:57:13: style: The function 'SetOpion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsCharSetProber.h:63:21: note: Virtual function in base class
  virtual void      SetOpion() = 0;
                    ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:57:13: note: Function in derived class
  void      SetOpion() {};
            ^
src/3rdparty/chardet/src/nsSBCSGroupProber.cpp:273:23: style: Checking if unsigned expression 'mActiveNum' is less than zero. [unsignedLessThanZero]
       if (mActiveNum <= 0)
                      ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:60:9: style: The function 'DumpStatus' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void  DumpStatus();
        ^
src/3rdparty/chardet/src/nsCharSetProber.h:66:17: note: Virtual function in base class
  virtual void  DumpStatus() {};
                ^
src/3rdparty/chardet/src/nsSBCSGroupProber.h:60:9: note: Function in derived class
  void  DumpStatus();
        ^
src/3rdparty/chardet/src/nsSBCharSetProber.cpp:45:17: style: The scope of the variable 'order' can be reduced. [variableScope]
  unsigned char order;
                ^
src/3rdparty/chardet/src/nsSBCharSetProber.cpp:112:9: style: The scope of the variable 'r' can be reduced. [variableScope]
  float r;
        ^
src/3rdparty/libiconv/src/lib/encodings.def:38:1: error: syntax error [syntaxError]
DEFENCODING(( "US-ASCII",               /* IANA */
^
src/3rdparty/libiconv/src/lib/genaliases2.c:64:7: style: Variable 'tag' is assigned a value that is never used. [unreadVariable]
  tag = argv[1];
      ^
src/3rdparty/libiconv/src/lib/encodings_aix.def:20:1: error: syntax error [syntaxError]
DEFENCODING(( "CP856",
^
src/3rdparty/libiconv/src/lib/encodings_dos.def:20:1: error: syntax error [syntaxError]
DEFENCODING(( "CP437",                  /* IANA, JDK 1.1 */
^
src/3rdparty/libiconv/src/lib/encodings_extra.def:18:1: error: syntax error [syntaxError]
DEFENCODING(( "EUC-JISX0213",
^
src/3rdparty/libiconv/src/lib/encodings_osf1.def:20:1: error: syntax error [syntaxError]
DEFENCODING(( "DEC-KANJI",
^
src/3rdparty/libiconv/src/lib/encodings_zos.def:20:1: error: syntax error [syntaxError]
DEFENCODING(( "IBM-037",
^
src/3rdparty/libiconv/src/lib/cp1258.h:278:26: warning: Either the condition 'wc<0x0118' is redundant or the array 'cp1258_page01[104]' is accessed at index -56, which is out of bounds. [negativeIndex]
        c = cp1258_page01[wc-0x0150];
                         ^
src/3rdparty/libiconv/src/lib/cp1258.h:275:19: note: Assuming that condition 'wc<0x0118' is not redundant
      else if (wc < 0x0118)
                  ^
src/3rdparty/libiconv/src/lib/cp1258.h:278:26: note: Negative array index
        c = cp1258_page01[wc-0x0150];
                         ^
src/3rdparty/libiconv/src/lib/tcvn.h:278:24: warning: Either the condition 'wc<0x0080' is redundant or the array 'tcvn_page00[280]' is accessed at index -32, which is out of bounds. [negativeIndex]
        c = tcvn_page00[wc-0x00a0];
                       ^
src/3rdparty/libiconv/src/lib/tcvn.h:275:14: note: Assuming that condition 'wc<0x0080' is not redundant
      if (wc < 0x0080)
             ^
src/3rdparty/libiconv/src/lib/tcvn.h:278:24: note: Negative array index
        c = tcvn_page00[wc-0x00a0];
                       ^
src/3rdparty/libiconv/src/lib/mac_hebrew.h:59:14: style: Expression is always true because 'else if' condition is opposite to previous condition at line 55. [multiCondition]
  else if (c >= 0x80) {
             ^
src/3rdparty/libiconv/src/lib/mac_hebrew.h:55:9: note: first condition
  if (c < 0x80) {
        ^
src/3rdparty/libiconv/src/lib/mac_hebrew.h:59:14: note: else if condition is opposite to first condition
  else if (c >= 0x80) {
             ^
src/3rdparty/libiconv/src/lib/utf32.h:78:12: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
    if (wc < 0x110000) {
           ^
src/3rdparty/libiconv/src/lib/utf32.h:66:10: note: outer condition: wc<0x110000
  if (wc < 0x110000 && !(wc >= 0xd800 && wc < 0xe000)) {
         ^
src/3rdparty/libiconv/src/lib/utf32.h:78:12: note: identical inner condition: wc<0x110000
    if (wc < 0x110000) {
           ^
src/3rdparty/libiconv/src/lib/utf7.h:255:17: style: Mismatching assignment and comparison, comparison 'i==62' is always false. [assignIfError]
        else if (i == 62)
                ^
src/3rdparty/libiconv/src/lib/utf7.h:247:24: note: Mismatching assignment and comparison, comparison 'i==62' is always false.
        unsigned int i = state & -4;
                       ^
src/3rdparty/libiconv/src/lib/utf7.h:255:17: note: Mismatching assignment and comparison, comparison 'i==62' is always false.
        else if (i == 62)
                ^
src/3rdparty/libiconv/src/lib/utf7.h:257:17: style: Mismatching assignment and comparison, comparison 'i==63' is always false. [assignIfError]
        else if (i == 63)
                ^
src/3rdparty/libiconv/src/lib/utf7.h:247:24: note: Mismatching assignment and comparison, comparison 'i==63' is always false.
        unsigned int i = state & -4;
                       ^
src/3rdparty/libiconv/src/lib/utf7.h:257:17: note: Mismatching assignment and comparison, comparison 'i==63' is always false.
        else if (i == 63)
                ^
src/3rdparty/libiconv/src/lib/utf7.h:341:15: style: Mismatching assignment and comparison, comparison 'i==62' is always false. [assignIfError]
      else if (i == 62)
              ^
src/3rdparty/libiconv/src/lib/utf7.h:333:22: note: Mismatching assignment and comparison, comparison 'i==62' is always false.
      unsigned int i = state & -4;
                     ^
src/3rdparty/libiconv/src/lib/utf7.h:341:15: note: Mismatching assignment and comparison, comparison 'i==62' is always false.
      else if (i == 62)
              ^
src/3rdparty/libiconv/src/lib/utf7.h:343:15: style: Mismatching assignment and comparison, comparison 'i==63' is always false. [assignIfError]
      else if (i == 63)
              ^
src/3rdparty/libiconv/src/lib/utf7.h:333:22: note: Mismatching assignment and comparison, comparison 'i==63' is always false.
      unsigned int i = state & -4;
                     ^
src/3rdparty/libiconv/src/lib/utf7.h:343:15: note: Mismatching assignment and comparison, comparison 'i==63' is always false.
      else if (i == 63)
              ^
src/3rdparty/libiconv/src/lib/iso8859_2.h:102:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_2.h:98:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_2.h:102:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_3.h:106:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/iso8859_3.h:102:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_3.h:106:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/iso8859_4.h:102:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_4.h:98:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_4.h:102:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_5.h:83:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_5.h:79:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_5.h:83:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_6.h:88:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_6.h:84:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_6.h:88:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_7.h:95:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x00c0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_7.h:91:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_7.h:95:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x00c0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_8.h:95:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x00f8)
              ^
src/3rdparty/libiconv/src/lib/iso8859_8.h:91:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_8.h:95:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x00f8)
              ^
src/3rdparty/libiconv/src/lib/iso8859_9.h:75:15: style: Condition 'wc>=0x00d0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00d0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/iso8859_9.h:71:10: note: Assuming that condition 'wc<0x00d0' is not redundant
  if (wc < 0x00d0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_9.h:75:15: note: Condition 'wc>=0x00d0' is always true
  else if (wc >= 0x00d0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/iso8859_10.h:96:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_10.h:92:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_10.h:96:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_13.h:99:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_13.h:95:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_13.h:99:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_14.h:111:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/iso8859_14.h:107:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_14.h:111:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/iso8859_15.h:67:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x00c0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_15.h:63:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_15.h:67:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x00c0)
              ^
src/3rdparty/libiconv/src/lib/iso8859_16.h:102:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/iso8859_16.h:98:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/iso8859_16.h:102:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0180)
              ^
src/3rdparty/libiconv/src/lib/hp_roman8.h:101:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/hp_roman8.h:97:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/hp_roman8.h:101:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/armscii_8.h:100:15: style: Condition 'wc>=0x0028' is always true [knownConditionTrueFalse]
  else if (wc >= 0x0028 && wc < 0x0030)
              ^
src/3rdparty/libiconv/src/lib/armscii_8.h:96:10: note: Assuming that condition 'wc<0x0028' is not redundant
  if (wc < 0x0028) {
         ^
src/3rdparty/libiconv/src/lib/armscii_8.h:100:15: note: Condition 'wc>=0x0028' is always true
  else if (wc >= 0x0028 && wc < 0x0030)
              ^
src/3rdparty/libiconv/src/lib/georgian_academy.h:86:15: style: Condition 'wc>=0x0080' is always true [knownConditionTrueFalse]
  else if (wc >= 0x0080 && wc < 0x00a0)
              ^
src/3rdparty/libiconv/src/lib/georgian_academy.h:82:10: note: Assuming that condition 'wc<0x0080' is not redundant
  if (wc < 0x0080) {
         ^
src/3rdparty/libiconv/src/lib/georgian_academy.h:86:15: note: Condition 'wc>=0x0080' is always true
  else if (wc >= 0x0080 && wc < 0x00a0)
              ^
src/3rdparty/libiconv/src/lib/georgian_ps.h:103:15: style: Condition 'wc>=0x0080' is always true [knownConditionTrueFalse]
  else if (wc >= 0x0080 && wc < 0x00a0)
              ^
src/3rdparty/libiconv/src/lib/georgian_ps.h:99:10: note: Assuming that condition 'wc<0x0080' is not redundant
  if (wc < 0x0080) {
         ^
src/3rdparty/libiconv/src/lib/georgian_ps.h:103:15: note: Condition 'wc>=0x0080' is always true
  else if (wc >= 0x0080 && wc < 0x00a0)
              ^
src/3rdparty/libiconv/src/lib/cp1133.h:98:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/cp1133.h:94:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/cp1133.h:98:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/cp932.h:114:33: style: Condition 's1<=0xf9' is always true [knownConditionTrueFalse]
    } else if (s1 >= 0xf0 && s1 <= 0xf9) {
                                ^
src/3rdparty/libiconv/src/lib/cp932.h:110:66: note: Assuming that condition 's1>=0xfa' is not redundant
    } else if ((s1 == 0x87) || (s1 >= 0xed && s1 <= 0xee) || (s1 >= 0xfa)) {
                                                                 ^
src/3rdparty/libiconv/src/lib/cp932.h:114:33: note: Condition 's1<=0xf9' is always true
    } else if (s1 >= 0xf0 && s1 <= 0xf9) {
                                ^
src/3rdparty/libiconv/src/lib/iso2022_jpms.h:219:20: style: Condition 'wc==0xfffd' is always true [knownConditionTrueFalse]
            if (wc == 0xfffd)
                   ^
src/3rdparty/libiconv/src/lib/iso2022_jpms.h:216:33: note: Assignment 'wc=0xfffd', assigned value is 65533
            unsigned short wc = 0xfffd;
                                ^
src/3rdparty/libiconv/src/lib/iso2022_jpms.h:219:20: note: Condition 'wc==0xfffd' is always true
            if (wc == 0xfffd)
                   ^
src/3rdparty/libiconv/src/lib/hkscs2001.h:584:16: style: Condition 'wc>=0x6900' is always true [knownConditionTrueFalse]
        if (wc >= 0x6900 && wc < 0x6a70)
               ^
src/3rdparty/libiconv/src/lib/hkscs2001.h:558:14: note: Assuming that condition 'wc<0x6900' is not redundant
      if (wc < 0x6900) {
             ^
src/3rdparty/libiconv/src/lib/hkscs2001.h:584:16: note: Condition 'wc>=0x6900' is always true
        if (wc >= 0x6900 && wc < 0x6a70)
               ^
src/3rdparty/libiconv/src/lib/hkscs2001.h:611:16: style: Condition 'wc>=0x9f00' is always true [knownConditionTrueFalse]
        if (wc >= 0x9f00 && wc < 0x9fb0)
               ^
src/3rdparty/libiconv/src/lib/hkscs2001.h:557:12: note: Assuming that condition 'wc<0x9f00' is not redundant
    if (wc < 0x9f00) {
           ^
src/3rdparty/libiconv/src/lib/hkscs2001.h:611:16: note: Condition 'wc>=0x9f00' is always true
        if (wc >= 0x9f00 && wc < 0x9fb0)
               ^
src/3rdparty/libiconv/src/lib/hkscs2004.h:578:16: style: Condition 'wc>=0x6e00' is always true [knownConditionTrueFalse]
        if (wc >= 0x6e00 && wc < 0x6e60)
               ^
src/3rdparty/libiconv/src/lib/hkscs2004.h:550:14: note: Assuming that condition 'wc<0x6e00' is not redundant
      if (wc < 0x6e00) {
             ^
src/3rdparty/libiconv/src/lib/hkscs2004.h:578:16: note: Condition 'wc>=0x6e00' is always true
        if (wc >= 0x6e00 && wc < 0x6e60)
               ^
src/3rdparty/libiconv/src/lib/hkscs2004.h:605:16: style: Condition 'wc>=0x21a00' is always true [knownConditionTrueFalse]
        if (wc >= 0x21a00 && wc < 0x21a70)
               ^
src/3rdparty/libiconv/src/lib/hkscs2004.h:549:12: note: Assuming that condition 'wc<0x21a00' is not redundant
    if (wc < 0x21a00) {
           ^
src/3rdparty/libiconv/src/lib/hkscs2004.h:605:16: note: Condition 'wc>=0x21a00' is always true
        if (wc >= 0x21a00 && wc < 0x21a70)
               ^
src/3rdparty/libiconv/src/lib/cp922.h:87:15: style: Condition 'wc>=0x00a8' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a8 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/cp922.h:83:10: note: Assuming that condition 'wc<0x00a8' is not redundant
  if (wc < 0x00a8) {
         ^
src/3rdparty/libiconv/src/lib/cp922.h:87:15: note: Condition 'wc>=0x00a8' is always true
  else if (wc >= 0x00a8 && wc < 0x0100)
              ^
src/3rdparty/libiconv/src/lib/cp1124.h:90:15: style: Condition 'wc>=0x00a0' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/cp1124.h:86:10: note: Assuming that condition 'wc<0x00a0' is not redundant
  if (wc < 0x00a0) {
         ^
src/3rdparty/libiconv/src/lib/cp1124.h:90:15: note: Condition 'wc>=0x00a0' is always true
  else if (wc >= 0x00a0 && wc < 0x00b0)
              ^
src/3rdparty/libiconv/src/lib/cp1129.h:109:15: style: Condition 'wc>=0x00a8' is always true [knownConditionTrueFalse]
  else if (wc >= 0x00a8 && wc < 0x01b8)
              ^
src/3rdparty/libiconv/src/lib/cp1129.h:105:10: note: Assuming that condition 'wc<0x00a8' is not redundant
  if (wc < 0x00a8) {
         ^
src/3rdparty/libiconv/src/lib/cp1129.h:109:15: note: Condition 'wc>=0x00a8' is always true
  else if (wc >= 0x00a8 && wc < 0x01b8)
              ^
src/3rdparty/libiconv/src/lib/cp1162.h:54:15: style: Condition 'wc>=0x0080' is always true [knownConditionTrueFalse]
  else if (wc >= 0x0080 && wc < 0x00a0 && cp874_2uni[wc-0x0080] == 0xfffd)
              ^
src/3rdparty/libiconv/src/lib/cp1162.h:50:10: note: Assuming that condition 'wc<0x0080' is not redundant
  if (wc < 0x0080) {
         ^
src/3rdparty/libiconv/src/lib/cp1162.h:54:15: note: Condition 'wc>=0x0080' is always true
  else if (wc >= 0x0080 && wc < 0x00a0 && cp874_2uni[wc-0x0080] == 0xfffd)
              ^
src/3rdparty/libiconv/src/lib/cp864.h:160:15: style: Condition 'wc>=0x0020' is always true [knownConditionTrueFalse]
  else if (wc >= 0x0020 && wc < 0x0028)
              ^
src/3rdparty/libiconv/src/lib/cp864.h:156:10: note: Assuming that condition 'wc<0x0020' is not redundant
  if (wc < 0x0020) {
         ^
src/3rdparty/libiconv/src/lib/cp864.h:160:15: note: Condition 'wc>=0x0020' is always true
  else if (wc >= 0x0020 && wc < 0x0028)
              ^
src/3rdparty/libiconv/src/lib/tds565.h:93:15: style: Condition 'wc>=0x0040' is always true [knownConditionTrueFalse]
  else if (wc >= 0x0040 && wc < 0x0080)
              ^
src/3rdparty/libiconv/src/lib/tds565.h:89:10: note: Assuming that condition 'wc<0x0040' is not redundant
  if (wc < 0x0040) {
         ^
src/3rdparty/libiconv/src/lib/tds565.h:93:15: note: Condition 'wc>=0x0040' is always true
  else if (wc >= 0x0040 && wc < 0x0080)
              ^
src/3rdparty/libiconv/src/lib/cns11643_4.h:41:24: style: The scope of the variable 'swc' can be reduced. [variableScope]
        unsigned short swc;
                       ^
src/3rdparty/libiconv/src/lib/cns11643_5.h:1260:24: style: The scope of the variable 'swc' can be reduced. [variableScope]
        unsigned short swc;
                       ^
src/3rdparty/libiconv/src/lib/cns11643_6.h:950:24: style: The scope of the variable 'swc' can be reduced. [variableScope]
        unsigned short swc;
                       ^
src/3rdparty/libiconv/src/lib/cns11643_7.h:970:24: style: The scope of the variable 'swc' can be reduced. [variableScope]
        unsigned short swc;
                       ^
src/3rdparty/libiconv/src/lib/cns11643_15.h:1065:24: style: The scope of the variable 'swc' can be reduced. [variableScope]
        unsigned short swc;
                       ^
src/3rdparty/libiconv/src/lib/hkscs2001.h:68:24: style: The scope of the variable 'swc' can be reduced. [variableScope]
        unsigned short swc;
                       ^
src/3rdparty/libiconv/src/lib/hkscs2008.h:64:24: style: The scope of the variable 'swc' can be reduced. [variableScope]
        unsigned short swc;
                       ^
src/3rdparty/libiconv/src/lib/johab.h:62:23: style: The scope of the variable 's2' can be reduced. [variableScope]
    unsigned char s1, s2;
                      ^
src/3rdparty/libiconv/src/lib/shift_jisx0213.h:246:18: style: The scope of the variable 's1' can be reduced. [variableScope]
    unsigned int s1, s2;
                 ^
src/3rdparty/libiconv/src/lib/shift_jisx0213.h:246:22: style: The scope of the variable 's2' can be reduced. [variableScope]
    unsigned int s1, s2;
                     ^
src/3rdparty/libiconv/src/lib/jisx0208.h:2380:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x0100)
           ^
src/3rdparty/libiconv/src/lib/jisx0212.h:2160:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x0460)
           ^
src/3rdparty/libiconv/src/lib/gb2312.h:2538:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x0460)
           ^
src/3rdparty/libiconv/src/lib/isoir165ext.h:759:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x0200)
           ^
src/3rdparty/libiconv/src/lib/cns11643_inv.h:15372:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x0100)
           ^
src/3rdparty/libiconv/src/lib/big5.h:4123:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x0100)
           ^
src/3rdparty/libiconv/src/lib/ksc5601.h:2987:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x0460)
           ^
src/3rdparty/libiconv/src/lib/gb18030uni.h:184:23: style: Unsigned expression 'i' can't be negative so it is unnecessary to test it. [unsignedPositive]
                if (i >= 0 && i <= 39419) {
                      ^
src/3rdparty/libiconv/src/lib/gb18030.h:248:25: style: Unsigned expression 'i' can't be negative so it is unnecessary to test it. [unsignedPositive]
                  if (i >= 0 && i < 0x100000) {
                        ^
src/3rdparty/libiconv/src/lib/hkscs1999.h:2956:12: style: Unsigned expression 'wc' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (wc >= 0x0000 && wc < 0x02d0)
           ^
src/3rdparty/libiconv/src/lib/viscii.h:127:58: warning: Shifting 32-bit value by 127 bits is undefined behaviour. See condition at line 127. [shiftTooManyBits]
  if (wc < 0x0080 && (wc >= 0x0020 || (0x42100064U & (1U << wc)) == 0)) {
                                                         ^
src/3rdparty/libiconv/src/lib/viscii.h:127:10: note: Assuming that condition 'wc<0x0080' is not redundant
  if (wc < 0x0080 && (wc >= 0x0020 || (0x42100064U & (1U << wc)) == 0)) {
         ^
src/3rdparty/libiconv/src/lib/viscii.h:127:58: note: Shift
  if (wc < 0x0080 && (wc >= 0x0020 || (0x42100064U & (1U << wc)) == 0)) {
                                                         ^
src/3rdparty/libiconv/src/lib/tcvn.h:220:58: warning: Shifting 32-bit value by 127 bits is undefined behaviour. See condition at line 220. [shiftTooManyBits]
  if (wc < 0x0080 && (wc >= 0x0020 || (0x00fe0076U & (1U << wc)) == 0)) {
                                                         ^
src/3rdparty/libiconv/src/lib/tcvn.h:220:10: note: Assuming that condition 'wc<0x0080' is not redundant
  if (wc < 0x0080 && (wc >= 0x0020 || (0x00fe0076U & (1U << wc)) == 0)) {
         ^
src/3rdparty/libiconv/src/lib/tcvn.h:220:58: note: Shift
  if (wc < 0x0080 && (wc >= 0x0020 || (0x00fe0076U & (1U << wc)) == 0)) {
                                                         ^
src/3rdparty/libiconv/src/lib/gentranslit.c:248:49: warning: Either the condition 't>=0' is redundant or the array 'tables[8192]' is accessed at index -1, which is out of bounds. [negativeIndex]
          printf(" ? translit_page%s[wc", tables[t].suffix);
                                                ^
src/3rdparty/libiconv/src/lib/gentranslit.c:234:15: note: Assuming that condition 't>=0' is not redundant
        if (t >= 0 && tables[t].usecount == 0) abort();
              ^
src/3rdparty/libiconv/src/lib/gentranslit.c:248:49: note: Negative array index
          printf(" ? translit_page%s[wc", tables[t].suffix);
                                                ^
src/3rdparty/libiconv/src/lib/gentranslit.c:249:21: warning: Either the condition 't>=0' is redundant or the array 'tables[8192]' is accessed at index -1, which is out of bounds. [negativeIndex]
          if (tables[t].minline > 0)
                    ^
src/3rdparty/libiconv/src/lib/gentranslit.c:234:15: note: Assuming that condition 't>=0' is not redundant
        if (t >= 0 && tables[t].usecount == 0) abort();
              ^
src/3rdparty/libiconv/src/lib/gentranslit.c:249:21: note: Negative array index
          if (tables[t].minline > 0)
                    ^
src/3rdparty/libiconv/src/lib/gentranslit.c:82:11: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
      if (scanf("%x",&j) != 1)
          ^
src/3rdparty/libiconv/src/lib/gentranslit.c:124:9: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        printf("\n %3d,",data[i]);
        ^
src/3rdparty/libiconv/src/lib/gentranslit.c:68:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c;
        ^
src/3rdparty/libiconv/src/lib/iconv.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/libiconv/src/lib/iconv.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/libiconv/src/lib/relocatable.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/libiconv/src/lib/relocatable.c:162:36: style:inconclusive: Function 'set_relocation_prefix' argument 1 names different: declaration 'orig_prefix' definition 'orig_prefix_arg'. [funcArgNamesDifferent]
set_relocation_prefix (const char *orig_prefix_arg, const char *curr_prefix_arg)
                                   ^
src/3rdparty/libiconv/src/lib/relocatable.h:46:43: note: Function 'set_relocation_prefix' argument 1 names different: declaration 'orig_prefix' definition 'orig_prefix_arg'.
       set_relocation_prefix (const char *orig_prefix,
                                          ^
src/3rdparty/libiconv/src/lib/relocatable.c:162:36: note: Function 'set_relocation_prefix' argument 1 names different: declaration 'orig_prefix' definition 'orig_prefix_arg'.
set_relocation_prefix (const char *orig_prefix_arg, const char *curr_prefix_arg)
                                   ^
src/3rdparty/libiconv/src/lib/relocatable.c:162:65: style:inconclusive: Function 'set_relocation_prefix' argument 2 names different: declaration 'curr_prefix' definition 'curr_prefix_arg'. [funcArgNamesDifferent]
set_relocation_prefix (const char *orig_prefix_arg, const char *curr_prefix_arg)
                                                                ^
src/3rdparty/libiconv/src/lib/relocatable.h:47:43: note: Function 'set_relocation_prefix' argument 2 names different: declaration 'curr_prefix' definition 'curr_prefix_arg'.
                              const char *curr_prefix);
                                          ^
src/3rdparty/libiconv/src/lib/relocatable.c:162:65: note: Function 'set_relocation_prefix' argument 2 names different: declaration 'curr_prefix' definition 'curr_prefix_arg'.
set_relocation_prefix (const char *orig_prefix_arg, const char *curr_prefix_arg)
                                                                ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/libiconv/src/libcharset/localcharset.c:1088:14: style: Condition 'locale==NULL' is always true [knownConditionTrueFalse]
  if (locale == NULL || locale[0] == '\0')
             ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:1079:24: note: Assignment 'locale=NULL', assigned value is 0
  const char *locale = NULL;
                       ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:1088:14: note: Condition 'locale==NULL' is always true
  if (locale == NULL || locale[0] == '\0')
             ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:579:14: style: struct member 'table_entry::locale' is never used. [unusedStructMember]
  const char locale[17+1];
             ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:580:14: style: struct member 'table_entry::canonical' is never used. [unusedStructMember]
  const char canonical[11+1];
             ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:1097:22: style: Variable 'locale' is assigned a value that is never used. [unreadVariable]
              locale = "";
                     ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:88:14: style: struct member 'table_entry::alias' is never used. [unusedStructMember]
  const char alias[11+1];
             ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:89:14: style: struct member 'table_entry::canonical' is never used. [unusedStructMember]
  const char canonical[11+1];
             ^
src/3rdparty/libiconv/src/libcharset/localcharset.c:828:0: information: Skipping configuration 'STATIC' since the value of 'STATIC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
STATIC
^
src/3rdparty/luajit/src/host/buildvm.c:185:41: warning: Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead? [sizeofDivisionMemfunc]
  ctx->relocsym = (const char **)malloc(NRELOCSYM*sizeof(const char *));
                                        ^
src/3rdparty/luajit/src/host/buildvm_asm.c:144:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(ctx->fp, "\t%s %d, %d, " TOCPREFIX "%s\n",
    ^
src/3rdparty/luajit/src/host/buildvm_asm.c:144:5: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(ctx->fp, "\t%s %d, %d, " TOCPREFIX "%s\n",
    ^
src/3rdparty/luajit/src/host/buildvm_fold.c:54:3: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  fprintf(ctx->fp, "static const uint32_t fold_hash[%d] = {\n0x%08x",
  ^
src/3rdparty/luajit/src/host/buildvm_lib.c:412:11: style: The scope of the variable 'n' can be reduced. [variableScope]
   size_t n, len = strlen(ldh->suffix);
          ^
src/3rdparty/luajit/src/host/minilua.c:7215:12: warning: Either the condition 'level>=32' is redundant or the array 'ms->capture[32]' is accessed at index 32, which is out of bounds. [arrayIndexOutOfBoundsCond]
ms->capture[level].init=s;
           ^
src/3rdparty/luajit/src/host/minilua.c:7214:9: note: Assuming that condition 'level>=32' is not redundant
if(level>=32)luaL_error(ms->L,"too many captures");
        ^
src/3rdparty/luajit/src/host/minilua.c:7215:12: note: Array index out of bounds
ms->capture[level].init=s;
           ^
src/3rdparty/luajit/src/host/minilua.c:7216:12: warning: Either the condition 'level>=32' is redundant or the array 'ms->capture[32]' is accessed at index 32, which is out of bounds. [arrayIndexOutOfBoundsCond]
ms->capture[level].len=what;
           ^
src/3rdparty/luajit/src/host/minilua.c:7214:9: note: Assuming that condition 'level>=32' is not redundant
if(level>=32)luaL_error(ms->L,"too many captures");
        ^
src/3rdparty/luajit/src/host/minilua.c:7216:12: note: Array index out of bounds
ms->capture[level].len=what;
           ^
src/3rdparty/luajit/src/host/minilua.c:2694:16: warning: Either the condition 'token<257' is redundant or iscntrl() argument nr 1 can have invalid value. The value is 256 but the valid values are '0:255'. [invalidFunctionArg]
return(iscntrl(token))?luaO_pushfstring(ls->L,"char(%d)",token):
               ^
src/3rdparty/luajit/src/host/minilua.c:2693:9: note: Assuming that condition 'token<257' is not redundant
if(token<257){
        ^
src/3rdparty/luajit/src/host/minilua.c:2694:16: note: Invalid argument
return(iscntrl(token))?luaO_pushfstring(ls->L,"char(%d)",token):
               ^
src/3rdparty/luajit/src/host/minilua.c:1107:4: style: Condition 'htab' is always false [knownConditionTrueFalse]
if(htab){
   ^
src/3rdparty/luajit/src/host/minilua.c:1097:12: note: Assignment 'htab=NULL', assigned value is 0
Table*htab=NULL;
           ^
src/3rdparty/luajit/src/host/minilua.c:1107:4: note: Condition 'htab' is always false
if(htab){
   ^
src/3rdparty/luajit/src/host/minilua.c:2186:14: style: Condition 'g->gcstate!=0' is always true [knownConditionTrueFalse]
if(g->gcstate!=0){
             ^
src/3rdparty/luajit/src/host/minilua.c:2183:14: note: Assuming that condition 'g->gcstate==0' is not redundant
if(g->gcstate==0)
             ^
src/3rdparty/luajit/src/host/minilua.c:2186:14: note: Condition 'g->gcstate!=0' is always true
if(g->gcstate!=0){
             ^
src/3rdparty/luajit/src/host/minilua.c:3903:9: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
Proto*f=fs->f;
        ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3903:9: note: Null pointer dereference
Proto*f=fs->f;
        ^
src/3rdparty/luajit/src/host/minilua.c:3906:1: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
luaM_reallocvector(L,f->code,f->sizecode,fs->pc,Instruction);
^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3906:1: note: Null pointer dereference
luaM_reallocvector(L,f->code,f->sizecode,fs->pc,Instruction);
^
src/3rdparty/luajit/src/host/minilua.c:3907:13: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
f->sizecode=fs->pc;
            ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3907:13: note: Null pointer dereference
f->sizecode=fs->pc;
            ^
src/3rdparty/luajit/src/host/minilua.c:3908:1: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
luaM_reallocvector(L,f->lineinfo,f->sizelineinfo,fs->pc,int);
^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3908:1: note: Null pointer dereference
luaM_reallocvector(L,f->lineinfo,f->sizelineinfo,fs->pc,int);
^
src/3rdparty/luajit/src/host/minilua.c:3909:17: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
f->sizelineinfo=fs->pc;
                ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3909:17: note: Null pointer dereference
f->sizelineinfo=fs->pc;
                ^
src/3rdparty/luajit/src/host/minilua.c:3910:1: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
luaM_reallocvector(L,f->k,f->sizek,fs->nk,TValue);
^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3910:1: note: Null pointer dereference
luaM_reallocvector(L,f->k,f->sizek,fs->nk,TValue);
^
src/3rdparty/luajit/src/host/minilua.c:3911:10: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
f->sizek=fs->nk;
         ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3911:10: note: Null pointer dereference
f->sizek=fs->nk;
         ^
src/3rdparty/luajit/src/host/minilua.c:3912:1: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
luaM_reallocvector(L,f->p,f->sizep,fs->np,Proto*);
^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3912:1: note: Null pointer dereference
luaM_reallocvector(L,f->p,f->sizep,fs->np,Proto*);
^
src/3rdparty/luajit/src/host/minilua.c:3913:10: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
f->sizep=fs->np;
         ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3913:10: note: Null pointer dereference
f->sizep=fs->np;
         ^
src/3rdparty/luajit/src/host/minilua.c:3914:1: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
luaM_reallocvector(L,f->locvars,f->sizelocvars,fs->nlocvars,LocVar);
^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3914:1: note: Null pointer dereference
luaM_reallocvector(L,f->locvars,f->sizelocvars,fs->nlocvars,LocVar);
^
src/3rdparty/luajit/src/host/minilua.c:3915:16: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
f->sizelocvars=fs->nlocvars;
               ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3915:16: note: Null pointer dereference
f->sizelocvars=fs->nlocvars;
               ^
src/3rdparty/luajit/src/host/minilua.c:3918:8: warning: Either the condition 'fs' is redundant or there is possible null pointer dereference: fs. [nullPointerRedundantCheck]
ls->fs=fs->prev;
       ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant
if(fs)anchor_token(ls);
   ^
src/3rdparty/luajit/src/host/minilua.c:3918:8: note: Null pointer dereference
ls->fs=fs->prev;
       ^
src/3rdparty/luajit/src/host/minilua.c:6871:11: warning: Either the condition 'f==NULL' is redundant or there is possible null pointer dereference: f. [nullPointerRedundantCheck]
if(ferror(f))
          ^
src/3rdparty/luajit/src/host/minilua.c:6868:5: note: Assuming that condition 'f==NULL' is not redundant
if(f==NULL)
    ^
src/3rdparty/luajit/src/host/minilua.c:6871:11: note: Null pointer dereference
if(ferror(f))
          ^
src/3rdparty/luajit/src/host/minilua.c:2492:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
ar->namewhat=(ci)?NULL:NULL;
                      ^
src/3rdparty/luajit/src/host/minilua.c:2542:5: style: Same value in both branches of ternary operator. [duplicateValueTernary]
NULL:
    ^
src/3rdparty/luajit/src/host/minilua.c:3002:13: style: The scope of the variable 'previous' can be reduced. [variableScope]
Instruction*previous;
            ^
src/3rdparty/luajit/src/host/minilua.c:917:1: style: Checking if unsigned expression '(unsigned long)(0+1)' is less than zero. [unsignedLessThanZero]
luaM_freearray(L,f->lineinfo,f->sizelineinfo,int);
^
src/3rdparty/luajit/src/host/minilua.c:530:66: style:inconclusive: Function 'luaM_growaux_' argument 4 names different: declaration 'size_elem' definition 'size_elems'. [funcArgNamesDifferent]
static void*luaM_growaux_(lua_State*L,void*block,int*size,size_t size_elems,
                                                                 ^
src/3rdparty/luajit/src/host/minilua.c:389:8: note: Function 'luaM_growaux_' argument 4 names different: declaration 'size_elem' definition 'size_elems'.
size_t size_elem,int limit,
       ^
src/3rdparty/luajit/src/host/minilua.c:530:66: note: Function 'luaM_growaux_' argument 4 names different: declaration 'size_elem' definition 'size_elems'.
static void*luaM_growaux_(lua_State*L,void*block,int*size,size_t size_elems,
                                                                 ^
src/3rdparty/luajit/src/host/minilua.c:552:57: style:inconclusive: Function 'luaM_realloc_' argument 3 names different: declaration 'oldsize' definition 'osize'. [funcArgNamesDifferent]
static void*luaM_realloc_(lua_State*L,void*block,size_t osize,size_t nsize){
                                                        ^
src/3rdparty/luajit/src/host/minilua.c:385:57: note: Function 'luaM_realloc_' argument 3 names different: declaration 'oldsize' definition 'osize'.
static void*luaM_realloc_(lua_State*L,void*block,size_t oldsize,
                                                        ^
src/3rdparty/luajit/src/host/minilua.c:552:57: note: Function 'luaM_realloc_' argument 3 names different: declaration 'oldsize' definition 'osize'.
static void*luaM_realloc_(lua_State*L,void*block,size_t osize,size_t nsize){
                                                        ^
src/3rdparty/luajit/src/host/minilua.c:552:70: style:inconclusive: Function 'luaM_realloc_' argument 4 names different: declaration 'size' definition 'nsize'. [funcArgNamesDifferent]
static void*luaM_realloc_(lua_State*L,void*block,size_t osize,size_t nsize){
                                                                     ^
src/3rdparty/luajit/src/host/minilua.c:386:8: note: Function 'luaM_realloc_' argument 4 names different: declaration 'size' definition 'nsize'.
size_t size);
       ^
src/3rdparty/luajit/src/host/minilua.c:552:70: note: Function 'luaM_realloc_' argument 4 names different: declaration 'size' definition 'nsize'.
static void*luaM_realloc_(lua_State*L,void*block,size_t osize,size_t nsize){
                                                                     ^
src/3rdparty/luajit/src/host/minilua.c:2538:66: style:inconclusive: Function 'luaG_typeerror' argument 3 names different: declaration 'opname' definition 'op'. [funcArgNamesDifferent]
static void luaG_typeerror(lua_State*L,const TValue*o,const char*op){
                                                                 ^
src/3rdparty/luajit/src/host/minilua.c:516:12: note: Function 'luaG_typeerror' argument 3 names different: declaration 'opname' definition 'op'.
const char*opname);
           ^
src/3rdparty/luajit/src/host/minilua.c:2538:66: note: Function 'luaG_typeerror' argument 3 names different: declaration 'opname' definition 'op'.
static void luaG_typeerror(lua_State*L,const TValue*o,const char*op){
                                                                 ^
src/3rdparty/luajit/src/host/minilua.c:3639:51: style:inconclusive: Function 'luaK_codeABC' argument 3 names different: declaration 'A' definition 'a'. [funcArgNamesDifferent]
static int luaK_codeABC(FuncState*fs,OpCode o,int a,int b,int c){
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:2394:51: note: Function 'luaK_codeABC' argument 3 names different: declaration 'A' definition 'a'.
static int luaK_codeABC(FuncState*fs,OpCode o,int A,int B,int C);
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:3639:51: note: Function 'luaK_codeABC' argument 3 names different: declaration 'A' definition 'a'.
static int luaK_codeABC(FuncState*fs,OpCode o,int a,int b,int c){
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:3639:57: style:inconclusive: Function 'luaK_codeABC' argument 4 names different: declaration 'B' definition 'b'. [funcArgNamesDifferent]
static int luaK_codeABC(FuncState*fs,OpCode o,int a,int b,int c){
                                                        ^
src/3rdparty/luajit/src/host/minilua.c:2394:57: note: Function 'luaK_codeABC' argument 4 names different: declaration 'B' definition 'b'.
static int luaK_codeABC(FuncState*fs,OpCode o,int A,int B,int C);
                                                        ^
src/3rdparty/luajit/src/host/minilua.c:3639:57: note: Function 'luaK_codeABC' argument 4 names different: declaration 'B' definition 'b'.
static int luaK_codeABC(FuncState*fs,OpCode o,int a,int b,int c){
                                                        ^
src/3rdparty/luajit/src/host/minilua.c:3639:63: style:inconclusive: Function 'luaK_codeABC' argument 5 names different: declaration 'C' definition 'c'. [funcArgNamesDifferent]
static int luaK_codeABC(FuncState*fs,OpCode o,int a,int b,int c){
                                                              ^
src/3rdparty/luajit/src/host/minilua.c:2394:63: note: Function 'luaK_codeABC' argument 5 names different: declaration 'C' definition 'c'.
static int luaK_codeABC(FuncState*fs,OpCode o,int A,int B,int C);
                                                              ^
src/3rdparty/luajit/src/host/minilua.c:3639:63: note: Function 'luaK_codeABC' argument 5 names different: declaration 'C' definition 'c'.
static int luaK_codeABC(FuncState*fs,OpCode o,int a,int b,int c){
                                                              ^
src/3rdparty/luajit/src/host/minilua.c:3642:51: style:inconclusive: Function 'luaK_codeABx' argument 3 names different: declaration 'A' definition 'a'. [funcArgNamesDifferent]
static int luaK_codeABx(FuncState*fs,OpCode o,int a,unsigned int bc){
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:2393:51: note: Function 'luaK_codeABx' argument 3 names different: declaration 'A' definition 'a'.
static int luaK_codeABx(FuncState*fs,OpCode o,int A,unsigned int Bx);
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:3642:51: note: Function 'luaK_codeABx' argument 3 names different: declaration 'A' definition 'a'.
static int luaK_codeABx(FuncState*fs,OpCode o,int a,unsigned int bc){
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:3642:66: style:inconclusive: Function 'luaK_codeABx' argument 4 names different: declaration 'Bx' definition 'bc'. [funcArgNamesDifferent]
static int luaK_codeABx(FuncState*fs,OpCode o,int a,unsigned int bc){
                                                                 ^
src/3rdparty/luajit/src/host/minilua.c:2393:66: note: Function 'luaK_codeABx' argument 4 names different: declaration 'Bx' definition 'bc'.
static int luaK_codeABx(FuncState*fs,OpCode o,int A,unsigned int Bx);
                                                                 ^
src/3rdparty/luajit/src/host/minilua.c:3642:66: note: Function 'luaK_codeABx' argument 4 names different: declaration 'Bx' definition 'bc'.
static int luaK_codeABx(FuncState*fs,OpCode o,int a,unsigned int bc){
                                                                 ^
src/3rdparty/luajit/src/host/minilua.c:5532:61: style:inconclusive: Function 'lua_pushlstring' argument 3 names different: declaration 'l' definition 'len'. [funcArgNamesDifferent]
static void lua_pushlstring(lua_State*L,const char*s,size_t len){
                                                            ^
src/3rdparty/luajit/src/host/minilua.c:174:61: note: Function 'lua_pushlstring' argument 3 names different: declaration 'l' definition 'len'.
static void lua_pushlstring(lua_State*L,const char*s,size_t l);
                                                            ^
src/3rdparty/luajit/src/host/minilua.c:5532:61: note: Function 'lua_pushlstring' argument 3 names different: declaration 'l' definition 'len'.
static void lua_pushlstring(lua_State*L,const char*s,size_t len){
                                                            ^
src/3rdparty/luajit/src/host/minilua.c:5608:45: style:inconclusive: Function 'lua_createtable' argument 2 names different: declaration 'narr' definition 'narray'. [funcArgNamesDifferent]
static void lua_createtable(lua_State*L,int narray,int nrec){
                                            ^
src/3rdparty/luajit/src/host/minilua.c:176:45: note: Function 'lua_createtable' argument 2 names different: declaration 'narr' definition 'narray'.
static void lua_createtable(lua_State*L,int narr,int nrec);
                                            ^
src/3rdparty/luajit/src/host/minilua.c:5608:45: note: Function 'lua_createtable' argument 2 names different: declaration 'narr' definition 'narray'.
static void lua_createtable(lua_State*L,int narray,int nrec){
                                            ^
src/3rdparty/luajit/src/host/minilua.c:5872:42: style:inconclusive: Function 'luaL_argerror' argument 2 names different: declaration 'numarg' definition 'narg'. [funcArgNamesDifferent]
static int luaL_argerror(lua_State*L,int narg,const char*extramsg){
                                         ^
src/3rdparty/luajit/src/host/minilua.c:5844:42: note: Function 'luaL_argerror' argument 2 names different: declaration 'numarg' definition 'narg'.
static int luaL_argerror(lua_State*L,int numarg,const char*extramsg);
                                         ^
src/3rdparty/luajit/src/host/minilua.c:5872:42: note: Function 'luaL_argerror' argument 2 names different: declaration 'numarg' definition 'narg'.
static int luaL_argerror(lua_State*L,int narg,const char*extramsg){
                                         ^
src/3rdparty/luajit/src/host/minilua.c:5952:53: style:inconclusive: Function 'luaL_checklstring' argument 2 names different: declaration 'numArg' definition 'narg'. [funcArgNamesDifferent]
static const char*luaL_checklstring(lua_State*L,int narg,size_t*len){
                                                    ^
src/3rdparty/luajit/src/host/minilua.c:5845:54: note: Function 'luaL_checklstring' argument 2 names different: declaration 'numArg' definition 'narg'.
static const char* luaL_checklstring(lua_State*L,int numArg,
                                                     ^
src/3rdparty/luajit/src/host/minilua.c:5952:53: note: Function 'luaL_checklstring' argument 2 names different: declaration 'numArg' definition 'narg'.
static const char*luaL_checklstring(lua_State*L,int narg,size_t*len){
                                                    ^
src/3rdparty/luajit/src/host/minilua.c:5952:65: style:inconclusive: Function 'luaL_checklstring' argument 3 names different: declaration 'l' definition 'len'. [funcArgNamesDifferent]
static const char*luaL_checklstring(lua_State*L,int narg,size_t*len){
                                                                ^
src/3rdparty/luajit/src/host/minilua.c:5846:8: note: Function 'luaL_checklstring' argument 3 names different: declaration 'l' definition 'len'.
size_t*l);
       ^
src/3rdparty/luajit/src/host/minilua.c:5952:65: note: Function 'luaL_checklstring' argument 3 names different: declaration 'l' definition 'len'.
static const char*luaL_checklstring(lua_State*L,int narg,size_t*len){
                                                                ^
src/3rdparty/luajit/src/host/minilua.c:5957:51: style:inconclusive: Function 'luaL_optlstring' argument 2 names different: declaration 'numArg' definition 'narg'. [funcArgNamesDifferent]
static const char*luaL_optlstring(lua_State*L,int narg,
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:5847:52: note: Function 'luaL_optlstring' argument 2 names different: declaration 'numArg' definition 'narg'.
static const char* luaL_optlstring(lua_State*L,int numArg,
                                                   ^
src/3rdparty/luajit/src/host/minilua.c:5957:51: note: Function 'luaL_optlstring' argument 2 names different: declaration 'numArg' definition 'narg'.
static const char*luaL_optlstring(lua_State*L,int narg,
                                                  ^
src/3rdparty/luajit/src/host/minilua.c:5958:23: style:inconclusive: Function 'luaL_optlstring' argument 4 names different: declaration 'l' definition 'len'. [funcArgNamesDifferent]
const char*def,size_t*len){
                      ^
src/3rdparty/luajit/src/host/minilua.c:5848:23: note: Function 'luaL_optlstring' argument 4 names different: declaration 'l' definition 'len'.
const char*def,size_t*l);
                      ^
src/3rdparty/luajit/src/host/minilua.c:5958:23: note: Function 'luaL_optlstring' argument 4 names different: declaration 'l' definition 'len'.
const char*def,size_t*len){
                      ^
src/3rdparty/luajit/src/host/minilua.c:5972:54: style:inconclusive: Function 'luaL_checkinteger' argument 2 names different: declaration 'numArg' definition 'narg'. [funcArgNamesDifferent]
static lua_Integer luaL_checkinteger(lua_State*L,int narg){
                                                     ^
src/3rdparty/luajit/src/host/minilua.c:5849:54: note: Function 'luaL_checkinteger' argument 2 names different: declaration 'numArg' definition 'narg'.
static lua_Integer luaL_checkinteger(lua_State*L,int numArg);
                                                     ^
src/3rdparty/luajit/src/host/minilua.c:5972:54: note: Function 'luaL_checkinteger' argument 2 names different: declaration 'numArg' definition 'narg'.
static lua_Integer luaL_checkinteger(lua_State*L,int narg){
                                                     ^
src/3rdparty/luajit/src/host/minilua.c:5978:52: style:inconclusive: Function 'luaL_optinteger' argument 2 names different: declaration 'nArg' definition 'narg'. [funcArgNamesDifferent]
static lua_Integer luaL_optinteger(lua_State*L,int narg,
                                                   ^
src/3rdparty/luajit/src/host/minilua.c:5850:52: note: Function 'luaL_optinteger' argument 2 names different: declaration 'nArg' definition 'narg'.
static lua_Integer luaL_optinteger(lua_State*L,int nArg,
                                                   ^
src/3rdparty/luajit/src/host/minilua.c:5978:52: note: Function 'luaL_optinteger' argument 2 names different: declaration 'nArg' definition 'narg'.
static lua_Integer luaL_optinteger(lua_State*L,int narg,
                                                   ^
src/3rdparty/luajit/src/lib_aux.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 99 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lua.h:95:0: error: No header in #include [preprocessorErrorDirective]
#include LUA_USER_H
^
src/3rdparty/luajit/src/lib_base.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_base.c:154:9: warning: Either the condition 'o==NULL' is redundant or there is possible null pointer dereference: o. [nullPointerRedundantCheck]
  fn = &gcval(o)->fn;
        ^
src/3rdparty/luajit/src/lib_base.c:150:11: note: Assuming that condition 'o==NULL' is not redundant
    if (o == NULL)
          ^
src/3rdparty/luajit/src/lib_base.c:154:9: note: Null pointer dereference
  fn = &gcval(o)->fn;
        ^
src/3rdparty/luajit/src/lib_base.c:176:9: warning: Either the condition 'o==NULL' is redundant or there is possible null pointer dereference: o. [nullPointerRedundantCheck]
  fn = &gcval(o)->fn;
        ^
src/3rdparty/luajit/src/lib_base.c:172:11: note: Assuming that condition 'o==NULL' is not redundant
    if (o == NULL)
          ^
src/3rdparty/luajit/src/lib_base.c:176:9: note: Null pointer dereference
  fn = &gcval(o)->fn;
        ^
src/3rdparty/luajit/src/lib_base.c:542:12: warning: Either the condition '!str' is redundant or there is possible null pointer dereference: str. [nullPointerRedundantCheck]
    fwrite(str, 1, size, stdout);
           ^
src/3rdparty/luajit/src/lib_base.c:536:11: note: Assuming that condition '!str' is not redundant
      if (!str)
          ^
src/3rdparty/luajit/src/lib_base.c:542:12: note: Null pointer dereference
    fwrite(str, 1, size, stdout);
           ^
src/3rdparty/luajit/src/lib_base.c:295:19: style: The scope of the variable 'ul' can be reduced. [variableScope]
    unsigned long ul;
                  ^
src/3rdparty/luajit/src/lib_bit.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_buffer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 92 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_buffer.c:197:30: error: Uninitialized variable: p [uninitvar]
  lj_buf_putmem((SBuf *)sbx, p, len);
                             ^
src/3rdparty/luajit/src/lib_buffer.c:189:7: note: Assuming condition is false
  if (tviscdata(L->base+1)) {
      ^
src/3rdparty/luajit/src/lib_buffer.c:197:30: note: Uninitialized variable: p
  lj_buf_putmem((SBuf *)sbx, p, len);
                             ^
src/3rdparty/luajit/src/lib_debug.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 92 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_ffi.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 99 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_ffi.c:125:8: warning: Either the condition '!tv' is redundant or there is possible null pointer dereference: tv. [nullPointerRedundantCheck]
  if (!tvisfunc(tv)) {
       ^
src/3rdparty/luajit/src/lib_ffi.c:112:7: note: Assuming that condition '!tv' is not redundant
  if (!tv) {
      ^
src/3rdparty/luajit/src/lib_ffi.c:125:8: note: Null pointer dereference
  if (!tvisfunc(tv)) {
       ^
src/3rdparty/luajit/src/lib_init.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 69 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_io.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 96 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_io.c:98:7: style: Condition 'wfname' is always false [knownConditionTrueFalse]
  if (wfname)
      ^
src/3rdparty/luajit/src/lib_io.c:85:21: note: Assignment 'wfname=NULL', assigned value is 0
  wchar_t *wfname = NULL;
                    ^
src/3rdparty/luajit/src/lib_io.c:98:7: note: Condition 'wfname' is always false
  if (wfname)
      ^
src/3rdparty/luajit/src/lib_io.c:436:7: style: Condition 'wfname' is always false [knownConditionTrueFalse]
  if (wfname)
      ^
src/3rdparty/luajit/src/lib_io.c:423:21: note: Assignment 'wfname=NULL', assigned value is 0
  wchar_t *wfname = NULL;
                    ^
src/3rdparty/luajit/src/lib_io.c:436:7: note: Condition 'wfname' is always false
  if (wfname)
      ^
src/3rdparty/luajit/src/lib_io.c:121:16: style: The comparison 'stat != -1' is always false. [knownConditionTrueFalse]
    ok = (stat != -1);
               ^
src/3rdparty/luajit/src/lib_io.c:111:17: note: 'stat' is assigned value '-1' here.
    int stat = -1;
                ^
src/3rdparty/luajit/src/lib_io.c:121:16: note: The comparison 'stat != -1' is always false.
    ok = (stat != -1);
               ^
src/3rdparty/luajit/src/lib_jit.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 117 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_target_x86.h:240:13: error: Signed integer overflow for expression '0x7be3c4+(0xf0<<24)'. [integerOverflow]
  XV_RORX = XV_f20f3a(f0),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:240:13: error: Signed integer overflow for expression '0xf0<<24'. [integerOverflow]
  XV_RORX = XV_f20f3a(f0),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:241:13: error: Signed integer overflow for expression '0x7ae2c4+(0xf7<<24)'. [integerOverflow]
  XV_SARX = XV_f30f38(f7),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:241:13: error: Signed integer overflow for expression '0xf7<<24'. [integerOverflow]
  XV_SARX = XV_f30f38(f7),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:242:13: error: Signed integer overflow for expression '0x79e2c4+(0xf7<<24)'. [integerOverflow]
  XV_SHLX = XV_660f38(f7),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:242:13: error: Signed integer overflow for expression '0xf7<<24'. [integerOverflow]
  XV_SHLX = XV_660f38(f7),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:243:13: error: Signed integer overflow for expression '0x7be2c4+(0xf7<<24)'. [integerOverflow]
  XV_SHRX = XV_f20f38(f7),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:243:13: error: Signed integer overflow for expression '0xf7<<24'. [integerOverflow]
  XV_SHRX = XV_f20f38(f7),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:247:12: error: Signed integer overflow for expression '0x0000fe+(0x8b<<24)'. [integerOverflow]
  XO_MOV = XO_(8b),
           ^
src/3rdparty/luajit/src/lj_target_x86.h:247:12: error: Signed integer overflow for expression '0x8b<<24'. [integerOverflow]
  XO_MOV = XO_(8b),
           ^
src/3rdparty/luajit/src/lj_target_x86.h:248:14: error: Signed integer overflow for expression '0x0000fe+(0x89<<24)'. [integerOverflow]
  XO_MOVto = XO_(89),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:248:14: error: Signed integer overflow for expression '0x89<<24'. [integerOverflow]
  XO_MOVto = XO_(89),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:249:15: error: Signed integer overflow for expression '0x6600fd+(0x89<<24)'. [integerOverflow]
  XO_MOVtow = XO_66(89),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:249:15: error: Signed integer overflow for expression '0x89<<24'. [integerOverflow]
  XO_MOVtow = XO_66(89),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:250:15: error: Signed integer overflow for expression '0x0000fe+(0x88<<24)'. [integerOverflow]
  XO_MOVtob = XO_(88),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:250:15: error: Signed integer overflow for expression '0x88<<24'. [integerOverflow]
  XO_MOVtob = XO_(88),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:251:14: error: Signed integer overflow for expression '0x0000fe+(0xc7<<24)'. [integerOverflow]
  XO_MOVmi = XO_(c7),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:251:14: error: Signed integer overflow for expression '0xc7<<24'. [integerOverflow]
  XO_MOVmi = XO_(c7),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:252:15: error: Signed integer overflow for expression '0x0000fe+(0xc6<<24)'. [integerOverflow]
  XO_MOVmib = XO_(c6),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:252:15: error: Signed integer overflow for expression '0xc6<<24'. [integerOverflow]
  XO_MOVmib = XO_(c6),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:253:12: error: Signed integer overflow for expression '0x0000fe+(0x8d<<24)'. [integerOverflow]
  XO_LEA = XO_(8d),
           ^
src/3rdparty/luajit/src/lj_target_x86.h:253:12: error: Signed integer overflow for expression '0x8d<<24'. [integerOverflow]
  XO_LEA = XO_(8d),
           ^
src/3rdparty/luajit/src/lj_target_x86.h:254:16: error: Signed integer overflow for expression '0x0000fe+(0x80<<24)'. [integerOverflow]
  XO_ARITHib = XO_(80),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:254:16: error: Signed integer overflow for expression '0x80<<24'. [integerOverflow]
  XO_ARITHib = XO_(80),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:255:15: error: Signed integer overflow for expression '0x0000fe+(0x81<<24)'. [integerOverflow]
  XO_ARITHi = XO_(81),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:255:15: error: Signed integer overflow for expression '0x81<<24'. [integerOverflow]
  XO_ARITHi = XO_(81),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:256:16: error: Signed integer overflow for expression '0x0000fe+(0x83<<24)'. [integerOverflow]
  XO_ARITHi8 = XO_(83),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:256:16: error: Signed integer overflow for expression '0x83<<24'. [integerOverflow]
  XO_ARITHi8 = XO_(83),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:257:17: error: Signed integer overflow for expression '0x6600fd+(0x83<<24)'. [integerOverflow]
  XO_ARITHiw8 = XO_66(83),
                ^
src/3rdparty/luajit/src/lj_target_x86.h:257:17: error: Signed integer overflow for expression '0x83<<24'. [integerOverflow]
  XO_ARITHiw8 = XO_66(83),
                ^
src/3rdparty/luajit/src/lj_target_x86.h:258:15: error: Signed integer overflow for expression '0x0000fe+(0xc1<<24)'. [integerOverflow]
  XO_SHIFTi = XO_(c1),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:258:15: error: Signed integer overflow for expression '0xc1<<24'. [integerOverflow]
  XO_SHIFTi = XO_(c1),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:259:15: error: Signed integer overflow for expression '0x0000fe+(0xd1<<24)'. [integerOverflow]
  XO_SHIFT1 = XO_(d1),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:259:15: error: Signed integer overflow for expression '0xd1<<24'. [integerOverflow]
  XO_SHIFT1 = XO_(d1),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:260:16: error: Signed integer overflow for expression '0x0000fe+(0xd3<<24)'. [integerOverflow]
  XO_SHIFTcl = XO_(d3),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:260:16: error: Signed integer overflow for expression '0xd3<<24'. [integerOverflow]
  XO_SHIFTcl = XO_(d3),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:261:13: error: Signed integer overflow for expression '0x0f00fd+(0xaf<<24)'. [integerOverflow]
  XO_IMUL = XO_0f(af),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:261:13: error: Signed integer overflow for expression '0xaf<<24'. [integerOverflow]
  XO_IMUL = XO_0f(af),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:265:14: error: Signed integer overflow for expression '0x0000fe+(0x84<<24)'. [integerOverflow]
  XO_TESTb = XO_(84),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:265:14: error: Signed integer overflow for expression '0x84<<24'. [integerOverflow]
  XO_TESTb = XO_(84),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:266:13: error: Signed integer overflow for expression '0x0000fe+(0x85<<24)'. [integerOverflow]
  XO_TEST = XO_(85),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:266:13: error: Signed integer overflow for expression '0x85<<24'. [integerOverflow]
  XO_TEST = XO_(85),
            ^
src/3rdparty/luajit/src/lj_target_x86.h:267:16: error: Signed integer overflow for expression '0x0000fe+(0xf6<<24)'. [integerOverflow]
  XO_GROUP3b = XO_(f6),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:267:16: error: Signed integer overflow for expression '0xf6<<24'. [integerOverflow]
  XO_GROUP3b = XO_(f6),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:268:15: error: Signed integer overflow for expression '0x0000fe+(0xf7<<24)'. [integerOverflow]
  XO_GROUP3 = XO_(f7),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:268:15: error: Signed integer overflow for expression '0xf7<<24'. [integerOverflow]
  XO_GROUP3 = XO_(f7),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:269:16: error: Signed integer overflow for expression '0x0000fe+(0xfe<<24)'. [integerOverflow]
  XO_GROUP5b = XO_(fe),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:269:16: error: Signed integer overflow for expression '0xfe<<24'. [integerOverflow]
  XO_GROUP5b = XO_(fe),
               ^
src/3rdparty/luajit/src/lj_target_x86.h:270:15: error: Signed integer overflow for expression '0x0000fe+(0xff<<24)'. [integerOverflow]
  XO_GROUP5 = XO_(ff),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:270:15: error: Signed integer overflow for expression '0xff<<24'. [integerOverflow]
  XO_GROUP5 = XO_(ff),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:271:15: error: Signed integer overflow for expression '0x0f00fd+(0xb6<<24)'. [integerOverflow]
  XO_MOVZXb = XO_0f(b6),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:271:15: error: Signed integer overflow for expression '0xb6<<24'. [integerOverflow]
  XO_MOVZXb = XO_0f(b6),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:272:15: error: Signed integer overflow for expression '0x0f00fd+(0xb7<<24)'. [integerOverflow]
  XO_MOVZXw = XO_0f(b7),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:272:15: error: Signed integer overflow for expression '0xb7<<24'. [integerOverflow]
  XO_MOVZXw = XO_0f(b7),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:273:15: error: Signed integer overflow for expression '0x0f00fd+(0xbe<<24)'. [integerOverflow]
  XO_MOVSXb = XO_0f(be),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:273:15: error: Signed integer overflow for expression '0xbe<<24'. [integerOverflow]
  XO_MOVSXb = XO_0f(be),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:274:15: error: Signed integer overflow for expression '0x0f00fd+(0xbf<<24)'. [integerOverflow]
  XO_MOVSXw = XO_0f(bf),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:274:15: error: Signed integer overflow for expression '0xbf<<24'. [integerOverflow]
  XO_MOVSXw = XO_0f(bf),
              ^
src/3rdparty/luajit/src/lj_target_x86.h:276:14: error: Signed integer overflow for expression '0x0f00fd+(0xc8<<24)'. [integerOverflow]
  XO_BSWAP = XO_0f(c8),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:276:14: error: Signed integer overflow for expression '0xc8<<24'. [integerOverflow]
  XO_BSWAP = XO_0f(c8),
             ^
src/3rdparty/luajit/src/lj_target_x86.h:306:13: error: Signed integer overflow for expression '0x0000fe+(0xd9<<24)'. [integerOverflow]
  XO_FLDd = XO_(d9), XOg_FLDd = 0,
            ^
src/3rdparty/luajit/src/lj_target_x86.h:306:13: error: Signed integer overflow for expression '0xd9<<24'. [integerOverflow]
  XO_FLDd = XO_(d9), XOg_FLDd = 0,
            ^
src/3rdparty/luajit/src/lj_target_x86.h:307:13: error: Signed integer overflow for expression '0x0000fe+(0xdd<<24)'. [integerOverflow]
  XO_FLDq = XO_(dd), XOg_FLDq = 0,
            ^
src/3rdparty/luajit/src/lj_target_x86.h:307:13: error: Signed integer overflow for expression '0xdd<<24'. [integerOverflow]
  XO_FLDq = XO_(dd), XOg_FLDq = 0,
            ^
src/3rdparty/luajit/src/lj_target_x86.h:308:14: error: Signed integer overflow for expression '0x0000fe+(0xdb<<24)'. [integerOverflow]
  XO_FILDd = XO_(db), XOg_FILDd = 0,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:308:14: error: Signed integer overflow for expression '0xdb<<24'. [integerOverflow]
  XO_FILDd = XO_(db), XOg_FILDd = 0,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:309:14: error: Signed integer overflow for expression '0x0000fe+(0xdf<<24)'. [integerOverflow]
  XO_FILDq = XO_(df), XOg_FILDq = 5,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:309:14: error: Signed integer overflow for expression '0xdf<<24'. [integerOverflow]
  XO_FILDq = XO_(df), XOg_FILDq = 5,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:310:14: error: Signed integer overflow for expression '0x0000fe+(0xd9<<24)'. [integerOverflow]
  XO_FSTPd = XO_(d9), XOg_FSTPd = 3,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:310:14: error: Signed integer overflow for expression '0xd9<<24'. [integerOverflow]
  XO_FSTPd = XO_(d9), XOg_FSTPd = 3,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:311:14: error: Signed integer overflow for expression '0x0000fe+(0xdd<<24)'. [integerOverflow]
  XO_FSTPq = XO_(dd), XOg_FSTPq = 3,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:311:14: error: Signed integer overflow for expression '0xdd<<24'. [integerOverflow]
  XO_FSTPq = XO_(dd), XOg_FSTPq = 3,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:312:15: error: Signed integer overflow for expression '0x0000fe+(0xdf<<24)'. [integerOverflow]
  XO_FISTPq = XO_(df), XOg_FISTPq = 7,
              ^
src/3rdparty/luajit/src/lj_target_x86.h:312:15: error: Signed integer overflow for expression '0xdf<<24'. [integerOverflow]
  XO_FISTPq = XO_(df), XOg_FISTPq = 7,
              ^
src/3rdparty/luajit/src/lj_target_x86.h:313:16: error: Signed integer overflow for expression '0x0000fe+(0xdd<<24)'. [integerOverflow]
  XO_FISTTPq = XO_(dd), XOg_FISTTPq = 1,
               ^
src/3rdparty/luajit/src/lj_target_x86.h:313:16: error: Signed integer overflow for expression '0xdd<<24'. [integerOverflow]
  XO_FISTTPq = XO_(dd), XOg_FISTTPq = 1,
               ^
src/3rdparty/luajit/src/lj_target_x86.h:314:14: error: Signed integer overflow for expression '0x0000fe+(0xdc<<24)'. [integerOverflow]
  XO_FADDq = XO_(dc), XOg_FADDq = 0,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:314:14: error: Signed integer overflow for expression '0xdc<<24'. [integerOverflow]
  XO_FADDq = XO_(dc), XOg_FADDq = 0,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:315:14: error: Signed integer overflow for expression '0x0000fe+(0xd9<<24)'. [integerOverflow]
  XO_FLDCW = XO_(d9), XOg_FLDCW = 5,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:315:14: error: Signed integer overflow for expression '0xd9<<24'. [integerOverflow]
  XO_FLDCW = XO_(d9), XOg_FLDCW = 5,
             ^
src/3rdparty/luajit/src/lj_target_x86.h:316:15: error: Signed integer overflow for expression '0x0000fe+(0xd9<<24)'. [integerOverflow]
  XO_FNSTCW = XO_(d9), XOg_FNSTCW = 7
              ^
src/3rdparty/luajit/src/lj_target_x86.h:316:15: error: Signed integer overflow for expression '0xd9<<24'. [integerOverflow]
  XO_FNSTCW = XO_(d9), XOg_FNSTCW = 7
              ^
src/3rdparty/luajit/src/lib_math.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 90 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_os.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_os.c:152:22: warning: Either the condition 'u8_var' is redundant or there is possible null pointer dereference: u8_var. [nullPointerRedundantCheck]
  lua_pushstring(L, *u8_var?u8_var:NULL);  /* if NULL push nil */
                     ^
src/3rdparty/luajit/src/lib_os.c:153:7: note: Assuming that condition 'u8_var' is not redundant
  if (u8_var)
      ^
src/3rdparty/luajit/src/lib_os.c:152:22: note: Null pointer dereference
  lua_pushstring(L, *u8_var?u8_var:NULL);  /* if NULL push nil */
                     ^
src/3rdparty/luajit/src/lib_package.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_package.c:377:7: style: Condition 'wfname' is always false [knownConditionTrueFalse]
  if (wfname)
      ^
src/3rdparty/luajit/src/lib_package.c:360:21: note: Assignment 'wfname=NULL', assigned value is 0
  wchar_t *wfname = NULL;
                    ^
src/3rdparty/luajit/src/lib_package.c:377:7: note: Condition 'wfname' is always false
  if (wfname)
      ^
src/3rdparty/luajit/src/lib_string.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 92 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lib_string.c:307:14: warning: Either the condition 'level>=32' is redundant or the array 'ms->capture[32]' is accessed at index 32, which is out of bounds. [arrayIndexOutOfBoundsCond]
  ms->capture[level].init = s;
             ^
src/3rdparty/luajit/src/lib_string.c:306:13: note: Assuming that condition 'level>=32' is not redundant
  if (level >= LUA_MAXCAPTURES) lj_err_caller(ms->L, LJ_ERR_STRCAPN);
            ^
src/3rdparty/luajit/src/lib_string.c:307:14: note: Array index out of bounds
  ms->capture[level].init = s;
             ^
src/3rdparty/luajit/src/lib_string.c:308:14: warning: Either the condition 'level>=32' is redundant or the array 'ms->capture[32]' is accessed at index 32, which is out of bounds. [arrayIndexOutOfBoundsCond]
  ms->capture[level].len = what;
             ^
src/3rdparty/luajit/src/lib_string.c:306:13: note: Assuming that condition 'level>=32' is not redundant
  if (level >= LUA_MAXCAPTURES) lj_err_caller(ms->L, LJ_ERR_STRCAPN);
            ^
src/3rdparty/luajit/src/lib_string.c:308:14: note: Array index out of bounds
  ms->capture[level].len = what;
             ^
src/3rdparty/luajit/src/lib_table.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_buf.h:195:24: warning: Either the condition '!sbx' is redundant or there is possible null pointer dereference: sb. [nullPointerRedundantCheck]
  return lj_str_new(L, sb->b, sbuflen(sb));
                       ^
src/3rdparty/luajit/src/lib_table.c:161:7: note: Assuming that condition '!sbx' is not redundant
  if (LJ_UNLIKELY(!sbx)) {  /* Error: bad element type. */
      ^
src/3rdparty/luajit/src/lib_table.c:167:38: note: Calling function 'lj_buf_str', 2nd argument 'sbx' value is 0
  setstrV(L, L->top-1, lj_buf_str(L, sbx));
                                     ^
src/3rdparty/luajit/src/lj_buf.h:195:24: note: Null pointer dereference
  return lj_str_new(L, sb->b, sbuflen(sb));
                       ^
src/3rdparty/luajit/src/lj_alloc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 96 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_alloc.c:886:39: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
                                      ^
src/3rdparty/luajit/src/lj_alloc.c:952:41: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
                                        ^
src/3rdparty/luajit/src/lj_alloc.c:996:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
                      ^
src/3rdparty/luajit/src/lj_alloc.c:1060:60: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      if (!cinuse(p) && (char *)p + psize >= base + size - TOP_FOOT_SIZE) {
                                                           ^
src/3rdparty/luajit/src/lj_alloc.c:1091:12: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
           ^
src/3rdparty/luajit/src/lj_alloc.c:1245:62: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
                                                             ^
src/3rdparty/luajit/src/lj_api.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 99 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_api.c:252:52: style:inconclusive: Function 'lua_typename' argument 2 names different: declaration 'tp' definition 't'. [funcArgNamesDifferent]
LUA_API const char *lua_typename(lua_State *L, int t)
                                                   ^
src/3rdparty/luajit/src/lua.h:141:59: note: Function 'lua_typename' argument 2 names different: declaration 'tp' definition 't'.
LUA_API const char     *(lua_typename) (lua_State *L, int tp);
                                                          ^
src/3rdparty/luajit/src/lj_api.c:252:52: note: Function 'lua_typename' argument 2 names different: declaration 'tp' definition 't'.
LUA_API const char *lua_typename(lua_State *L, int t)
                                                   ^
src/3rdparty/luajit/src/lj_api.c:358:62: style:inconclusive: Function 'lua_tonumberx' argument 3 names different: declaration 'isnum' definition 'ok'. [funcArgNamesDifferent]
LUA_API lua_Number lua_tonumberx(lua_State *L, int idx, int *ok)
                                                             ^
src/3rdparty/luajit/src/lua.h:353:63: note: Function 'lua_tonumberx' argument 3 names different: declaration 'isnum' definition 'ok'.
LUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *isnum);
                                                              ^
src/3rdparty/luajit/src/lj_api.c:358:62: note: Function 'lua_tonumberx' argument 3 names different: declaration 'isnum' definition 'ok'.
LUA_API lua_Number lua_tonumberx(lua_State *L, int idx, int *ok)
                                                             ^
src/3rdparty/luajit/src/lj_api.c:421:64: style:inconclusive: Function 'lua_tointegerx' argument 3 names different: declaration 'isnum' definition 'ok'. [funcArgNamesDifferent]
LUA_API lua_Integer lua_tointegerx(lua_State *L, int idx, int *ok)
                                                               ^
src/3rdparty/luajit/src/lua.h:354:65: note: Function 'lua_tointegerx' argument 3 names different: declaration 'isnum' definition 'ok'.
LUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *isnum);
                                                                ^
src/3rdparty/luajit/src/lj_api.c:421:64: note: Function 'lua_tointegerx' argument 3 names different: declaration 'isnum' definition 'ok'.
LUA_API lua_Integer lua_tointegerx(lua_State *L, int idx, int *ok)
                                                               ^
src/3rdparty/luajit/src/lj_api.c:759:52: style:inconclusive: Function 'lua_newuserdata' argument 2 names different: declaration 'sz' definition 'size'. [funcArgNamesDifferent]
LUA_API void *lua_newuserdata(lua_State *L, size_t size)
                                                   ^
src/3rdparty/luajit/src/lua.h:183:55: note: Function 'lua_newuserdata' argument 2 names different: declaration 'sz' definition 'size'.
LUA_API void *(lua_newuserdata) (lua_State *L, size_t sz);
                                                      ^
src/3rdparty/luajit/src/lj_api.c:759:52: note: Function 'lua_newuserdata' argument 2 names different: declaration 'sz' definition 'size'.
LUA_API void *lua_newuserdata(lua_State *L, size_t size)
                                                   ^
src/3rdparty/luajit/src/lj_api.c:907:54: style:inconclusive: Function 'lua_getupvalue' argument 2 names different: declaration 'funcindex' definition 'idx'. [funcArgNamesDifferent]
LUA_API const char *lua_getupvalue(lua_State *L, int idx, int n)
                                                     ^
src/3rdparty/luajit/src/lua.h:339:55: note: Function 'lua_getupvalue' argument 2 names different: declaration 'funcindex' definition 'idx'.
LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n);
                                                      ^
src/3rdparty/luajit/src/lj_api.c:907:54: note: Function 'lua_getupvalue' argument 2 names different: declaration 'funcindex' definition 'idx'.
LUA_API const char *lua_getupvalue(lua_State *L, int idx, int n)
                                                     ^
src/3rdparty/luajit/src/lj_api.c:1091:54: style:inconclusive: Function 'lua_setupvalue' argument 2 names different: declaration 'funcindex' definition 'idx'. [funcArgNamesDifferent]
LUA_API const char *lua_setupvalue(lua_State *L, int idx, int n)
                                                     ^
src/3rdparty/luajit/src/lua.h:340:55: note: Function 'lua_setupvalue' argument 2 names different: declaration 'funcindex' definition 'idx'.
LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n);
                                                      ^
src/3rdparty/luajit/src/lj_api.c:1091:54: note: Function 'lua_setupvalue' argument 2 names different: declaration 'funcindex' definition 'idx'.
LUA_API const char *lua_setupvalue(lua_State *L, int idx, int n)
                                                     ^
src/3rdparty/luajit/src/lj_asm.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 135 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_asm_x86.h:700:34: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    irt_isnum(ir->t) ? XOg_FSTPq : XOg_FSTPd, RID_ESP, ofs);
                                 ^
src/3rdparty/luajit/src/lj_asm_x86.h:873:59: style: Same value in both branches of ternary operator. [duplicateValueTernary]
        dest|((LJ_64 && (st64 || st == IRT_U32)) ? REX_64 : 0), left);
                                                          ^
src/3rdparty/luajit/src/lj_asm_x86.h:907:52: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   (irt_is64(ir->t) || irt_isu32(ir->t))) ? REX_64 : 0),
                                                   ^
src/3rdparty/luajit/src/lj_asm_x86.h:978:35: style: Same value in both branches of ternary operator. [duplicateValueTernary]
     irt_isnum(ir->t) ? XOg_FSTPq : XOg_FSTPd, RID_ESP, ofs);
                                  ^
src/3rdparty/luajit/src/lj_asm_x86.h:1040:29: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    st == IRT_NUM ? XOg_FLDq: XOg_FLDd,
                            ^
src/3rdparty/luajit/src/lj_assert.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 86 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_bc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_bcread.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 90 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_bcwrite.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 98 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_bcwrite.c:302:7: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
    p = lj_strfmt_wuleb128(q, n);  /* Fill in final size. */
      ^
src/3rdparty/luajit/src/lj_buf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_buf.c:112:65: style:inconclusive: Function 'lj_bufx_set' argument 4 names different: declaration 'o' definition 'ref'. [funcArgNamesDifferent]
void lj_bufx_set(SBufExt *sbx, const char *p, MSize len, GCobj *ref)
                                                                ^
src/3rdparty/luajit/src/lj_buf.h:155:73: note: Function 'lj_bufx_set' argument 4 names different: declaration 'o' definition 'ref'.
LJ_FUNC void lj_bufx_set(SBufExt *sbx, const char *p, MSize len, GCobj *o);
                                                                        ^
src/3rdparty/luajit/src/lj_buf.c:112:65: note: Function 'lj_bufx_set' argument 4 names different: declaration 'o' definition 'ref'.
void lj_bufx_set(SBufExt *sbx, const char *p, MSize len, GCobj *ref)
                                                                ^
src/3rdparty/luajit/src/lj_carith.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_carith.c:301:15: style: Same expression on both sides of '-'. [duplicateExpression]
  case IR_BSHL-IR_BSHL: x = lj_carith_shl64(x, sh); break;
              ^
src/3rdparty/luajit/src/lj_carith.c:358:33: style:inconclusive: Function 'lj_carith_mul64' argument 1 names different: declaration 'x' definition 'a'. [funcArgNamesDifferent]
int64_t lj_carith_mul64(int64_t a, int64_t b)
                                ^
src/3rdparty/luajit/src/lj_carith.h:26:41: note: Function 'lj_carith_mul64' argument 1 names different: declaration 'x' definition 'a'.
LJ_FUNC int64_t lj_carith_mul64(int64_t x, int64_t k);
                                        ^
src/3rdparty/luajit/src/lj_carith.c:358:33: note: Function 'lj_carith_mul64' argument 1 names different: declaration 'x' definition 'a'.
int64_t lj_carith_mul64(int64_t a, int64_t b)
                                ^
src/3rdparty/luajit/src/lj_carith.c:358:44: style:inconclusive: Function 'lj_carith_mul64' argument 2 names different: declaration 'k' definition 'b'. [funcArgNamesDifferent]
int64_t lj_carith_mul64(int64_t a, int64_t b)
                                           ^
src/3rdparty/luajit/src/lj_carith.h:26:52: note: Function 'lj_carith_mul64' argument 2 names different: declaration 'k' definition 'b'.
LJ_FUNC int64_t lj_carith_mul64(int64_t x, int64_t k);
                                                   ^
src/3rdparty/luajit/src/lj_carith.c:358:44: note: Function 'lj_carith_mul64' argument 2 names different: declaration 'k' definition 'b'.
int64_t lj_carith_mul64(int64_t a, int64_t b)
                                           ^
src/3rdparty/luajit/src/lj_ccall.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 117 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_ccall.c:1168:22: style: Condition 'cts->cb.slot!=~0u' is always false [knownConditionTrueFalse]
    if (cts->cb.slot != ~0u) {  /* Blacklist function that called a callback. */
                     ^
src/3rdparty/luajit/src/lj_ccall.c:1166:20: note: Assignment 'cts->cb.slot=~0u', assigned value is 4294967295
    cts->cb.slot = ~0u;
                   ^
src/3rdparty/luajit/src/lj_ccall.c:1168:22: note: Condition 'cts->cb.slot!=~0u' is always false
    if (cts->cb.slot != ~0u) {  /* Blacklist function that called a callback. */
                     ^
src/3rdparty/luajit/src/lj_ccallback.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 126 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_ccallback.c:582:9: warning: Either the condition '!ct' is redundant or there is possible null pointer dereference: ct. [nullPointerRedundantCheck]
  fid = ct->sib;
        ^
src/3rdparty/luajit/src/lj_ccallback.c:566:7: note: Assuming that condition '!ct' is not redundant
  if (!ct)
      ^
src/3rdparty/luajit/src/lj_ccallback.c:582:9: note: Null pointer dereference
  fid = ct->sib;
        ^
src/3rdparty/luajit/src/lj_ccallback.c:704:11: style: The scope of the variable 'fn' can be reduced. [variableScope]
  GCfunc *fn;
          ^
src/3rdparty/luajit/src/lj_ccallback.c:752:7: style: The scope of the variable 'narg' can be reduced. [variableScope]
  int narg = 0;
      ^
src/3rdparty/luajit/src/lj_ccallback.c:575:11: warning: Either the condition '!ct' is redundant or there is possible null pointer dereference: ct. [nullPointerRedundantCheck]
  switch (ctype_cconv(ct->info)) {
          ^
src/3rdparty/luajit/src/lj_ccallback.c:566:7: note: Assuming that condition '!ct' is not redundant
  if (!ct)
      ^
src/3rdparty/luajit/src/lj_ccallback.c:575:11: note: Null pointer dereference
  switch (ctype_cconv(ct->info)) {
          ^
src/3rdparty/luajit/src/lj_cconv.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_cdata.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_cdata.c:20:52: style:inconclusive: Function 'lj_cdata_newref' argument 2 names different: declaration 'pp' definition 'p'. [funcArgNamesDifferent]
GCcdata *lj_cdata_newref(CTState *cts, const void *p, CTypeID id)
                                                   ^
src/3rdparty/luajit/src/lj_cdata.h:61:60: note: Function 'lj_cdata_newref' argument 2 names different: declaration 'pp' definition 'p'.
LJ_FUNC GCcdata *lj_cdata_newref(CTState *cts, const void *pp, CTypeID id);
                                                           ^
src/3rdparty/luajit/src/lj_cdata.c:20:52: note: Function 'lj_cdata_newref' argument 2 names different: declaration 'pp' definition 'p'.
GCcdata *lj_cdata_newref(CTState *cts, const void *p, CTypeID id)
                                                   ^
src/3rdparty/luajit/src/lj_char.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_clib.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 99 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_cparse.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 96 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_cparse.c:209:7: warning: Either the condition '!o' is redundant or there is possible null pointer dereference: o. [nullPointerRedundantCheck]
  if (tvisstr(o)) {
      ^
src/3rdparty/luajit/src/lj_cparse.c:206:7: note: Assuming that condition '!o' is not redundant
  if (!o || o >= cp->L->top)
      ^
src/3rdparty/luajit/src/lj_cparse.c:209:7: note: Null pointer dereference
  if (tvisstr(o)) {
      ^
src/3rdparty/luajit/src/lj_cparse.c:208:16: warning: Either the condition '!o' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  cp->param = o+1;
               ^
src/3rdparty/luajit/src/lj_cparse.c:206:7: note: Assuming that condition '!o' is not redundant
  if (!o || o >= cp->L->top)
      ^
src/3rdparty/luajit/src/lj_cparse.c:208:16: note: Null pointer addition
  cp->param = o+1;
               ^
src/3rdparty/luajit/src/lj_crecord.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 102 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_crecord.c:1272:44: style: Condition 't==IRT_P32' is always false [knownConditionTrueFalse]
    } else if (t == IRT_PTR || (LJ_64 && t == IRT_P32) ||
                                           ^
src/3rdparty/luajit/src/lj_crecord.c:1272:18: note: Assuming that condition 't==IRT_PTR' is not redundant
    } else if (t == IRT_PTR || (LJ_64 && t == IRT_P32) ||
                 ^
src/3rdparty/luajit/src/lj_crecord.c:1272:44: note: Condition 't==IRT_P32' is always false
    } else if (t == IRT_PTR || (LJ_64 && t == IRT_P32) ||
                                           ^
src/3rdparty/luajit/src/lj_crecord.c:740:7: warning: Either the condition '!tv' is redundant or there is possible null pointer dereference: tv. [nullPointerRedundantCheck]
  if (tvisfunc(tv)) {
      ^
src/3rdparty/luajit/src/lj_crecord.c:738:7: note: Assuming that condition '!tv' is not redundant
  if (!tv)
      ^
src/3rdparty/luajit/src/lj_crecord.c:740:7: note: Null pointer dereference
  if (tvisfunc(tv)) {
      ^
src/3rdparty/luajit/src/lj_crecord.c:1848:46: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    if (!(op < IR_BROL ? LJ_TARGET_MASKSHIFT : LJ_TARGET_MASKROT) &&
                                             ^
src/3rdparty/luajit/src/lj_crecord.c:1905:10: style: The scope of the variable 'd' can be reduced. [variableScope]
  CType *d, *ct = lj_ctype_rawref(cts, cdataV(&rd->argv[0])->ctypeid);
         ^
src/3rdparty/luajit/src/lj_ctype.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_debug.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_debug.c:253:57: style:inconclusive: Function 'lj_debug_slotname' argument 2 names different: declaration 'pc' definition 'ip'. [funcArgNamesDifferent]
const char *lj_debug_slotname(GCproto *pt, const BCIns *ip, BCReg slot,
                                                        ^
src/3rdparty/luajit/src/lj_debug.h:34:65: note: Function 'lj_debug_slotname' argument 2 names different: declaration 'pc' definition 'ip'.
LJ_FUNC const char *lj_debug_slotname(GCproto *pt, const BCIns *pc,
                                                                ^
src/3rdparty/luajit/src/lj_debug.c:253:57: note: Function 'lj_debug_slotname' argument 2 names different: declaration 'pc' definition 'ip'.
const char *lj_debug_slotname(GCproto *pt, const BCIns *ip, BCReg slot,
                                                        ^
src/3rdparty/luajit/src/lj_dispatch.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_dispatch.c:534:3: style: Variable '(*(MRef*)(((char*)(cf))+32)).ptr32' is assigned a value that is never used. [unreadVariable]
  setcframe_pc(cf, oldpc);
  ^
src/3rdparty/luajit/src/lj_dispatch.c:534:3: style: Variable '(*(MRef*)(((char*)(cf))+(6*4))).ptr32' is assigned a value that is never used. [unreadVariable]
  setcframe_pc(cf, oldpc);
  ^
src/3rdparty/luajit/src/lj_err.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 122 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_ffrecord.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_ffrecord.c:742:46: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    if (!(op < IR_BROL ? LJ_TARGET_MASKSHIFT : LJ_TARGET_MASKROT) &&
                                             ^
src/3rdparty/luajit/src/lj_ffrecord.c:855:15: style: The scope of the variable 'i' can be reduced. [variableScope]
    ptrdiff_t i, len = end - start;
              ^
src/3rdparty/luajit/src/lj_func.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_func.c:185:56: style:inconclusive: Function 'lj_func_free' argument 2 names different: declaration 'c' definition 'fn'. [funcArgNamesDifferent]
void LJ_FASTCALL lj_func_free(global_State *g, GCfunc *fn)
                                                       ^
src/3rdparty/luajit/src/lj_func.h:22:64: note: Function 'lj_func_free' argument 2 names different: declaration 'c' definition 'fn'.
LJ_FUNC void LJ_FASTCALL lj_func_free(global_State *g, GCfunc *c);
                                                               ^
src/3rdparty/luajit/src/lj_func.c:185:56: note: Function 'lj_func_free' argument 2 names different: declaration 'c' definition 'fn'.
void LJ_FASTCALL lj_func_free(global_State *g, GCfunc *fn)
                                                       ^
src/3rdparty/luajit/src/lj_gc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_gc.c:798:44: style: Condition 'g->gc.state!=GCSpause' is always false [knownConditionTrueFalse]
  do { gc_onestep(L); } while (g->gc.state != GCSpause);
                                           ^
src/3rdparty/luajit/src/lj_gc.c:797:17: note: Assignment 'g->gc.state=GCSpause', assigned value is 0
  g->gc.state = GCSpause;
                ^
src/3rdparty/luajit/src/lj_gc.c:798:44: note: Condition 'g->gc.state!=GCSpause' is always false
  do { gc_onestep(L); } while (g->gc.state != GCSpause);
                                           ^
src/3rdparty/luajit/src/lj_gc.c:891:3: warning: Either the condition 'o==NULL' is redundant or there is possible null pointer dereference: o. [nullPointerRedundantCheck]
  setgcrefr(o->gch.nextgc, g->gc.root);
  ^
src/3rdparty/luajit/src/lj_gc.c:886:9: note: Assuming that condition 'o==NULL' is not redundant
  if (o == NULL)
        ^
src/3rdparty/luajit/src/lj_gc.c:891:3: note: Null pointer dereference
  setgcrefr(o->gch.nextgc, g->gc.root);
  ^
src/3rdparty/luajit/src/lj_gc.c:893:3: warning: Either the condition 'o==NULL' is redundant or there is possible null pointer dereference: (GCobj*)(o). [nullPointerRedundantCheck]
  newwhite(g, o);
  ^
src/3rdparty/luajit/src/lj_gc.c:886:9: note: Assuming that condition 'o==NULL' is not redundant
  if (o == NULL)
        ^
src/3rdparty/luajit/src/lj_gc.c:893:3: note: Null pointer dereference
  newwhite(g, o);
  ^
src/3rdparty/luajit/src/lj_gdbjit.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 110 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_ir.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 95 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_ir.c:229:5: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
  ir[1].tv.u64 = u64;
    ^
src/3rdparty/luajit/src/lj_ir.c:228:8: note: Address of variable taken here.
  ir = IR(ref);
       ^
src/3rdparty/luajit/src/lj_ir.c:229:5: note: The address of local variable 'ir' is accessed at non-zero index.
  ir[1].tv.u64 = u64;
    ^
src/3rdparty/luajit/src/lj_lex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 90 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_lex.c:415:34: warning: Comparison is wrong. Result of 'ls->p+2' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour. [pointerAdditionResultNotNull]
  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
                                 ^
src/3rdparty/luajit/src/lj_lex.c:52:12: style: Condition 'sz!=~(unsigned long)0' is always true [knownConditionTrueFalse]
    if (sz != ~(size_t)0) lj_err_mem(ls->L);
           ^
src/3rdparty/luajit/src/lj_lex.c:51:10: note: Assuming that condition 'sz>=0x7fffff00' is not redundant
  if (sz >= LJ_MAX_BUF) {
         ^
src/3rdparty/luajit/src/lj_lex.c:52:12: note: Condition 'sz!=~(unsigned long)0' is always true
    if (sz != ~(size_t)0) lj_err_mem(ls->L);
           ^
src/3rdparty/luajit/src/lj_lex.c:415:34: style: A pointer can not be negative so it is either pointless or an error to check if it is. [pointerLessThanZero]
  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
                                 ^
src/3rdparty/luajit/src/lj_lex.c:403:18: note: Assignment 'ls->pe=ls->p=NULL', assigned value is 0
  ls->pe = ls->p = NULL;
                 ^
src/3rdparty/luajit/src/lj_lex.c:415:34: note: Pointer less than zero
  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
                                 ^
src/3rdparty/luajit/src/lj_lib.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 100 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_lib.c:71:3: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
  return (const uint8_t *)ls.p;
  ^
src/3rdparty/luajit/src/lj_lib.c:75:23: style:inconclusive: Function 'lj_lib_register' argument 3 names different: declaration 'init' definition 'p'. [funcArgNamesDifferent]
       const uint8_t *p, const lua_CFunction *cf)
                      ^
src/3rdparty/luajit/src/lj_lib.h:94:24: note: Function 'lj_lib_register' argument 3 names different: declaration 'init' definition 'p'.
        const uint8_t *init, const lua_CFunction *cf);
                       ^
src/3rdparty/luajit/src/lj_lib.c:75:23: note: Function 'lj_lib_register' argument 3 names different: declaration 'init' definition 'p'.
       const uint8_t *p, const lua_CFunction *cf)
                      ^
src/3rdparty/luajit/src/lj_load.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_load.c:48:62: style:inconclusive: Function 'lua_loadx' argument 3 names different: declaration 'dt' definition 'data'. [funcArgNamesDifferent]
LUA_API int lua_loadx(lua_State *L, lua_Reader reader, void *data,
                                                             ^
src/3rdparty/luajit/src/lua.h:349:63: note: Function 'lua_loadx' argument 3 names different: declaration 'dt' definition 'data'.
LUA_API int lua_loadx (lua_State *L, lua_Reader reader, void *dt,
                                                              ^
src/3rdparty/luajit/src/lj_load.c:48:62: note: Function 'lua_loadx' argument 3 names different: declaration 'dt' definition 'data'.
LUA_API int lua_loadx(lua_State *L, lua_Reader reader, void *data,
                                                             ^
src/3rdparty/luajit/src/lj_mcode.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 111 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_mcode.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/luajit/src/lj_meta.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 92 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_obj.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_opt_dce.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 89 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_opt_fold.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 98 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_opt_fold.c:231:16: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
    double a = ir_knum(IR(fleft->op1))->n;
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:231:16: note: Address of variable taken here.
    double a = ir_knum(IR(fleft->op1))->n;
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:231:16: note: The address of local variable 'ir' is accessed at non-zero index.
    double a = ir_knum(IR(fleft->op1))->n;
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:232:16: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
    double b = ir_knum(IR(fleft->op2))->n;
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:232:16: note: Address of variable taken here.
    double b = ir_knum(IR(fleft->op2))->n;
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:232:16: note: The address of local variable 'ir' is accessed at non-zero index.
    double b = ir_knum(IR(fleft->op2))->n;
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:1696:38: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
    uint64_t k = kfold_int64arith(J, ir_k64(irk)->u64, fright->i,
                                     ^
src/3rdparty/luajit/src/lj_opt_fold.c:1686:16: note: Address of variable taken here.
  IRIns *irk = IR(fleft->op2);
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:1687:3: note: Assuming condition is false
  PHIBARRIER(fleft);
  ^
src/3rdparty/luajit/src/lj_opt_fold.c:1696:38: note: The address of local variable 'ir' is accessed at non-zero index.
    uint64_t k = kfold_int64arith(J, ir_k64(irk)->u64, fright->i,
                                     ^
src/3rdparty/luajit/src/lj_opt_fold.c:1745:38: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
    uint64_t k = kfold_int64arith(J, ir_k64(irk)->u64, ir_k64(fright)->u64,
                                     ^
src/3rdparty/luajit/src/lj_opt_fold.c:1742:16: note: Address of variable taken here.
  IRIns *irk = IR(fleft->op2);
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:1743:3: note: Assuming condition is false
  PHIBARRIER(fleft);
  ^
src/3rdparty/luajit/src/lj_opt_fold.c:1745:38: note: The address of local variable 'ir' is accessed at non-zero index.
    uint64_t k = kfold_int64arith(J, ir_k64(irk)->u64, ir_k64(fright)->u64,
                                     ^
src/3rdparty/luajit/src/lj_opt_fold.c:1792:38: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
    uint64_t k = kfold_int64arith(J, ir_k64(irk)->u64, ir_k64(fright)->u64,
                                     ^
src/3rdparty/luajit/src/lj_opt_fold.c:1790:16: note: Address of variable taken here.
  IRIns *irk = IR(fleft->op2);
               ^
src/3rdparty/luajit/src/lj_opt_fold.c:1792:38: note: The address of local variable 'ir' is accessed at non-zero index.
    uint64_t k = kfold_int64arith(J, ir_k64(irk)->u64, ir_k64(fright)->u64,
                                     ^
src/3rdparty/luajit/src/lj_opt_fold.c:2507:31: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
      fleft[1] = IR(fins->op1)[1];
                              ^
src/3rdparty/luajit/src/lj_opt_fold.c:2507:18: note: Address of variable taken here.
      fleft[1] = IR(fins->op1)[1];
                 ^
src/3rdparty/luajit/src/lj_opt_fold.c:2507:31: note: The address of local variable 'ir' is accessed at non-zero index.
      fleft[1] = IR(fins->op1)[1];
                              ^
src/3rdparty/luajit/src/lj_opt_fold.c:2513:32: error: The address of local variable 'ir' is accessed at non-zero index. [objectIndex]
      fright[1] = IR(fins->op2)[1];
                               ^
src/3rdparty/luajit/src/lj_opt_fold.c:2513:19: note: Address of variable taken here.
      fright[1] = IR(fins->op2)[1];
                  ^
src/3rdparty/luajit/src/lj_opt_fold.c:2513:32: note: The address of local variable 'ir' is accessed at non-zero index.
      fright[1] = IR(fins->op2)[1];
                               ^
src/3rdparty/luajit/src/lj_opt_fold.c:1640:48: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  if ((fins->o < IR_BROL ? LJ_TARGET_MASKSHIFT : LJ_TARGET_MASKROT) &&
                                               ^
src/3rdparty/luajit/src/lj_opt_loop.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 96 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_opt_mem.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 91 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_opt_narrow.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_opt_narrow.c:452:57: style:inconclusive: Function 'lj_opt_narrow_index' argument 2 names different: declaration 'key' definition 'tr'. [funcArgNamesDifferent]
TRef LJ_FASTCALL lj_opt_narrow_index(jit_State *J, TRef tr)
                                                        ^
src/3rdparty/luajit/src/lj_iropt.h:138:65: note: Function 'lj_opt_narrow_index' argument 2 names different: declaration 'key' definition 'tr'.
LJ_FUNC TRef LJ_FASTCALL lj_opt_narrow_index(jit_State *J, TRef key);
                                                                ^
src/3rdparty/luajit/src/lj_opt_narrow.c:452:57: note: Function 'lj_opt_narrow_index' argument 2 names different: declaration 'key' definition 'tr'.
TRef LJ_FASTCALL lj_opt_narrow_index(jit_State *J, TRef tr)
                                                        ^
src/3rdparty/luajit/src/lj_opt_narrow.c:500:58: style:inconclusive: Function 'lj_opt_narrow_cindex' argument 2 names different: declaration 'key' definition 'tr'. [funcArgNamesDifferent]
TRef LJ_FASTCALL lj_opt_narrow_cindex(jit_State *J, TRef tr)
                                                         ^
src/3rdparty/luajit/src/lj_iropt.h:142:66: note: Function 'lj_opt_narrow_cindex' argument 2 names different: declaration 'key' definition 'tr'.
LJ_FUNC TRef LJ_FASTCALL lj_opt_narrow_cindex(jit_State *J, TRef key);
                                                                 ^
src/3rdparty/luajit/src/lj_opt_narrow.c:500:58: note: Function 'lj_opt_narrow_cindex' argument 2 names different: declaration 'key' definition 'tr'.
TRef LJ_FASTCALL lj_opt_narrow_cindex(jit_State *J, TRef tr)
                                                         ^
src/3rdparty/luajit/src/lj_opt_narrow.c:598:50: style:inconclusive: Function 'lj_opt_narrow_forl' argument 2 names different: declaration 'forbase' definition 'tv'. [funcArgNamesDifferent]
IRType lj_opt_narrow_forl(jit_State *J, cTValue *tv)
                                                 ^
src/3rdparty/luajit/src/lj_iropt.h:148:58: note: Function 'lj_opt_narrow_forl' argument 2 names different: declaration 'forbase' definition 'tv'.
LJ_FUNC IRType lj_opt_narrow_forl(jit_State *J, cTValue *forbase);
                                                         ^
src/3rdparty/luajit/src/lj_opt_narrow.c:598:50: note: Function 'lj_opt_narrow_forl' argument 2 names different: declaration 'forbase' definition 'tv'.
IRType lj_opt_narrow_forl(jit_State *J, cTValue *tv)
                                                 ^
src/3rdparty/luajit/src/lj_opt_sink.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 95 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_opt_split.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_parse.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_parse.c:239:63: style:inconclusive: Function 'lj_parse_keepstr' argument 3 names different: declaration 'l' definition 'len'. [funcArgNamesDifferent]
GCstr *lj_parse_keepstr(LexState *ls, const char *str, size_t len)
                                                              ^
src/3rdparty/luajit/src/lj_parse.h:13:71: note: Function 'lj_parse_keepstr' argument 3 names different: declaration 'l' definition 'len'.
LJ_FUNC GCstr *lj_parse_keepstr(LexState *ls, const char *str, size_t l);
                                                                      ^
src/3rdparty/luajit/src/lj_parse.c:239:63: note: Function 'lj_parse_keepstr' argument 3 names different: declaration 'l' definition 'len'.
GCstr *lj_parse_keepstr(LexState *ls, const char *str, size_t len)
                                                              ^
src/3rdparty/luajit/src/lj_prng.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 96 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_prng.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/luajit/src/lj_profile.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_record.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_record.c:2141:61: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
      rec_comp_fixup(J, pc, (!tvistruecond(&J2G(J)->tmptv2) ^ (bc_op(*pc)&1)));
                                                            ^
src/3rdparty/luajit/src/lj_record.c:483:7: style: Condition 'tc' is always false [knownConditionTrueFalse]
  if (tc) {
      ^
src/3rdparty/luajit/src/lj_record.c:481:47: note: Assignment 'tc=(0&&!(scev->start&&(scev->stop<REF_BIAS)&&(scev->step<REF_BIAS)&&(0&&((&tv[FORL_IDX])->it)==(~13u))==(t==IRT_INT)))?0x04:0', assigned value is 0
   tvisint(&tv[FORL_IDX]) == (t == IRT_INT))) ?
                                              ^
src/3rdparty/luajit/src/lj_record.c:483:7: note: Condition 'tc' is always false
  if (tc) {
      ^
src/3rdparty/luajit/src/lj_serialize.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 96 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_serialize.c:431:12: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (sz == 16) {  /* Fix non-canonical NaNs. */
           ^
src/3rdparty/luajit/src/lj_serialize.c:428:12: note: First condition
    if (sz == 16)
           ^
src/3rdparty/luajit/src/lj_serialize.c:431:12: note: Second condition
    if (sz == 16) {  /* Fix non-canonical NaNs. */
           ^
src/3rdparty/luajit/src/lj_snap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 107 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_snap.c:647:26: style: Condition 't==IRT_I64' is always true [knownConditionTrueFalse]
    val = lj_ir_k64(J, t == IRT_I64 ? IR_KINT64 : IR_KNUM, k);
                         ^
src/3rdparty/luajit/src/lj_snap.c:640:14: note: Assignment 't=IRT_I64', assigned value is 21
  IRType t = IRT_I64;
             ^
src/3rdparty/luajit/src/lj_snap.c:647:26: note: Condition 't==IRT_I64' is always true
    val = lj_ir_k64(J, t == IRT_I64 ? IR_KINT64 : IR_KNUM, k);
                         ^
src/3rdparty/luajit/src/lj_snap.c:878:15: style: The scope of the variable 'val' can be reduced. [variableScope]
 TValue tmp, *val;
              ^
src/3rdparty/luajit/src/lj_state.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 100 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_state.c:198:57: style:inconclusive: Function 'lua_newstate' argument 2 names different: declaration 'ud' definition 'allocd'. [funcArgNamesDifferent]
LUA_API lua_State *lua_newstate(lua_Alloc allocf, void *allocd)
                                                        ^
src/3rdparty/luajit/src/lua.h:111:55: note: Function 'lua_newstate' argument 2 names different: declaration 'ud' definition 'allocd'.
LUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);
                                                      ^
src/3rdparty/luajit/src/lj_state.c:198:57: note: Function 'lua_newstate' argument 2 names different: declaration 'ud' definition 'allocd'.
LUA_API lua_State *lua_newstate(lua_Alloc allocf, void *allocd)
                                                        ^
src/3rdparty/luajit/src/lj_str.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_str.c:42:52: style:inconclusive: Function 'lj_str_find' argument 2 names different: declaration 'f' definition 'p'. [funcArgNamesDifferent]
const char *lj_str_find(const char *s, const char *p, MSize slen, MSize plen)
                                                   ^
src/3rdparty/luajit/src/lj_str.h:15:60: note: Function 'lj_str_find' argument 2 names different: declaration 'f' definition 'p'.
LJ_FUNC const char *lj_str_find(const char *s, const char *f,
                                                           ^
src/3rdparty/luajit/src/lj_str.c:42:52: note: Function 'lj_str_find' argument 2 names different: declaration 'f' definition 'p'.
const char *lj_str_find(const char *s, const char *p, MSize slen, MSize plen)
                                                   ^
src/3rdparty/luajit/src/lj_str.c:42:73: style:inconclusive: Function 'lj_str_find' argument 4 names different: declaration 'flen' definition 'plen'. [funcArgNamesDifferent]
const char *lj_str_find(const char *s, const char *p, MSize slen, MSize plen)
                                                                        ^
src/3rdparty/luajit/src/lj_str.h:16:23: note: Function 'lj_str_find' argument 4 names different: declaration 'flen' definition 'plen'.
    MSize slen, MSize flen);
                      ^
src/3rdparty/luajit/src/lj_str.c:42:73: note: Function 'lj_str_find' argument 4 names different: declaration 'flen' definition 'plen'.
const char *lj_str_find(const char *s, const char *p, MSize slen, MSize plen)
                                                                        ^
src/3rdparty/luajit/src/lj_str.c:314:57: style:inconclusive: Function 'lj_str_new' argument 3 names different: declaration 'len' definition 'lenx'. [funcArgNamesDifferent]
GCstr *lj_str_new(lua_State *L, const char *str, size_t lenx)
                                                        ^
src/3rdparty/luajit/src/lj_str.h:21:66: note: Function 'lj_str_new' argument 3 names different: declaration 'len' definition 'lenx'.
LJ_FUNCA GCstr *lj_str_new(lua_State *L, const char *str, size_t len);
                                                                 ^
src/3rdparty/luajit/src/lj_str.c:314:57: note: Function 'lj_str_new' argument 3 names different: declaration 'len' definition 'lenx'.
GCstr *lj_str_new(lua_State *L, const char *str, size_t lenx)
                                                        ^
src/3rdparty/luajit/src/lj_str.c:103:15: warning:inconclusive: Found calculation inside sizeof(). [sizeofCalculation]
  StrHash b = lj_bswap(lj_rol(h ^ (StrHash)(seed >> 32), 4));
              ^
src/3rdparty/luajit/src/lj_strfmt.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_strfmt.c:246:44: style:inconclusive: Function 'lj_strfmt_putfchar' argument 2 names different: declaration '__int32' definition 'sf'. [funcArgNamesDifferent]
SBuf *lj_strfmt_putfchar(SBuf *sb, SFormat sf, int32_t c)
                                           ^
src/3rdparty/luajit/src/lj_strfmt.h:107:0: note: Function 'lj_strfmt_putfchar' argument 2 names different: declaration '__int32' definition 'sf'.
LJ_FUNC SBuf *lj_strfmt_putfchar(SBuf *sb, SFormat, int32_t c);
^
src/3rdparty/luajit/src/lj_strfmt.c:246:44: note: Function 'lj_strfmt_putfchar' argument 2 names different: declaration '__int32' definition 'sf'.
SBuf *lj_strfmt_putfchar(SBuf *sb, SFormat sf, int32_t c)
                                           ^
src/3rdparty/luajit/src/lj_strfmt.c:246:56: style:inconclusive: Function 'lj_strfmt_putfchar' argument 3 names different: declaration '__int32' definition 'c'. [funcArgNamesDifferent]
SBuf *lj_strfmt_putfchar(SBuf *sb, SFormat sf, int32_t c)
                                                       ^
src/3rdparty/luajit/src/lj_strfmt.h:107:53: note: Function 'lj_strfmt_putfchar' argument 3 names different: declaration '__int32' definition 'c'.
LJ_FUNC SBuf *lj_strfmt_putfchar(SBuf *sb, SFormat, int32_t c);
                                                    ^
src/3rdparty/luajit/src/lj_strfmt.c:246:56: note: Function 'lj_strfmt_putfchar' argument 3 names different: declaration '__int32' definition 'c'.
SBuf *lj_strfmt_putfchar(SBuf *sb, SFormat sf, int32_t c)
                                                       ^
src/3rdparty/luajit/src/lj_strfmt.c:272:43: style:inconclusive: Function 'lj_strfmt_putfstr' argument 2 names different: declaration '__int32' definition 'sf'. [funcArgNamesDifferent]
SBuf *lj_strfmt_putfstr(SBuf *sb, SFormat sf, GCstr *str)
                                          ^
src/3rdparty/luajit/src/lj_strfmt.h:109:0: note: Function 'lj_strfmt_putfstr' argument 2 names different: declaration '__int32' definition 'sf'.
LJ_FUNC SBuf *lj_strfmt_putfstr(SBuf *sb, SFormat, GCstr *str);
^
src/3rdparty/luajit/src/lj_strfmt.c:272:43: note: Function 'lj_strfmt_putfstr' argument 2 names different: declaration '__int32' definition 'sf'.
SBuf *lj_strfmt_putfstr(SBuf *sb, SFormat sf, GCstr *str)
                                          ^
src/3rdparty/luajit/src/lj_strfmt_num.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 86 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_strfmt_num.c:577:43: style:inconclusive: Function 'lj_strfmt_putfnum' argument 2 names different: declaration '__int32' definition 'sf'. [funcArgNamesDifferent]
SBuf *lj_strfmt_putfnum(SBuf *sb, SFormat sf, lua_Number n)
                                          ^
src/3rdparty/luajit/src/lj_strfmt.h:106:0: note: Function 'lj_strfmt_putfnum' argument 2 names different: declaration '__int32' definition 'sf'.
LJ_FUNC SBuf *lj_strfmt_putfnum(SBuf *sb, SFormat, lua_Number n);
^
src/3rdparty/luajit/src/lj_strfmt_num.c:577:43: note: Function 'lj_strfmt_putfnum' argument 2 names different: declaration '__int32' definition 'sf'.
SBuf *lj_strfmt_putfnum(SBuf *sb, SFormat sf, lua_Number n)
                                          ^
src/3rdparty/luajit/src/lj_strscan.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 87 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_strscan.c:271:49: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    else if (idig < -326/2) { o->n = neg ? -0.0 : 0.0; return fmt; }
                                                ^
src/3rdparty/luajit/src/lj_tab.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 92 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_trace.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 115 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_udata.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 90 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_vmevent.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 92 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_vmmath.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 89 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/lj_vmmath.c:53:15: style: Same expression on both sides of '-'. [duplicateExpression]
  case IR_ADD - IR_ADD: return x+y; break;
              ^
src/3rdparty/luajit/src/lj_vmmath.c:97:36: style:inconclusive: Function 'lj_vm_foldfpm' argument 2 names different: declaration 'op' definition 'fpm'. [funcArgNamesDifferent]
double lj_vm_foldfpm(double x, int fpm)
                                   ^
src/3rdparty/luajit/src/lj_vm.h:42:44: note: Function 'lj_vm_foldfpm' argument 2 names different: declaration 'op' definition 'fpm'.
LJ_ASMF double lj_vm_foldfpm(double x, int op);
                                           ^
src/3rdparty/luajit/src/lj_vmmath.c:97:36: note: Function 'lj_vm_foldfpm' argument 2 names different: declaration 'op' definition 'fpm'.
double lj_vm_foldfpm(double x, int fpm)
                                   ^
src/3rdparty/luajit/src/ljamalg.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 209 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/luajit/src/ljamalg.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/luajit/src/luajit.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 72 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_byte_order.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_byte_order.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_chartables.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_chartables.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_compile.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 38 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_compile.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_config.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_config.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_dfa_exec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_dfa_exec.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_exec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_exec.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_fullinfo.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_fullinfo.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_get.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_get.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_globals.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_globals.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_jit_compile.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 71 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_jit_compile.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_maketables.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_newline.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_newline.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_ord2utf8.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_ord2utf8.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_refcount.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_refcount.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_string_utils.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_string_utils.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_study.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_study.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_tables.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_ucd.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_ucd.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_valid_utf8.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_valid_utf8.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_version.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_version.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/pcre/src/pcre_xclass.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/pcre/src/pcre_xclass.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/3rdparty/qrencode/src/bitstream.c:132:6: style: The scope of the variable 'ret' can be reduced. [variableScope]
 int ret;
     ^
src/3rdparty/qrencode/src/bitstream.c:154:6: style: The scope of the variable 'ret' can be reduced. [variableScope]
 int ret;
     ^
src/3rdparty/qrencode/src/bitstream.c:170:6: style: The scope of the variable 'ret' can be reduced. [variableScope]
 int ret;
     ^
src/3rdparty/qrencode/src/mask.c:327:6: style: The scope of the variable 'blacks' can be reduced. [variableScope]
 int blacks;
     ^
src/3rdparty/qrencode/src/mask.c:328:6: style: The scope of the variable 'bratio' can be reduced. [variableScope]
 int bratio;
     ^
src/3rdparty/qrencode/src/mask.c:329:6: style: The scope of the variable 'demerit' can be reduced. [variableScope]
 int demerit;
     ^
src/3rdparty/qrencode/src/mmask.c:153:6: style: The scope of the variable 'score' can be reduced. [variableScope]
 int score;
     ^
src/3rdparty/qrencode/src/qrencode.c:482:14: style:inconclusive: Boolean expression '(bit&code)!=0' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
   *p = 0x02 | ((bit & code) != 0);
             ^
src/3rdparty/qrencode/src/qrencode.c:576:14: style:inconclusive: Boolean expression '(bit&code)!=0' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
   *p = 0x02 | ((bit & code) != 0);
             ^
src/3rdparty/qrencode/src/qrencode.c:357:25: style: The scope of the variable 'p' can be reduced. [variableScope]
 unsigned char *frame, *p;
                        ^
src/3rdparty/qrencode/src/qrencode.c:382:25: style: The scope of the variable 'p' can be reduced. [variableScope]
 unsigned char *frame, *p;
                        ^
src/3rdparty/qrencode/src/qrinput.c:331:23: style: The scope of the variable 'e' can be reduced. [variableScope]
 QRinput_List *list, *e;
                      ^
src/3rdparty/qrencode/src/qrinput.c:630:15: style: The scope of the variable 'val' can be reduced. [variableScope]
 unsigned int val;
              ^
src/3rdparty/qrencode/src/qrinput.c:658:15: style: The scope of the variable 'val' can be reduced. [variableScope]
 unsigned int val, h;
              ^
src/3rdparty/qrencode/src/qrinput.c:658:20: style: The scope of the variable 'h' can be reduced. [variableScope]
 unsigned int val, h;
                   ^
src/3rdparty/qrencode/src/qrinput.c:862:6: style: The scope of the variable 'num' can be reduced. [variableScope]
 int num;
     ^
src/3rdparty/qrencode/src/qrinput.c:938:6: style: The scope of the variable 'bits' can be reduced. [variableScope]
 int bits;
     ^
src/3rdparty/qrencode/src/qrinput.c:1087:6: style: The scope of the variable 'bits' can be reduced. [variableScope]
 int bits, total = 0;
     ^
src/3rdparty/qrencode/src/qrinput.c:1114:6: style: The scope of the variable 'bits' can be reduced. [variableScope]
 int bits;
     ^
src/3rdparty/qrencode/src/qrinput.c:1149:38: style: The scope of the variable 'i' can be reduced. [variableScope]
 int bits, maxbits, words, maxwords, i, ret;
                                     ^
src/3rdparty/qrencode/src/qrinput.c:1198:38: style: The scope of the variable 'i' can be reduced. [variableScope]
 int bits, maxbits, words, maxwords, i, ret, termbits;
                                     ^
src/3rdparty/qrencode/src/qrinput.c:248:90: style:inconclusive: Function 'QRinput_insertStructuredAppendHeader' argument 3 names different: declaration 'index' definition 'number'. [funcArgNamesDifferent]
STATIC_IN_RELEASE int QRinput_insertStructuredAppendHeader(QRinput *input, int size, int number, unsigned char parity)
                                                                                         ^
src/3rdparty/qrencode/src/qrinput.h:121:79: note: Function 'QRinput_insertStructuredAppendHeader' argument 3 names different: declaration 'index' definition 'number'.
extern int QRinput_insertStructuredAppendHeader(QRinput *input, int size, int index, unsigned char parity);
                                                                              ^
src/3rdparty/qrencode/src/qrinput.c:248:90: note: Function 'QRinput_insertStructuredAppendHeader' argument 3 names different: declaration 'index' definition 'number'.
STATIC_IN_RELEASE int QRinput_insertStructuredAppendHeader(QRinput *input, int size, int number, unsigned char parity)
                                                                                         ^
src/3rdparty/qrencode/src/qrspec.c:111:6: style: The scope of the variable 'words' can be reduced. [variableScope]
 int words;
     ^
src/3rdparty/qrencode/src/qrspec.c:431:15: style: The scope of the variable 'verinfo' can be reduced. [variableScope]
 unsigned int verinfo, v;
              ^
src/3rdparty/qrencode/src/qrspec.c:431:24: style: The scope of the variable 'v' can be reduced. [variableScope]
 unsigned int verinfo, v;
                       ^
src/3rdparty/qrencode/src/qrspec.c:320:46: warning: Either the condition 'd<0' is redundant or there is division by zero at line 320. [zerodivcond]
  w = (width - alignmentPattern[version][0]) / d + 2;
                                             ^
src/3rdparty/qrencode/src/qrspec.c:317:7: note: Assuming that condition 'd<0' is not redundant
 if(d < 0) {
      ^
src/3rdparty/qrencode/src/qrspec.c:320:46: note: Division by zero
  w = (width - alignmentPattern[version][0]) / d + 2;
                                             ^
src/3rdparty/qrencode/src/split.c:306:8: style: The scope of the variable 'newstr' can be reduced. [variableScope]
 char *newstr;
       ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:184:3: style:inconclusive: Technically the member function 'BoostRegexSearch::CharTPtr::operatorconstchar*' can be const. [functionConst]
  operator const char*() {
  ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:76:3: style: Class 'Match' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Match(Document* document, Sci::Position position = -1, Sci::Position endPosition = -1) : _document(NULL) { set(document, position, endPosition); }
  ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:180:3: style: Class 'CharTPtr' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CharTPtr(const char* ptr) : _charPtr(ptr), _wcharPtr(NULL) {}
  ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:269:71: style:inconclusive: Function 'FindText' argument 2 names different: declaration 'minPos' definition 'startPosition'. [funcArgNamesDifferent]
Sci::Position BoostRegexSearch::FindText(Document* doc, Sci::Position startPosition, Sci::Position endPosition, const char *regexString,
                                                                      ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:64:62: note: Function 'FindText' argument 2 names different: declaration 'minPos' definition 'startPosition'.
 virtual Sci::Position FindText(Document* doc, Sci::Position minPos, Sci::Position maxPos, const char *regex,
                                                             ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:269:71: note: Function 'FindText' argument 2 names different: declaration 'minPos' definition 'startPosition'.
Sci::Position BoostRegexSearch::FindText(Document* doc, Sci::Position startPosition, Sci::Position endPosition, const char *regexString,
                                                                      ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:269:100: style:inconclusive: Function 'FindText' argument 3 names different: declaration 'maxPos' definition 'endPosition'. [funcArgNamesDifferent]
Sci::Position BoostRegexSearch::FindText(Document* doc, Sci::Position startPosition, Sci::Position endPosition, const char *regexString,
                                                                                                   ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:64:84: note: Function 'FindText' argument 3 names different: declaration 'maxPos' definition 'endPosition'.
 virtual Sci::Position FindText(Document* doc, Sci::Position minPos, Sci::Position maxPos, const char *regex,
                                                                                   ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:269:100: note: Function 'FindText' argument 3 names different: declaration 'maxPos' definition 'endPosition'.
Sci::Position BoostRegexSearch::FindText(Document* doc, Sci::Position startPosition, Sci::Position endPosition, const char *regexString,
                                                                                                   ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:269:125: style:inconclusive: Function 'FindText' argument 4 names different: declaration 'regex' definition 'regexString'. [funcArgNamesDifferent]
Sci::Position BoostRegexSearch::FindText(Document* doc, Sci::Position startPosition, Sci::Position endPosition, const char *regexString,
                                                                                                                            ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:64:104: note: Function 'FindText' argument 4 names different: declaration 'regex' definition 'regexString'.
 virtual Sci::Position FindText(Document* doc, Sci::Position minPos, Sci::Position maxPos, const char *regex,
                                                                                                       ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:269:125: note: Function 'FindText' argument 4 names different: declaration 'regex' definition 'regexString'.
Sci::Position BoostRegexSearch::FindText(Document* doc, Sci::Position startPosition, Sci::Position endPosition, const char *regexString,
                                                                                                                            ^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:409:14: style: Variable 'bestMatch' is assigned a value that is never used. [unreadVariable]
   bestMatch = _match;
             ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:261:13: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
      if (sc.atLineEnd)
            ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:258:11: note: outer condition: sc.atLineEnd
    if (sc.atLineEnd) {
          ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:261:13: note: identical inner condition: sc.atLineEnd
      if (sc.atLineEnd)
            ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:771:20: style: Condition 'szThenlen==5' is always false [knownConditionTrueFalse]
     if (szThenlen == 5) {
                   ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:760:19: note: Assuming that condition 'szThenlen==4' is not redundant
    if (szThenlen == 4) {
                  ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:770:13: note: szThenlen is incremented', new value is 5
     szThen[szThenlen++] = static_cast<char>(tolower(ch));
            ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:771:20: note: Condition 'szThenlen==5' is always false
     if (szThenlen == 5) {
                   ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:451:19: style: Local variable 'lineCurrent' shadows outer variable [shadowVariable]
     Sci_Position lineCurrent = styler.GetLine(sc.currentPos);
                  ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:213:15: note: Shadowed declaration
 Sci_Position lineCurrent = styler.GetLine(startPos);
              ^
src/3rdparty/scintilla/src/lexers/LexAU3.cxx:451:19: note: Shadow variable
     Sci_Position lineCurrent = styler.GetLine(sc.currentPos);
                  ^
src/3rdparty/scintilla/src/lexers/LexAsm.cxx:88:3: performance: Variable 'delimiter' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  delimiter = "";
  ^
src/3rdparty/scintilla/src/lexers/LexAsm.cxx:93:3: performance: Variable 'foldExplicitStart' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitStart = "";
  ^
src/3rdparty/scintilla/src/lexers/LexAsm.cxx:94:3: performance: Variable 'foldExplicitEnd' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitEnd   = "";
  ^
src/3rdparty/scintilla/src/lexers/LexAsm.cxx:97:3: performance: Variable 'commentChar' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  commentChar = "";
  ^
src/3rdparty/scintilla/src/lexers/LexBaan.cxx:746:20: style: Variable 'currLineStyle' is assigned a value that is never used. [unreadVariable]
 int currLineStyle = 0;
                   ^
src/3rdparty/scintilla/src/lexers/LexBaan.cxx:747:20: style: Variable 'nextLineStyle' is assigned a value that is never used. [unreadVariable]
 int nextLineStyle = 0;
                   ^
src/3rdparty/scintilla/src/lexers/LexBaan.cxx:771:12: style: Variable 'style' is assigned a value that is never used. [unreadVariable]
 int style = initStyle;
           ^
src/3rdparty/scintilla/src/lexers/LexBash.cxx:377:3: warning: Member variable 'QuoteStackCls::CountStack' is not initialized in the constructor. [uninitMemberVar]
  QuoteStackCls() {
  ^
src/3rdparty/scintilla/src/lexers/LexBash.cxx:377:3: warning: Member variable 'QuoteStackCls::UpStack' is not initialized in the constructor. [uninitMemberVar]
  QuoteStackCls() {
  ^
src/3rdparty/scintilla/src/lexers/LexBash.cxx:377:3: warning: Member variable 'QuoteStackCls::StyleStack' is not initialized in the constructor. [uninitMemberVar]
  QuoteStackCls() {
  ^
src/3rdparty/scintilla/src/lexers/LexBash.cxx:923:10: style: The scope of the variable 's' can be reduced. [variableScope]
    char s[10];
         ^
src/3rdparty/scintilla/src/lexers/LexBash.cxx:924:10: style: The scope of the variable 'isCmdDelim' can be reduced. [variableScope]
    bool isCmdDelim = false;
         ^
src/3rdparty/scintilla/src/lexers/LexBasic.cxx:173:3: performance: Variable 'foldExplicitStart' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitStart = "";
  ^
src/3rdparty/scintilla/src/lexers/LexBasic.cxx:174:3: performance: Variable 'foldExplicitEnd' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitEnd   = "";
  ^
src/3rdparty/scintilla/src/lexers/LexBasic.cxx:205:2: style: Struct 'OptionSetBasic' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OptionSetBasic(const char * const wordListDescriptions[]) {
 ^
src/3rdparty/scintilla/src/lexers/LexCLW.cxx:146:40: style: Parameter 'styler' can be declared with const [constParameter]
inline bool GetNextWordUpper(Accessor &styler, Sci_PositionU uiStartPos, Sci_Position iLength, char *cWord) {
                                       ^
src/3rdparty/scintilla/src/lexers/LexCPP.cxx:365:3: performance: Variable 'foldExplicitStart' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitStart = "";
  ^
src/3rdparty/scintilla/src/lexers/LexCPP.cxx:366:3: performance: Variable 'foldExplicitEnd' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitEnd = "";
  ^
src/3rdparty/scintilla/src/lexers/LexCPP.cxx:57:66: style: Parameter 'styler' can be declared with const [constParameter]
bool FollowsPostfixOperator(const StyleContext &sc, LexAccessor &styler) {
                                                                 ^
src/3rdparty/scintilla/src/lexers/LexCPP.cxx:100:0: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (!IsSpaceOrTab(ch))
^
src/3rdparty/scintilla/src/lexers/LexCSS.cxx:64:6: style: The scope of the variable 'ch' can be reduced. [variableScope]
 int ch;
     ^
src/3rdparty/scintilla/src/lexers/LexCSS.cxx:387:9: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int ch;
        ^
src/3rdparty/scintilla/src/lexers/LexCmake.cxx:311:82: style: Condition 'cCurrChar!='}'' is always true [knownConditionTrueFalse]
            else if ( !isCmakeChar( cCurrChar ) && cCurrChar != '{' && cCurrChar != '}' ) {
                                                                                 ^
src/3rdparty/scintilla/src/lexers/LexCmake.cxx:306:109: note: Assuming that condition 'cCurrChar=='}'' is not redundant
            else if ( (isCmakeChar(cCurrChar) && !isCmakeChar( cNextChar) && cNextChar != '}') || cCurrChar == '}' ) {
                                                                                                            ^
src/3rdparty/scintilla/src/lexers/LexCmake.cxx:311:82: note: Condition 'cCurrChar!='}'' is always true
            else if ( !isCmakeChar( cCurrChar ) && cCurrChar != '{' && cCurrChar != '}' ) {
                                                                                 ^
src/3rdparty/scintilla/src/lexers/LexCmake.cxx:179:10: style: The scope of the variable 'cCurrChar' can be reduced. [variableScope]
    char cCurrChar;
         ^
src/3rdparty/scintilla/src/lexers/LexD.cxx:95:3: performance: Variable 'foldExplicitStart' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitStart = "";
  ^
src/3rdparty/scintilla/src/lexers/LexD.cxx:96:3: performance: Variable 'foldExplicitEnd' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitEnd   = "";
  ^
src/3rdparty/scintilla/src/lexers/LexD.cxx:162:2: style: Class 'LexerD' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LexerD(bool caseSensitive_) :
 ^
src/3rdparty/scintilla/src/lexers/LexDataflex.cxx:131:12: style: The scope of the variable 'scopeOpen' can be reduced. [variableScope]
 WordList& scopeOpen   = *keywordlists[1];
           ^
src/3rdparty/scintilla/src/lexers/LexDataflex.cxx:132:12: style: The scope of the variable 'scopeClosed' can be reduced. [variableScope]
 WordList& scopeClosed = *keywordlists[2];
           ^
src/3rdparty/scintilla/src/lexers/LexDataflex.cxx:133:12: style: The scope of the variable 'operators' can be reduced. [variableScope]
 WordList& operators   = *keywordlists[3];
           ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:432:7: style: Condition 'foldComment' is always true [knownConditionTrueFalse]
  if (foldComment && IsStreamCommentStyle(style)) {
      ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:410:21: note: Assignment 'foldComment=true', assigned value is 1
 bool foldComment = true;
                    ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:432:7: note: Condition 'foldComment' is always true
  if (foldComment && IsStreamCommentStyle(style)) {
      ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:440:7: style: Condition 'foldComment' is always true [knownConditionTrueFalse]
  if (foldComment && (style == SCE_ECL_COMMENTLINE)) {
      ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:410:21: note: Assignment 'foldComment=true', assigned value is 1
 bool foldComment = true;
                    ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:440:7: note: Condition 'foldComment' is always true
  if (foldComment && (style == SCE_ECL_COMMENTLINE)) {
      ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:450:7: style: Condition 'foldPreprocessor' is always true [knownConditionTrueFalse]
  if (foldPreprocessor && (style == SCE_ECL_PREPROCESSOR)) {
      ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:411:26: note: Assignment 'foldPreprocessor=true', assigned value is 1
 bool foldPreprocessor = true;
                         ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:450:7: note: Condition 'foldPreprocessor' is always true
  if (foldPreprocessor && (style == SCE_ECL_PREPROCESSOR)) {
      ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:486:8: style: Condition 'foldAtElse' is always true [knownConditionTrueFalse]
   if (foldAtElse) {
       ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:413:20: note: Assignment 'foldAtElse=true', assigned value is 1
 bool foldAtElse = true;
                   ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:486:8: note: Condition 'foldAtElse' is always true
   if (foldAtElse) {
       ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:490:29: style: Condition 'foldCompact' is always true [knownConditionTrueFalse]
   if (visibleChars == 0 && foldCompact)
                            ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:412:21: note: Assignment 'foldCompact=true', assigned value is 1
 bool foldCompact = true;
                    ^
src/3rdparty/scintilla/src/lexers/LexECL.cxx:490:29: note: Condition 'foldCompact' is always true
   if (visibleChars == 0 && foldCompact)
                            ^
src/3rdparty/scintilla/src/lexers/LexEScript.cxx:206:7: style: Condition 'foldComment' is always true [knownConditionTrueFalse]
  if (foldComment && IsStreamCommentStyle(style)) {
      ^
src/3rdparty/scintilla/src/lexers/LexEScript.cxx:184:28: note: Assignment 'foldComment=true', assigned value is 1
        bool foldComment = true;
                           ^
src/3rdparty/scintilla/src/lexers/LexEScript.cxx:206:7: note: Condition 'foldComment' is always true
  if (foldComment && IsStreamCommentStyle(style)) {
      ^
src/3rdparty/scintilla/src/lexers/LexEScript.cxx:215:7: style: Condition 'foldComment' is always true [knownConditionTrueFalse]
  if (foldComment && (style == SCE_ESCRIPT_COMMENTLINE)) {
      ^
src/3rdparty/scintilla/src/lexers/LexEScript.cxx:184:28: note: Assignment 'foldComment=true', assigned value is 1
        bool foldComment = true;
                           ^
src/3rdparty/scintilla/src/lexers/LexEScript.cxx:215:7: note: Condition 'foldComment' is always true
  if (foldComment && (style == SCE_ESCRIPT_COMMENTLINE)) {
      ^
src/3rdparty/scintilla/src/lexers/LexEiffel.cxx:122:39: style: Parameter 'styler' can be declared with const. However it seems that 'IsEiffelComment' is a callback function, if 'styler' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static bool IsEiffelComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                                      ^
src/3rdparty/scintilla/src/lexers/LexEiffel.cxx:155:75: note: You might need to cast the function pointer here
     int indentNext2 = styler.IndentAmount(lineCurrent + 2, &spaceFlags2, IsEiffelComment);
                                                                          ^
src/3rdparty/scintilla/src/lexers/LexEiffel.cxx:122:39: note: Parameter 'styler' can be declared with const
static bool IsEiffelComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                                      ^
src/3rdparty/scintilla/src/lexers/LexErlang.cxx:542:6: style: The scope of the variable 'stylePrev' can be reduced. [variableScope]
 int stylePrev;
     ^
src/3rdparty/scintilla/src/lexers/LexErlang.cxx:544:7: style: The scope of the variable 'ch' can be reduced. [variableScope]
 char ch;
      ^
src/3rdparty/scintilla/src/lexers/LexErlang.cxx:546:7: style: The scope of the variable 'atEOL' can be reduced. [variableScope]
 bool atEOL;
      ^
src/3rdparty/scintilla/src/lexers/LexFSharp.cxx:108:3: performance: Variable 'startPos' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  startPos = ZERO_LENGTH;
  ^
src/3rdparty/scintilla/src/lexers/LexFSharp.cxx:187:17: style:inconclusive: Technically the member function '::UnicodeChar::AtEnd' can be const. [functionConst]
 constexpr bool AtEnd() noexcept {
                ^
src/3rdparty/scintilla/src/lexers/LexFSharp.cxx:255:23: style: Redundant condition: cxt.chPrev=='"'. 'A || (!A && B)' is equivalent to 'A || B' [redundantCondition]
   (cxt.chPrev != '"' || (cxt.chPrev == '"' &&
                      ^
src/3rdparty/scintilla/src/lexers/LexFortran.cxx:261:71: style: Parameter 'nComCur' can be declared with const [constParameter]
      Sci_Position nComColB[], Sci_Position nComColF[], Sci_Position &nComCur,
                                                                      ^
src/3rdparty/scintilla/src/lexers/LexFortran.cxx:262:47: style: Parameter 'comLineCur' can be declared with const [constParameter]
      bool comLineB[], bool comLineF[], bool &comLineCur,
                                              ^
src/3rdparty/scintilla/src/lexers/LexFortran.cxx:344:47: style: Parameter 'comLineCur' can be declared with const [constParameter]
      bool comLineB[], bool comLineF[], bool &comLineCur) {
                                              ^
src/3rdparty/scintilla/src/lexers/LexGDScript.cxx:49:28: style: Parameter 'styler' can be declared with const. However it seems that 'IsGDComment' is a callback function, if 'styler' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
bool IsGDComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                           ^
src/3rdparty/scintilla/src/lexers/LexGDScript.cxx:527:50: note: You might need to cast the function pointer here
   styler.IndentAmount(lineCurrent, &spaceFlags, IsGDComment);
                                                 ^
src/3rdparty/scintilla/src/lexers/LexGDScript.cxx:49:28: note: Parameter 'styler' can be declared with const
bool IsGDComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                           ^
src/3rdparty/scintilla/src/lexers/LexGui4Cli.cxx:132:7: style: The scope of the variable 'noforward' can be reduced. [variableScope]
 bool noforward;
      ^
src/3rdparty/scintilla/src/lexers/LexHTML.cxx:549:14: style:inconclusive: Technically the member function '::PhpNumberState::isInvalid' can be const. [functionConst]
 inline bool isInvalid() { return invalid; }
             ^
src/3rdparty/scintilla/src/lexers/LexHTML.cxx:550:14: style:inconclusive: Technically the member function '::PhpNumberState::isFinished' can be const. [functionConst]
 inline bool isFinished() { return finished; }
             ^
src/3rdparty/scintilla/src/lexers/LexHTML.cxx:733:2: style: Struct 'OptionSetHTML' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OptionSetHTML(bool isPHPScript_) {
 ^
src/3rdparty/scintilla/src/lexers/LexHTML.cxx:420:94: style: Parameter 'styler' can be declared with const [constParameter]
bool isWordHSGML(Sci_PositionU start, Sci_PositionU end, const WordList &keywords, Accessor &styler) {
                                                                                             ^
src/3rdparty/scintilla/src/lexers/LexHTML.cxx:428:68: style: Parameter 'styler' can be declared with const [constParameter]
bool isWordCdata(Sci_PositionU start, Sci_PositionU end, Accessor &styler) {
                                                                   ^
src/3rdparty/scintilla/src/lexers/LexHaskell.cxx:395:4: style: Class 'LexerHaskell' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
   LexerHaskell(bool literate_)
   ^
src/3rdparty/scintilla/src/lexers/LexHaskell.cxx:322:7: style: Struct 'HaskellLineInfo' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      HaskellLineInfo(int state) :
      ^
src/3rdparty/scintilla/src/lexers/LexHollywood.cxx:244:2: style: Struct 'OptionSetHollywood' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OptionSetHollywood(const char * const wordListDescriptions[]) {
 ^
src/3rdparty/scintilla/src/lexers/LexInno.cxx:37:7: style: The scope of the variable 'ch' can be reduced. [variableScope]
 char ch;
      ^
src/3rdparty/scintilla/src/lexers/LexInno.cxx:55:7: style: The scope of the variable 'chPrev' can be reduced. [variableScope]
 char chPrev;
      ^
src/3rdparty/scintilla/src/lexers/LexJSON.cxx:57:3: performance: Variable 'setCompactIRI' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  setCompactIRI = CharacterSet(CharacterSet::setAlpha, "$_-");
  ^
src/3rdparty/scintilla/src/lexers/LexJSON.cxx:86:3: performance: Variable 'setHexDigits' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  setHexDigits = CharacterSet(CharacterSet::setDigits, "ABCDEFabcdef");
  ^
src/3rdparty/scintilla/src/lexers/LexJulia.cxx:580:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n = 0;
        ^
src/3rdparty/scintilla/src/lexers/LexJulia.cxx:680:47: style: Parameter 'sc' can be declared with const [constParameter]
static inline bool IsACharacter(StyleContext &sc) {
                                              ^
src/3rdparty/scintilla/src/lexers/LexJulia.cxx:1155:12: style: Variable 'style' is assigned a value that is never used. [unreadVariable]
 int style = initStyle;
           ^
src/3rdparty/scintilla/src/lexers/LexLaTeX.cxx:144:8: style: The scope of the variable 'ch' can be reduced. [variableScope]
  char ch;
       ^
src/3rdparty/scintilla/src/lexers/LexLaTeX.cxx:505:8: style: The scope of the variable 'ch' can be reduced. [variableScope]
  char ch, buf[16];
       ^
src/3rdparty/scintilla/src/lexers/LexLaTeX.cxx:195:41: style: Parameter 'mode' can be declared with const [constParameter]
static inline void latexStateReset(int &mode, int &state) {
                                        ^
src/3rdparty/scintilla/src/lexers/LexMSSQL.cxx:51:15: style: The scope of the variable 'kwGlobalVariables' can be reduced. [variableScope]
    WordList &kwGlobalVariables     = *keywordlists[KW_MSSQL_GLOBAL_VARIABLES];
              ^
src/3rdparty/scintilla/src/lexers/LexMatlab.cxx:433:12: style: Variable 'style' is assigned a value that is never used. [unreadVariable]
 int style = initStyle;
           ^
src/3rdparty/scintilla/src/lexers/LexMetapost.cxx:128:10: style: The scope of the variable 'lineBuffer' can be reduced. [variableScope]
    char lineBuffer[1024] ;
         ^
src/3rdparty/scintilla/src/lexers/LexModula.cxx:258:9: style: The scope of the variable 'clv_new' can be reduced. [variableScope]
    int clv_new;
        ^
src/3rdparty/scintilla/src/lexers/LexModula.cxx:60:51: style: Parameter 'sc' can be declared with const [constParameter]
static inline unsigned IsOperator( StyleContext & sc, WordList & op ) {
                                                  ^
src/3rdparty/scintilla/src/lexers/LexMySQL.cxx:154:24: style: Local variable 'length' shadows outer argument [shadowArgument]
          Sci_Position length = sc.LengthCurrent() + 1;
                       ^
src/3rdparty/scintilla/src/lexers/LexMySQL.cxx:109:68: note: Shadowed declaration
static void ColouriseMySQLDoc(Sci_PositionU startPos, Sci_Position length, int initStyle, WordList *keywordlists[],
                                                                   ^
src/3rdparty/scintilla/src/lexers/LexMySQL.cxx:154:24: note: Shadow variable
          Sci_Position length = sc.LengthCurrent() + 1;
                       ^
src/3rdparty/scintilla/src/lexers/LexNimrod.cxx:187:8: style: The scope of the variable 'ch' can be reduced. [variableScope]
  char ch;
       ^
src/3rdparty/scintilla/src/lexers/LexNsis.cxx:455:72: style: Condition 'cCurrChar!='}'' is always true [knownConditionTrueFalse]
    else if( !isNsisChar( cCurrChar ) && cCurrChar != '{' && cCurrChar != '}' )
                                                                       ^
src/3rdparty/scintilla/src/lexers/LexNsis.cxx:449:98: note: Assuming that condition 'cCurrChar=='}'' is not redundant
    else if( (isNsisChar(cCurrChar) && !isNsisChar( cNextChar) && cNextChar != '}') || cCurrChar == '}' )
                                                                                                 ^
src/3rdparty/scintilla/src/lexers/LexNsis.cxx:455:72: note: Condition 'cCurrChar!='}'' is always true
    else if( !isNsisChar( cCurrChar ) && cCurrChar != '{' && cCurrChar != '}' )
                                                                       ^
src/3rdparty/scintilla/src/lexers/LexNsis.cxx:296:7: style: The scope of the variable 'cCurrChar' can be reduced. [variableScope]
 char cCurrChar;
      ^
src/3rdparty/scintilla/src/lexers/LexOScript.cxx:126:2: style: Class 'IdentifierClassifier' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 IdentifierClassifier(WordList *keywordlists[]) :
 ^
src/3rdparty/scintilla/src/lexers/LexOScript.cxx:110:43: style: Parameter 'sc' can be declared with const [constParameter]
static bool IsDocCommentEnd(StyleContext &sc) {
                                          ^
src/3rdparty/scintilla/src/lexers/LexOpal.cxx:43:7: style: The scope of the variable 'ch' can be reduced. [variableScope]
 char ch;
      ^
src/3rdparty/scintilla/src/lexers/LexOpal.cxx:256:7: style: The scope of the variable 'ch' can be reduced. [variableScope]
 char ch;
      ^
src/3rdparty/scintilla/src/lexers/LexOpal.cxx:287:7: style: The scope of the variable 'ch' can be reduced. [variableScope]
 char ch;
      ^
src/3rdparty/scintilla/src/lexers/LexOpal.cxx:310:7: style: The scope of the variable 'ch' can be reduced. [variableScope]
 char ch;
      ^
src/3rdparty/scintilla/src/lexers/LexPB.cxx:76:10: style: The scope of the variable 'ch' can be reduced. [variableScope]
    char ch;
         ^
src/3rdparty/scintilla/src/lexers/LexPerl.cxx:557:7: style: Condition '!isVar' is always true [knownConditionTrueFalse]
  if (!isVar && (maxSeg > 1)) { // $- or @-specific variable patterns
      ^
src/3rdparty/scintilla/src/lexers/LexPerl.cxx:520:16: note: Assignment 'isVar=false', assigned value is 0
  bool isVar = false;
               ^
src/3rdparty/scintilla/src/lexers/LexPerl.cxx:557:7: note: Condition '!isVar' is always true
  if (!isVar && (maxSeg > 1)) { // $- or @-specific variable patterns
      ^
src/3rdparty/scintilla/src/lexers/LexPerl.cxx:587:7: style: Condition 'isVar' is always false [knownConditionTrueFalse]
  if (isVar) { // commit as interpolated variable or normal character
      ^
src/3rdparty/scintilla/src/lexers/LexPerl.cxx:520:16: note: Assignment 'isVar=false', assigned value is 0
  bool isVar = false;
               ^
src/3rdparty/scintilla/src/lexers/LexPerl.cxx:587:7: note: Condition 'isVar' is always false
  if (isVar) { // commit as interpolated variable or normal character
      ^
src/3rdparty/scintilla/src/lexers/LexPerl.cxx:94:100: style: Parameter 'styler' can be declared with const [constParameter]
static bool isPerlKeyword(Sci_PositionU start, Sci_PositionU end, WordList &keywords, LexAccessor &styler) {
                                                                                                   ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:122:9: style: Condition 'c>0' is always true [knownConditionTrueFalse]
  if (c > 0 && IsLineEndChar(c))
        ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:120:9: note: Assuming that condition 'c<=0' is not redundant
  if (c <= 0) //reached beginning of document
        ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:122:9: note: Condition 'c>0' is always true
  if (c > 0 && IsLineEndChar(c))
        ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:124:14: style: Condition 'c>0' is always true [knownConditionTrueFalse]
  else if (c > 0 && !IsASpaceOrTab(c))
             ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:120:9: note: Assuming that condition 'c<=0' is not redundant
  if (c <= 0) //reached beginning of document
        ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:124:14: note: Condition 'c>0' is always true
  else if (c > 0 && !IsASpaceOrTab(c))
             ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:515:65: style: Condition 'firstWordLen>0' is always true [knownConditionTrueFalse]
    if ((strcmp(szFirstWord, "function") == 0) || (firstWordLen > 0 && szFirstWord[0] == '@')) {
                                                                ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:499:21: note: Assuming that condition 'firstWordLen>0' is not redundant
   if (firstWordLen > 0
                    ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:515:65: note: Condition 'firstWordLen>0' is always true
    if ((strcmp(szFirstWord, "function") == 0) || (firstWordLen > 0 && szFirstWord[0] == '@')) {
                                                                ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:569:29: style: Condition 'foldCompact' is always true [knownConditionTrueFalse]
   if (visibleChars == 0 && foldCompact)
                            ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:379:21: note: Assignment 'foldCompact=true', assigned value is 1
 bool foldCompact = true;
                    ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:569:29: note: Condition 'foldCompact' is always true
   if (visibleChars == 0 && foldCompact)
                            ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:190:11: style: Local variable 's' shadows outer variable [shadowVariable]
     char s[1000];
          ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:153:8: note: Shadowed declaration
  char s[100];
       ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:190:11: note: Shadow variable
     char s[1000];
          ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:592:23: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (unsigned int i = 0; i < FIRST_WORD_MAX_LEN; i++)
                      ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:431:20: note: Shadowed declaration
 for (Sci_Position i = startPos; i < endPos; i++) {
                   ^
src/3rdparty/scintilla/src/lexers/LexPowerPro.cxx:592:23: note: Shadow variable
    for (unsigned int i = 0; i < FIRST_WORD_MAX_LEN; i++)
                      ^
src/3rdparty/scintilla/src/lexers/LexProgress.cxx:260:12: style: The scope of the variable 'ch' can be reduced. [variableScope]
      char ch;
           ^
src/3rdparty/scintilla/src/lexers/LexProgress.cxx:261:12: style: The scope of the variable 'st' can be reduced. [variableScope]
      char st;
           ^
src/3rdparty/scintilla/src/lexers/LexProgress.cxx:262:12: style: The scope of the variable 'chPrev' can be reduced. [variableScope]
      char chPrev;
           ^
src/3rdparty/scintilla/src/lexers/LexPython.cxx:70:28: style: Parameter 'styler' can be declared with const. However it seems that 'IsPyComment' is a callback function, if 'styler' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
bool IsPyComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                           ^
src/3rdparty/scintilla/src/lexers/LexPython.cxx:862:50: note: You might need to cast the function pointer here
   styler.IndentAmount(lineCurrent, &spaceFlags, IsPyComment);
                                                 ^
src/3rdparty/scintilla/src/lexers/LexPython.cxx:70:28: note: Parameter 'styler' can be declared with const
bool IsPyComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                           ^
src/3rdparty/scintilla/src/lexers/LexRegistry.cxx:159:9: style: Redundant initialization for 'digit'. The initialized value is overwritten before it is read. [redundantInitialization]
  digit = styler.SafeGetCharAt(start+offset);
        ^
src/3rdparty/scintilla/src/lexers/LexRegistry.cxx:145:14: note: digit is initialized
  char digit = '\0';
             ^
src/3rdparty/scintilla/src/lexers/LexRegistry.cxx:159:9: note: digit is overwritten
  digit = styler.SafeGetCharAt(start+offset);
        ^
src/3rdparty/scintilla/src/lexers/LexRuby.cxx:233:39: style: Parameter 'ch' can be declared with const [constParameter]
void redo_char(Sci_Position &i, char &ch, char &chNext, char &chNext2, int &state) noexcept {
                                      ^
src/3rdparty/scintilla/src/lexers/LexRuby.cxx:240:66: style: Parameter 'chNext2' can be declared with const [constParameter]
void advance_char(Sci_Position &i, char &ch, char &chNext, char &chNext2) noexcept {
                                                                 ^
src/3rdparty/scintilla/src/lexers/LexRuby.cxx:456:134: style: Parameter 'styler' can be declared with const [constParameter]
bool haveTargetMatch(Sci_Position currPos, Sci_Position lengthDoc, Sci_Position targetStartPos, Sci_Position targetEndPos, Accessor &styler) {
                                                                                                                                     ^
src/3rdparty/scintilla/src/lexers/LexRust.cxx:66:3: performance: Variable 'foldExplicitStart' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitStart = "";
  ^
src/3rdparty/scintilla/src/lexers/LexRust.cxx:67:3: performance: Variable 'foldExplicitEnd' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  foldExplicitEnd   = "";
  ^
src/3rdparty/scintilla/src/lexers/LexRust.cxx:207:43: style: Parameter 'styler' can be declared with const [constParameter]
static void GrabString(char* s, Accessor& styler, Sci_Position start, Sci_Position len) {
                                          ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:75:14: performance:inconclusive: Technically the member function 'SQLStates::IgnoreWhen' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IgnoreWhen (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:84:14: performance:inconclusive: Technically the member function 'SQLStates::IntoCondition' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoCondition (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:93:14: performance:inconclusive: Technically the member function 'SQLStates::IntoExceptionBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoExceptionBlock (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:102:14: performance:inconclusive: Technically the member function 'SQLStates::IntoDeclareBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoDeclareBlock (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:111:14: performance:inconclusive: Technically the member function 'SQLStates::IntoMergeStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoMergeStatement (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:120:14: performance:inconclusive: Technically the member function 'SQLStates::CaseMergeWithoutWhenFound' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t CaseMergeWithoutWhenFound (sql_state_t sqlStatesLine, bool found) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:128:14: performance:inconclusive: Technically the member function 'SQLStates::IntoSelectStatementOrAssignment' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoSelectStatementOrAssignment (sql_state_t sqlStatesLine, bool found) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:136:14: performance:inconclusive: Technically the member function 'SQLStates::BeginCaseBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t BeginCaseBlock (sql_state_t sqlStatesLine) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:143:14: performance:inconclusive: Technically the member function 'SQLStates::EndCaseBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t EndCaseBlock (sql_state_t sqlStatesLine) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:150:14: performance:inconclusive: Technically the member function 'SQLStates::IntoCreateStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoCreateStatement (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:159:14: performance:inconclusive: Technically the member function 'SQLStates::IntoCreateViewStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoCreateViewStatement (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:168:14: performance:inconclusive: Technically the member function 'SQLStates::IntoCreateViewAsStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 sql_state_t IntoCreateViewAsStatement (sql_state_t sqlStatesLine, bool enable) {
             ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:177:7: performance:inconclusive: Technically the member function 'SQLStates::IsIgnoreWhen' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIgnoreWhen (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:181:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoCondition' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoCondition (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:185:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoCaseBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoCaseBlock (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:189:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoExceptionBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoExceptionBlock (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:192:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoSelectStatementOrAssignment' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoSelectStatementOrAssignment (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:195:7: performance:inconclusive: Technically the member function 'SQLStates::IsCaseMergeWithoutWhenFound' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsCaseMergeWithoutWhenFound (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:199:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoDeclareBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoDeclareBlock (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:203:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoMergeStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoMergeStatement (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:207:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoCreateStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoCreateStatement (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:211:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoCreateViewStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoCreateViewStatement (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexSQL.cxx:215:7: performance:inconclusive: Technically the member function 'SQLStates::IsIntoCreateViewAsStatement' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool IsIntoCreateViewAsStatement (sql_state_t sqlStatesLine) {
      ^
src/3rdparty/scintilla/src/lexers/LexScriptol.cxx:107:11: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
          if (ch == '"') return SCE_SCRIPTOL_STRING;
          ^
src/3rdparty/scintilla/src/lexers/LexScriptol.cxx:108:11: note: Found duplicate branches for 'if' and 'else'.
          else           return SCE_SCRIPTOL_STRING;
          ^
src/3rdparty/scintilla/src/lexers/LexScriptol.cxx:107:11: note: Found duplicate branches for 'if' and 'else'.
          if (ch == '"') return SCE_SCRIPTOL_STRING;
          ^
src/3rdparty/scintilla/src/lexers/LexScriptol.cxx:54:36: style: Parameter 'styler' can be declared with const. However it seems that 'IsSolComment' is a callback function, if 'styler' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static bool IsSolComment(Accessor &styler, Sci_Position pos, Sci_Position len)
                                   ^
src/3rdparty/scintilla/src/lexers/LexScriptol.cxx:368:99: note: You might need to cast the function pointer here
                             int indentNext2 = styler.IndentAmount(lineCurrent + 2, &spaceFlags2, IsSolComment);
                                                                                                  ^
src/3rdparty/scintilla/src/lexers/LexScriptol.cxx:54:36: note: Parameter 'styler' can be declared with const
static bool IsSolComment(Accessor &styler, Sci_Position pos, Sci_Position len)
                                   ^
src/3rdparty/scintilla/src/lexers/LexSpecman.cxx:219:6: style: The scope of the variable 'style' can be reduced. [variableScope]
 int style;
     ^
src/3rdparty/scintilla/src/lexers/LexSpice.cxx:84:16: style: Variable 'number' is assigned a value that is never used. [unreadVariable]
        number += static_cast<char>(sc.ch);
               ^
src/3rdparty/scintilla/src/lexers/LexSpice.cxx:90:16: style: Variable 'number' is assigned a value that is never used. [unreadVariable]
        number += static_cast<char>(sc.ch);
               ^
src/3rdparty/scintilla/src/lexers/LexSpice.cxx:93:20: style: Variable 'number' is assigned a value that is never used. [unreadVariable]
            number += static_cast<char>(sc.ch);
                   ^
src/3rdparty/scintilla/src/lexers/LexTACL.cxx:188:18: style: Condition 'ch=='{'' is always false [knownConditionTrueFalse]
   } else if (ch == '{' && chNext == '*') {
                 ^
src/3rdparty/scintilla/src/lexers/LexTACL.cxx:185:18: note: Assuming that condition 'ch=='{'' is not redundant
   } else if (ch == '{') {
                 ^
src/3rdparty/scintilla/src/lexers/LexTACL.cxx:188:18: note: Condition 'ch=='{'' is always false
   } else if (ch == '{' && chNext == '*') {
                 ^
src/3rdparty/scintilla/src/lexers/LexTACL.cxx:227:20: style: Condition 'ch=='{'' is always false [knownConditionTrueFalse]
     } else if (ch == '{' && chNext == '*') {
                   ^
src/3rdparty/scintilla/src/lexers/LexTACL.cxx:225:13: note: Assuming that condition 'ch=='{'' is not redundant
     if (ch == '{') {
            ^
src/3rdparty/scintilla/src/lexers/LexTACL.cxx:227:20: note: Condition 'ch=='{'' is always false
     } else if (ch == '{' && chNext == '*') {
                   ^
src/3rdparty/scintilla/src/lexers/LexTADS3.cxx:406:64: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
                        endState = lineState&T3_INT_EXPRESSION ?
                                                               ^
src/3rdparty/scintilla/src/lexers/LexTADS3.cxx:544:96: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
                                ColouriseToEndOfLine(sc, sc.state, lineState&T3_INT_EXPRESSION ?
                                                                                               ^
src/3rdparty/scintilla/src/lexers/LexTADS3.cxx:566:87: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
                                ColouriseTADS3Comment(sc, lineState&T3_INT_EXPRESSION ?
                                                                                      ^
src/3rdparty/scintilla/src/lexers/LexTADS3.cxx:126:49: style: Parameter 'sc' can be declared with const [constParameter]
static inline bool IsANumberStart(StyleContext &sc) {
                                                ^
src/3rdparty/scintilla/src/lexers/LexTADS3.cxx:306:59: style: Parameter 'lineState' can be declared with const [constParameter]
static void ColouriseTADS3MsgParam(StyleContext &sc, int &lineState) {
                                                          ^
src/3rdparty/scintilla/src/lexers/LexTADS3.cxx:347:63: style: Parameter 'lineState' can be declared with const [constParameter]
static void ColouriseTADS3LibDirective(StyleContext &sc, int &lineState) {
                                                              ^
src/3rdparty/scintilla/src/lexers/LexTCMD.cxx:242:4: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
   sscanf( wordBuffer, "%[^.<>|&=\\/]", sKeywordBuffer );
   ^
src/3rdparty/scintilla/src/lexers/LexTeX.cxx:131:10: style: The scope of the variable 'lineBuffer' can be reduced. [variableScope]
    char lineBuffer[1024] ;
         ^
src/3rdparty/scintilla/src/lexers/LexVB.cxx:35:35: style: Parameter 'styler' can be declared with const. However it seems that 'IsVBComment' is a callback function, if 'styler' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static bool IsVBComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                                  ^
src/3rdparty/scintilla/src/lexers/LexVB.cxx:291:75: note: You might need to cast the function pointer here
     int indentNext2 = styler.IndentAmount(lineCurrent + 2, &spaceFlags2, IsVBComment);
                                                                          ^
src/3rdparty/scintilla/src/lexers/LexVB.cxx:35:35: note: Parameter 'styler' can be declared with const
static bool IsVBComment(Accessor &styler, Sci_Position pos, Sci_Position len) {
                                  ^
src/3rdparty/scintilla/src/lexers/LexVHDL.cxx:317:9: style: The scope of the variable 'chPrev' can be reduced. [variableScope]
  char  chPrev          = '\0';
        ^
src/3rdparty/scintilla/src/lexers/LexVHDL.cxx:318:9: style: The scope of the variable 'chNextNonBlank' can be reduced. [variableScope]
  char  chNextNonBlank;
        ^
src/3rdparty/scintilla/src/lexers/LexVHDL.cxx:329:19: style: Local variable 'j' shadows outer variable [shadowVariable]
    Sci_PositionU j  = i+1;
                  ^
src/3rdparty/scintilla/src/lexers/LexVHDL.cxx:271:17: note: Shadowed declaration
  Sci_PositionU j;
                ^
src/3rdparty/scintilla/src/lexers/LexVHDL.cxx:329:19: note: Shadow variable
    Sci_PositionU j  = i+1;
                  ^
src/3rdparty/scintilla/src/lexers/LexVHDL.cxx:317:25: style: Variable 'chPrev' is assigned a value that is never used. [unreadVariable]
  char  chPrev          = '\0';
                        ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:946:13: style: The if condition is the same as the previous if condition [duplicateCondition]
  if (style == SCE_V_OPERATOR) {
            ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:915:13: note: First condition
  if (style == SCE_V_OPERATOR) {
            ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:946:13: note: Second condition
  if (style == SCE_V_OPERATOR) {
            ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:916:8: style: Condition 'foldAtParenthese' is always true [knownConditionTrueFalse]
   if (foldAtParenthese) {
       ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:801:27: note: Assignment 'foldAtParenthese=1', assigned value is 1
 bool foldAtParenthese  = 1;
                          ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:916:8: note: Condition 'foldAtParenthese' is always true
   if (foldAtParenthese) {
       ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:947:8: style: Condition 'foldAtBrace' is always true [knownConditionTrueFalse]
   if (foldAtBrace) {
       ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:800:22: note: Assignment 'foldAtBrace=1', assigned value is 1
 bool foldAtBrace  = 1;
                     ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:947:8: note: Condition 'foldAtBrace' is always true
   if (foldAtBrace) {
       ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:50:122: performance: Function parameter 'arguments_' should be passed by const reference. [passedByValue]
 PPDefinition(Sci_Position line_, const std::string &key_, const std::string &value_, bool isUndef_ = false, std::string arguments_="") :
                                                                                                                         ^
src/3rdparty/scintilla/src/lexers/LexVerilog.cxx:378:32: style: Parameter 'p' can be declared with const [constParameter]
 bool operator()(PPDefinition &p) const {
                               ^
src/3rdparty/scintilla/src/lexers/LexVisualProlog.cxx:490:15: style: Variable 'style' is assigned a value that is never used. [unreadVariable]
    int style = initStyle;
              ^
src/3rdparty/scintilla/src/lexers/LexX12.cxx:193:24: style: Variable 'levelCurrentStyle' is assigned a value that is never used. [unreadVariable]
 int levelCurrentStyle = SC_FOLDLEVELBASE;
                       ^
src/3rdparty/scintilla/src/lexlib/CatalogueModules.h:20:39: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
   if (lm->GetLanguage() == language) {
                                      ^
src/3rdparty/scintilla/src/src/AutoComplete.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/AutoComplete.cxx:52:2: performance: Variable 'lb' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 lb = ListBox::Allocate();
 ^
src/3rdparty/scintilla/src/src/Geometry.h:261:12: style: Class 'Stroke' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 constexpr Stroke(ColourRGBA colour_, XYPOSITION width_=1.0) noexcept :
           ^
src/3rdparty/scintilla/src/src/Geometry.h:275:12: style: Class 'Fill' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 constexpr Fill(ColourRGBA colour_) noexcept :
           ^
src/3rdparty/scintilla/src/src/Geometry.h:290:12: style: Class 'FillStroke' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 constexpr FillStroke(ColourRGBA colourBoth, XYPOSITION widthStroke_=1.0) noexcept :
           ^
src/3rdparty/scintilla/src/src/Platform.h:112:12: style: Struct 'FontParameters' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 constexpr FontParameters(
           ^
src/3rdparty/scintilla/src/src/Platform.h:302:2: style: Struct 'ListBoxEvent' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ListBoxEvent(EventType event_) noexcept : event(event_) {
 ^
src/3rdparty/scintilla/src/src/CallTip.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/CallTip.cxx:41:2: performance: Variable 'wCallTip' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 wCallTip = {};
 ^
src/3rdparty/scintilla/src/src/CallTip.cxx:44:2: performance: Variable 'rectUp' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 rectUp = PRectangle(0,0,0,0);
 ^
src/3rdparty/scintilla/src/src/CellBuffer.cxx:615:2: performance: Variable 'utf8LineEnds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 utf8LineEnds = LineEndType::Default;
 ^
src/3rdparty/scintilla/src/src/SparseVector.h:30:3: performance: Variable 'starts' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  starts = Partitioning<Sci::Position>(8);
  ^
src/3rdparty/scintilla/src/src/ChangeHistory.cxx:218:9: style: Consider using std::replace_if algorithm instead of a raw loop. [useStlAlgorithm]
     ed = changeSaved;
        ^
src/3rdparty/scintilla/src/src/ChangeHistory.cxx:376:15: style: Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   editionSet = editionSet | (1u << (ed-1));
              ^
src/3rdparty/scintilla/src/src/Decoration.cxx:145:39: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  if (deco->Indicator() == indicator) {
                                      ^
src/3rdparty/scintilla/src/src/Decoration.cxx:262:18: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
  decorationView.push_back(deco.get());
                 ^
src/3rdparty/scintilla/src/src/Document.cxx:147:2: performance: Variable 'eolMode' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 eolMode = EndOfLine::Lf;
 ^
src/3rdparty/scintilla/src/src/Document.cxx:150:2: performance: Variable 'lineEndBitSet' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 lineEndBitSet = LineEndType::Default;
 ^
src/3rdparty/scintilla/src/src/Document.h:177:7: style:inconclusive: Technically the member function 'Scintilla::Internal::LexerReleaser::operator()' can be const. [functionConst]
 void operator()(Scintilla::ILexer5 *pLexer) noexcept {
      ^
src/3rdparty/scintilla/src/src/Document.h:324:2: style: Class 'Document' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 Document(Scintilla::DocumentOption options);
 ^
src/3rdparty/scintilla/src/src/Document.h:565:2: style: Class 'UndoGroup' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UndoGroup(Document *pdoc_, bool groupNeeded_=true) :
 ^
src/3rdparty/scintilla/src/src/Document.h:608:2: style: Class 'DocModification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DocModification(Scintilla::ModificationFlags modificationType_, Sci::Position position_=0, Sci::Position length_=0,
 ^
src/3rdparty/scintilla/src/src/Document.cxx:145:2: performance: Variable 'eolMode' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 eolMode = EndOfLine::CrLf;
 ^
src/3rdparty/scintilla/src/src/EditModel.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/EditModel.cxx:65:2: performance: Variable 'posDrag' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 posDrag = SelectionPosition(Sci::invalidPosition);
 ^
src/3rdparty/scintilla/src/src/Indicator.h:18:2: style: Struct 'StyleAndColour' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StyleAndColour(Scintilla::IndicatorStyle style_, ColourRGBA fore_ = ColourRGBA(0, 0, 0)) noexcept : style(style_), fore(fore_) {
 ^
src/3rdparty/scintilla/src/src/Indicator.h:39:2: style: Class 'Indicator' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 Indicator(Scintilla::IndicatorStyle style_, ColourRGBA fore_= ColourRGBA(0,0,0), bool under_=false, int fillAlpha_=30, int outlineAlpha_=50) noexcept :
 ^
src/3rdparty/scintilla/src/src/EditView.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/EditView.cxx:74:2: performance: Variable 'colourMode' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 colourMode = PrintOption::Normal;
 ^
src/3rdparty/scintilla/src/src/EditView.cxx:75:2: performance: Variable 'wrapState' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 wrapState = Wrap::Word;
 ^
src/3rdparty/scintilla/src/src/EditView.cxx:187:2: performance: Variable 'phasesDraw' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 phasesDraw = PhasesDraw::Two;
 ^
src/3rdparty/scintilla/src/src/EditView.cxx:634:61: performance: Function parameter 'rcClient' should be passed by const reference. [passedByValue]
         const ViewStyle &vs, PointEnd pe, const PRectangle rcClient) {
                                                            ^
src/3rdparty/scintilla/src/src/EditView.cxx:705:78: performance: Function parameter 'rcClient' should be passed by const reference. [passedByValue]
 bool charPosition, bool virtualSpace, const ViewStyle &vs, const PRectangle rcClient) {
                                                                             ^
src/3rdparty/scintilla/src/src/EditView.cxx:1363:41: performance: Function parameter 'rcLine' should be passed by const reference. [passedByValue]
 Sci::Line line, int xStart, PRectangle rcLine, int subLine, DrawPhase phase) {
                                        ^
src/3rdparty/scintilla/src/src/EditView.cxx:1719:25: performance: Function parameter 'rcLine' should be passed by const reference. [passedByValue]
 int xStart, PRectangle rcLine, Range lineRange) {
                        ^
src/3rdparty/scintilla/src/src/EditView.cxx:1745:29: performance: Function parameter 'rcLine' should be passed by const reference. [passedByValue]
 Sci::Line line, PRectangle rcLine) {
                            ^
src/3rdparty/scintilla/src/src/EditView.cxx:1965:41: performance: Function parameter 'rcLine' should be passed by const reference. [passedByValue]
 Sci::Line line, int xStart, PRectangle rcLine, int subLine, Sci::Position lineEnd, bool under, int tabWidthMinimumPixels) {
                                        ^
src/3rdparty/scintilla/src/src/EditView.cxx:2325:41: performance: Function parameter 'rcLine' should be passed by const reference. [passedByValue]
 Sci::Line line, int xStart, PRectangle rcLine, int subLine, Sci::Line lineVisible) {
                                        ^
src/3rdparty/scintilla/src/src/Editor.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/Editor.cxx:128:2: performance: Variable 'technology' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 technology = Technology::Default;
 ^
src/3rdparty/scintilla/src/src/Editor.cxx:131:2: performance: Variable 'cursorMode' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 cursorMode = CursorShape::Normal;
 ^
src/3rdparty/scintilla/src/src/Editor.cxx:133:2: performance: Variable 'errorStatus' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 errorStatus = Status::Ok;
 ^
src/3rdparty/scintilla/src/src/Editor.cxx:138:2: performance: Variable 'doubleClickCloseThreshold' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 doubleClickCloseThreshold = Point(3, 3);
 ^
src/3rdparty/scintilla/src/src/Editor.h:565:7: style:inconclusive: Technically the member function 'Scintilla::Internal::Editor::PaintContainsMargin' can be const. [functionConst]
 bool PaintContainsMargin();
      ^
src/3rdparty/scintilla/src/src/Editor.cxx:5319:14: note: Technically the member function 'Scintilla::Internal::Editor::PaintContainsMargin' can be const.
bool Editor::PaintContainsMargin() {
             ^
src/3rdparty/scintilla/src/src/Editor.h:565:7: note: Technically the member function 'Scintilla::Internal::Editor::PaintContainsMargin' can be const.
 bool PaintContainsMargin();
      ^
src/3rdparty/scintilla/src/src/Editor.h:699:2: style: Class 'AutoSurface' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 AutoSurface(const Editor *ed) :
 ^
src/3rdparty/scintilla/src/src/EditView.h:127:54: performance: Function parameter 'rcClient' should be passed by const reference. [passedByValue]
  const ViewStyle &vs, PointEnd pe, const PRectangle rcClient);
                                                     ^
src/3rdparty/scintilla/src/src/EditView.h:130:79: performance: Function parameter 'rcClient' should be passed by const reference. [passedByValue]
  bool charPosition, bool virtualSpace, const ViewStyle &vs, const PRectangle rcClient);
                                                                              ^
src/3rdparty/scintilla/src/src/Editor.cxx:1390:41: performance: Function parameter 'range' should be passed by const reference. [passedByValue]
void Editor::ScrollRange(SelectionRange range) {
                                        ^
src/3rdparty/scintilla/src/src/Editor.cxx:5267:42: performance: Function parameter 'rcArea' should be passed by const reference. [passedByValue]
void Editor::StyleAreaBounded(PRectangle rcArea, bool scrolling) {
                                         ^
src/3rdparty/scintilla/src/src/Indicator.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/Indicator.cxx:30:125: style:inconclusive: Function 'Draw' argument 5 names different: declaration 'drawState' definition 'state'. [funcArgNamesDifferent]
void Indicator::Draw(Surface *surface, const PRectangle &rc, const PRectangle &rcLine, const PRectangle &rcCharacter, State state, int value) const {
                                                                                                                            ^
src/3rdparty/scintilla/src/src/Indicator.h:42:115: note: Function 'Draw' argument 5 names different: declaration 'drawState' definition 'state'.
 void Draw(Surface *surface, const PRectangle &rc, const PRectangle &rcLine, const PRectangle &rcCharacter, State drawState, int value) const;
                                                                                                                  ^
src/3rdparty/scintilla/src/src/Indicator.cxx:30:125: note: Function 'Draw' argument 5 names different: declaration 'drawState' definition 'state'.
void Indicator::Draw(Surface *surface, const PRectangle &rc, const PRectangle &rcLine, const PRectangle &rcCharacter, State state, int value) const {
                                                                                                                            ^
src/3rdparty/scintilla/src/src/KeyMap.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/LineMarker.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/LineMarker.cxx:37:2: performance: Variable 'markType' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 markType = other.markType;
 ^
src/3rdparty/scintilla/src/src/LineMarker.cxx:38:2: performance: Variable 'fore' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 fore = other.fore;
 ^
src/3rdparty/scintilla/src/src/LineMarker.cxx:39:2: performance: Variable 'back' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 back = other.back;
 ^
src/3rdparty/scintilla/src/src/LineMarker.cxx:40:2: performance: Variable 'backSelected' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 backSelected = other.backSelected;
 ^
src/3rdparty/scintilla/src/src/LineMarker.cxx:42:2: performance: Variable 'layer' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 layer = other.layer;
 ^
src/3rdparty/scintilla/src/src/LineMarker.cxx:43:2: performance: Variable 'alpha' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 alpha = other.alpha;
 ^
src/3rdparty/scintilla/src/src/MarginView.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/MarginView.cxx:64:50: performance: Function parameter 'rcPlace' should be passed by const reference. [passedByValue]
void DrawWrapMarker(Surface *surface, PRectangle rcPlace,
                                                 ^
src/3rdparty/scintilla/src/src/PerLine.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/PerLine.cxx:79:6: error: Syntax Error: AST broken, 'if' doesn't have two operands. [internalAstError]
  if ((all || !performedDeletion) && (mhn.number == markerNum)) {
     ^
src/3rdparty/scintilla/src/src/PositionCache.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/PositionCache.cxx:658:5: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
  k = k * 0x100 + uc;
    ^
src/3rdparty/scintilla/src/src/RESearch.cxx:517:18: style: Condition '*(p+1)!=']'' is always true [knownConditionTrueFalse]
      if (*(p+1) != ']') {
                 ^
src/3rdparty/scintilla/src/src/RESearch.cxx:516:17: note: Assuming condition '*(p+1)' is true
     } else if (*(p+1)) {
                ^
src/3rdparty/scintilla/src/src/RESearch.cxx:517:18: note: Condition '*(p+1)!=']'' is always true
      if (*(p+1) != ']') {
                 ^
src/3rdparty/scintilla/src/src/RunStyles.cxx:83:2: performance: Variable 'starts' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 starts = Partitioning<DISTANCE>(8);
 ^
src/3rdparty/scintilla/src/src/ScintillaBase.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/ScintillaBase.cxx:66:2: performance: Variable 'displayPopupMenu' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 displayPopupMenu = PopUp::All;
 ^
src/3rdparty/scintilla/src/src/ScintillaBase.cxx:69:2: performance: Variable 'multiAutoCMode' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 multiAutoCMode = MultiAutoComplete::Once;
 ^
src/3rdparty/scintilla/src/src/Selection.cxx:147:42: performance: Function parameter 'range' should be passed by const reference. [passedByValue]
bool SelectionRange::Trim(SelectionRange range) noexcept {
                                         ^
src/3rdparty/scintilla/src/src/Selection.cxx:375:51: performance: Function parameter 'range' should be passed by const reference. [passedByValue]
void Selection::TentativeSelection(SelectionRange range) {
                                                  ^
src/3rdparty/scintilla/src/src/Selection.cxx:281:0: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (!range.Empty())
^
src/3rdparty/scintilla/src/src/Selection.cxx:301:7: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
  len += range.Length();
      ^
src/3rdparty/scintilla/src/src/Style.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/UniqueString.cxx:43:23: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  if (sv == us.get()) {
                      ^
src/3rdparty/scintilla/src/src/ViewStyle.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/ViewStyle.cxx:252:12: warning:inconclusive: Member variable 'ViewStyle::fonts' is not assigned in the copy constructor. Should it be copied? [uninitMemberVar]
ViewStyle::ViewStyle(const ViewStyle &source) : ViewStyle(source.styles.size()) {
           ^
src/3rdparty/scintilla/src/src/XPM.cxx:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/scintilla/src/src/XPM.cxx:321:12: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
    height = image.second->GetHeight();
           ^
src/3rdparty/scintilla/src/src/XPM.cxx:333:11: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
    width = image.second->GetWidth();
          ^
src/3rdparty/scintilla/src/win32/WinTypes.h:32:7: style:inconclusive: Technically the member function 'Scintilla::Internal::UnknownReleaser::operator()' can be const. [functionConst]
 void operator()(T *pUnknown) noexcept {
      ^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:1962:2: error: There is an unknown macro here somewhere. Configuration is required. If STDMETHODIMP_ is a macro then please configure it. [unknownMacro]
 STDMETHODIMP_(ULONG)AddRef() override;
 ^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:585:2: performance: Variable 'hdc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 hdc = ::CreateCompatibleDC(hdcCompatible);
 ^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:858:2: performance: Variable 'hMemDC' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 hMemDC = ::CreateCompatibleDC(hdc);
 ^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:260:2: style: Struct 'FontGDI' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FontGDI(const FontParameters &fp) {
 ^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:635:0: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (f == feature)
^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:1087:18: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (ch != ' ') {
                 ^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:1179:18: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (ch != ' ') {
                 ^
src/3rdparty/scintilla/src/win32/ScintillaWin.cxx:473:2: error: There is an unknown macro here somewhere. Configuration is required. If STDMETHODIMP_ is a macro then please configure it. [unknownMacro]
 STDMETHODIMP_(ULONG)Release();
 ^
src/3rdparty/sqlite3/src/sqlite3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 472 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/3rdparty/sqlite3/src/sqlite3.c:25118:3: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
  return pVfs->xDlSym(pVfs, pHdle, zSym);
  ^
src/3rdparty/sqlite3/src/sqlite3.c:51959:3: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
  return ORIGVFS(pVfs)->xDlSym(ORIGVFS(pVfs), p, zSym);
  ^
src/3rdparty/sqlite3/src/sqlite3.c:104944:11: warning: Assert statement calls a function which may have desired side effects: 'sqlite3ExprIsInteger'. [assertWithSideEffect]
  assert( sqlite3ExprIsInteger(pE, &i)==0 );
          ^
src/3rdparty/sqlite3/src/sqlite3.c:108244:15: warning: Assert statement calls a function which may have desired side effects: 'sqlite3GetInt32'. [assertWithSideEffect]
           || sqlite3GetInt32(p->u.zToken, &rc)==0 );
              ^
src/3rdparty/sqlite3/src/sqlite3.c:125830:22: warning: Assert statement calls a function which may have desired side effects: 'sqlite3_value_blob'. [assertWithSideEffect]
      assert( zBlob==sqlite3_value_blob(pValue) ); /* No encoding change */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:125957:18: warning: Assert statement calls a function which may have desired side effects: 'sqlite3_value_blob'. [assertWithSideEffect]
  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:178132:38: warning: Assert statement modifies 'x'. [assignmentInAssert]
      assert( /*side-effects-ok*/ (x = va_arg(ap,int))!=0 );
                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:137903:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  db->pParse = &sParse;
  ^
src/3rdparty/sqlite3/src/sqlite3.c:139519:7: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
      pSort->pDeferredRowLoad = &sRowLoadInfo;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:146675:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  *pazResult = &res.azResult[1];
  ^
src/3rdparty/sqlite3/src/sqlite3.c:66876:45: style:inconclusive: Boolean expression '*(char*)(&sqlite3one)==0' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
    sqlite3Put4byte(&aWalHdr[0], (WAL_MAGIC | SQLITE_BIGENDIAN));
                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:23194:39: warning: Either the condition 'op>=0' is redundant or the array 'statMutex[10]' is accessed at index -1, which is out of bounds. [negativeIndex]
  assert( sqlite3_mutex_held(statMutex[op] ? sqlite3Pcache1Mutex()
                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:23196:13: note: Assuming that condition 'op>=0' is not redundant
  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );
            ^
src/3rdparty/sqlite3/src/sqlite3.c:23194:39: note: Negative array index
  assert( sqlite3_mutex_held(statMutex[op] ? sqlite3Pcache1Mutex()
                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:75733:27: error: Array 'pCArray->apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
  pSrcEnd = pCArray->apEnd[k];
                          ^
src/3rdparty/sqlite3/src/sqlite3.c:75732:3: note: After for loop, k has value 6
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
  ^
src/3rdparty/sqlite3/src/sqlite3.c:75733:27: note: Array index out of bounds
  pSrcEnd = pCArray->apEnd[k];
                          ^
src/3rdparty/sqlite3/src/sqlite3.c:75816:24: error: Array 'pCArray->apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
  pEnd = pCArray->apEnd[k];
                       ^
src/3rdparty/sqlite3/src/sqlite3.c:75815:3: note: After for loop, k has value 6
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
  ^
src/3rdparty/sqlite3/src/sqlite3.c:75816:24: note: Array index out of bounds
  pEnd = pCArray->apEnd[k];
                       ^
src/3rdparty/sqlite3/src/sqlite3.c:76918:22: error: Array 'b.apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
    pSrcEnd = b.apEnd[k];
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:76917:5: note: After for loop, k has value 6
    for(k=0; b.ixNx[k]<=j && ALWAYS(k<NB*2); k++){}
    ^
src/3rdparty/sqlite3/src/sqlite3.c:76918:22: note: Array index out of bounds
    pSrcEnd = b.apEnd[k];
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:34495:14: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
    for(i=0; sqlite3Isxdigit(zNum[i]) && i<8; i++){
             ^
src/3rdparty/sqlite3/src/sqlite3.c:75732:25: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:75815:25: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:76917:20: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
    for(k=0; b.ixNx[k]<=j && ALWAYS(k<NB*2); k++){}
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:34489:17: error: The address of local variable 'z' is accessed at non-zero index. [objectIndex]
        && (zNum[1]=='x' || zNum[1]=='X')
                ^
src/3rdparty/sqlite3/src/sqlite3.c:171165:50: note: Address of variable taken here.
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:171165:50: note: Calling function 'sqlite3GetInt32', 1st argument '&t.z[1]' value is lifetime=z
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:34489:17: note: The address of local variable 'z' is accessed at non-zero index.
        && (zNum[1]=='x' || zNum[1]=='X')
                ^
src/3rdparty/sqlite3/src/sqlite3.c:34490:12: error: The address of local variable 'z' is accessed at non-zero index. [objectIndex]
        && sqlite3Isxdigit(zNum[2])
           ^
src/3rdparty/sqlite3/src/sqlite3.c:171165:50: note: Address of variable taken here.
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:171165:50: note: Calling function 'sqlite3GetInt32', 1st argument '&t.z[1]' value is lifetime=z
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:34490:12: note: The address of local variable 'z' is accessed at non-zero index.
        && sqlite3Isxdigit(zNum[2])
           ^
src/3rdparty/sqlite3/src/sqlite3.c:63955:24: warning: The address of local variable 'h1' might be accessed at non-zero index. [objectIndex]
  u32 *aEnd = (u32 *)&a[nByte];
                       ^
src/3rdparty/sqlite3/src/sqlite3.c:65572:28: note: Address of variable taken here.
  walChecksumBytes(1, (u8*)&h1, sizeof(h1)-sizeof(h1.aCksum), 0, aCksum);
                           ^
src/3rdparty/sqlite3/src/sqlite3.c:65572:23: note: Calling function 'walChecksumBytes', 2nd argument '(unsigned char*)&h1' value is lifetime=h1
  walChecksumBytes(1, (u8*)&h1, sizeof(h1)-sizeof(h1.aCksum), 0, aCksum);
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:63955:24: note: The address of local variable 'h1' might be accessed at non-zero index.
  u32 *aEnd = (u32 *)&a[nByte];
                       ^
src/3rdparty/sqlite3/src/sqlite3.c:64885:23: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
      logpage = aRight[iRight++];
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:64949:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64949:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64885:23: note: The address of local variable 'aMerge' might be accessed at non-zero index.
      logpage = aRight[iRight++];
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:64885:23: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
      logpage = aRight[iRight++];
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:64962:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64962:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64885:23: note: The address of local variable 'aMerge' might be accessed at non-zero index.
      logpage = aRight[iRight++];
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:64893:46: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64949:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64949:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64893:46: note: The address of local variable 'aMerge' might be accessed at non-zero index.
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64893:46: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64962:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64962:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:64893:46: note: The address of local variable 'aMerge' might be accessed at non-zero index.
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:82043:17: warning: The address of local variable 'zToken' might be accessed at non-zero index. [objectIndex]
    assert( zVal[nVal]=='\'' );
                ^
src/3rdparty/sqlite3/src/sqlite3.c:82041:12: note: Address of variable taken here.
    zVal = &pExpr->u.zToken[2];
           ^
src/3rdparty/sqlite3/src/sqlite3.c:82043:17: note: The address of local variable 'zToken' might be accessed at non-zero index.
    assert( zVal[nVal]=='\'' );
                ^
src/3rdparty/sqlite3/src/sqlite3.c:110089:16: warning: The address of local variable 'zToken' might be accessed at non-zero index. [objectIndex]
      assert( z[n]=='\'' );
               ^
src/3rdparty/sqlite3/src/sqlite3.c:110087:11: note: Address of variable taken here.
      z = &pExpr->u.zToken[2];
          ^
src/3rdparty/sqlite3/src/sqlite3.c:110089:16: note: The address of local variable 'zToken' might be accessed at non-zero index.
      assert( z[n]=='\'' );
               ^
src/3rdparty/sqlite3/src/sqlite3.c:126832:33: error: The address of local variable 'likeInfoAlt' is accessed at non-zero index. [objectIndex]
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                                ^
src/3rdparty/sqlite3/src/sqlite3.c:126832:20: note: Address of variable taken here.
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:126832:33: note: The address of local variable 'likeInfoAlt' is accessed at non-zero index.
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                                ^
src/3rdparty/sqlite3/src/sqlite3.c:126833:33: error: The address of local variable 'likeInfoAlt' is accessed at non-zero index. [objectIndex]
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                                ^
src/3rdparty/sqlite3/src/sqlite3.c:126833:20: note: Address of variable taken here.
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:126833:33: note: The address of local variable 'likeInfoAlt' is accessed at non-zero index.
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                                ^
src/3rdparty/sqlite3/src/sqlite3.c:128218:16: warning: The address of local variable 'iCol' might be accessed at non-zero index. [objectIndex]
      if( aiCol[i]==pTab->iPKey ){
               ^
src/3rdparty/sqlite3/src/sqlite3.c:128215:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:128218:16: note: The address of local variable 'iCol' might be accessed at non-zero index.
      if( aiCol[i]==pTab->iPKey ){
               ^
src/3rdparty/sqlite3/src/sqlite3.c:128219:14: warning: The address of local variable 'iCol' might be accessed at non-zero index. [objectIndex]
        aiCol[i] = -1;
             ^
src/3rdparty/sqlite3/src/sqlite3.c:128215:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:128219:14: note: The address of local variable 'iCol' might be accessed at non-zero index.
        aiCol[i] = -1;
             ^
src/3rdparty/sqlite3/src/sqlite3.c:130682:18: warning: The address of local variable 'aIdx' might be accessed at non-zero index. [objectIndex]
        if( bUsed[jj] ) continue;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:130664:20: note: Address of variable taken here.
      bUsed = (u8*)&sIdxIter.u.ax.aIdx[nIdx];
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:130682:18: note: The address of local variable 'aIdx' might be accessed at non-zero index.
        if( bUsed[jj] ) continue;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:66135:10: warning: Identical condition and return expression 'rc', return value is always 0 [identicalConditionAfterEarlyExit]
  return rc;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:66087:7: note: If condition 'rc' is true, the function will return/exit
  if( rc ){
      ^
src/3rdparty/sqlite3/src/sqlite3.c:66135:10: note: Returning identical expression 'rc'
  return rc;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:43268:7: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:43234:7: note: First condition
  if( isDelete ){
      ^
src/3rdparty/sqlite3/src/sqlite3.c:43268:7: note: Second condition
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:60333:16: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( nPathname>0 ){
               ^
src/3rdparty/sqlite3/src/sqlite3.c:60322:16: note: First condition
  if( nPathname>0 ){
               ^
src/3rdparty/sqlite3/src/sqlite3.c:60333:16: note: Second condition
  if( nPathname>0 ){
               ^
src/3rdparty/sqlite3/src/sqlite3.c:67040:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( isCommit ){
        ^
src/3rdparty/sqlite3/src/sqlite3.c:67035:9: note: First condition
    if( isCommit ){
        ^
src/3rdparty/sqlite3/src/sqlite3.c:67040:9: note: Second condition
    if( isCommit ){
        ^
src/3rdparty/sqlite3/src/sqlite3.c:33470:7: style: Condition 'bom' is always false [knownConditionTrueFalse]
  if( bom ){
      ^
src/3rdparty/sqlite3/src/sqlite3.c:33456:12: note: Assignment 'bom=0', assigned value is 0
  u8 bom = 0;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:33470:7: note: Condition 'bom' is always false
  if( bom ){
      ^
src/3rdparty/sqlite3/src/sqlite3.c:142032:13: style: Condition 'pSplit->pPrior' is always false [knownConditionTrueFalse]
  if( pSplit->pPrior ){
            ^
src/3rdparty/sqlite3/src/sqlite3.c:141875:20: note: Assignment 'pSplit->pPrior=0', assigned value is 0
  pSplit->pPrior = 0;
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:142032:13: note: Condition 'pSplit->pPrior' is always false
  if( pSplit->pPrior ){
            ^
src/3rdparty/sqlite3/src/sqlite3.c:144911:7: style: Condition 'addrHitTest' is always false [knownConditionTrueFalse]
  if( addrHitTest ){
      ^
src/3rdparty/sqlite3/src/sqlite3.c:144826:21: note: Assignment 'addrHitTest=0', assigned value is 0
  int addrHitTest = 0;
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:144831:13: note: Assuming condition is false
  if( pParse->nErr ) return;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:144911:7: note: Condition 'addrHitTest' is always false
  if( addrHitTest ){
      ^
src/3rdparty/sqlite3/src/sqlite3.c:153791:13: style: Condition '!db->mallocFailed' is always true [knownConditionTrueFalse]
        if( !db->mallocFailed ){
            ^
src/3rdparty/sqlite3/src/sqlite3.c:153764:11: note: Assuming that condition '!db->mallocFailed' is not redundant
       && !db->mallocFailed
          ^
src/3rdparty/sqlite3/src/sqlite3.c:153791:13: note: Condition '!db->mallocFailed' is always true
        if( !db->mallocFailed ){
            ^
src/3rdparty/sqlite3/src/sqlite3.c:154270:15: style: Condition 'bStopAtNull' is always false [knownConditionTrueFalse]
    }else if( bStopAtNull ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:154026:22: note: Assignment 'bStopAtNull=0', assigned value is 0
    u8 bStopAtNull = 0;          /* Add condition to terminate at NULLs */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:154270:15: note: Condition 'bStopAtNull' is always false
    }else if( bStopAtNull ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:161297:19: style: Condition 'sCur.n==0' is always true [knownConditionTrueFalse]
        if( sCur.n==0 ){
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:161276:18: note: Assignment 'sCur.n=0', assigned value is 0
        sCur.n = 0;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:161297:19: note: Condition 'sCur.n==0' is always true
        if( sCur.n==0 ){
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:57332:41: style: Expression '(X & 0x4) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_MEMORY   & 5)!=1 );
                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:57333:41: style: Expression '(X & 0x2) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_OFF      & 5)!=1 );
                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:57335:41: style: Expression '(X & 0x0) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_DELETE   & 5)!=1 );
                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:25668:3: error: Common realloc mistake: 'p' nulled but not freed upon failure [memleakOnRealloc]
  p = SQLITE_REALLOC(p, nByte+8 );
  ^
src/3rdparty/sqlite3/src/sqlite3.c:41650:3: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  pShmNode->nRef++;
  ^
src/3rdparty/sqlite3/src/sqlite3.c:41573:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:41650:3: note: Null pointer dereference
  pShmNode->nRef++;
  ^
src/3rdparty/sqlite3/src/sqlite3.c:41661:23: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  sqlite3_mutex_enter(pShmNode->pShmMutex);
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:41573:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:41661:23: note: Null pointer dereference
  sqlite3_mutex_enter(pShmNode->pShmMutex);
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:41662:14: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  p->pNext = pShmNode->pFirst;
             ^
src/3rdparty/sqlite3/src/sqlite3.c:41573:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:41662:14: note: Null pointer dereference
  p->pNext = pShmNode->pFirst;
             ^
src/3rdparty/sqlite3/src/sqlite3.c:41663:3: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  pShmNode->pFirst = p;
  ^
src/3rdparty/sqlite3/src/sqlite3.c:41573:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:41663:3: note: Null pointer dereference
  pShmNode->pFirst = p;
  ^
src/3rdparty/sqlite3/src/sqlite3.c:41664:23: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  sqlite3_mutex_leave(pShmNode->pShmMutex);
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:41573:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:41664:23: note: Null pointer dereference
  sqlite3_mutex_leave(pShmNode->pShmMutex);
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:41715:14: warning: Either the condition 'pDbFd->pShm==0' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  pShmNode = p->pShmNode;
             ^
src/3rdparty/sqlite3/src/sqlite3.c:41709:18: note: Assuming that condition 'pDbFd->pShm==0' is not redundant
  if( pDbFd->pShm==0 ){
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:41714:12: note: Assignment 'p=pDbFd->pShm', assigned value is 0
  p = pDbFd->pShm;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:41715:14: note: Null pointer dereference
  pShmNode = p->pShmNode;
             ^
src/3rdparty/sqlite3/src/sqlite3.c:52495:10: warning: Either the condition '!pBt->pHasContent' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  return p->iSize;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:69032:9: note: Assuming that condition '!pBt->pHasContent' is not redundant
    if( !pBt->pHasContent ){
        ^
src/3rdparty/sqlite3/src/sqlite3.c:69036:51: note: Calling function 'sqlite3BitvecSize', 1st argument 'pBt->pHasContent' value is 0
  if( rc==SQLITE_OK && pgno<=sqlite3BitvecSize(pBt->pHasContent) ){
                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:52495:10: note: Null pointer dereference
  return p->iSize;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:138046:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
src/3rdparty/sqlite3/src/sqlite3.c:138166:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );
                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:138165:20: note: Calling function 'sqlite3LockAndPrepare', 6th argument 'ppStmt' value is 0
                 0,ppStmt,pzTail);
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:138046:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
src/3rdparty/sqlite3/src/sqlite3.c:138194:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
src/3rdparty/sqlite3/src/sqlite3.c:138242:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */
                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:138241:42: note: Calling function 'sqlite3Prepare16', 5th argument 'ppStmt' value is 0
  rc = sqlite3Prepare16(db,zSql,nBytes,0,ppStmt,pzTail);
                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:138194:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
src/3rdparty/sqlite3/src/sqlite3.c:140503:11: warning: Either the condition 'pColExpr!=0' is redundant or there is possible null pointer dereference: pColExpr. [nullPointerRedundantCheck]
      if( pColExpr->op==TK_COLUMN
          ^
src/3rdparty/sqlite3/src/sqlite3.c:140499:14: note: Assuming that condition 'pColExpr!=0' is not redundant
      while( ALWAYS(pColExpr!=0) && pColExpr->op==TK_DOT ){
             ^
src/3rdparty/sqlite3/src/sqlite3.c:140503:11: note: Null pointer dereference
      if( pColExpr->op==TK_COLUMN
          ^
src/3rdparty/sqlite3/src/sqlite3.c:142133:27: warning: Either the condition 'pSubst->pEList!=0' is redundant or there is possible null pointer dereference: pSubst->pEList. [nullPointerRedundantCheck]
      Expr *pCopy = pSubst->pEList->a[iColumn].pExpr;
                          ^
src/3rdparty/sqlite3/src/sqlite3.c:142135:29: note: Assuming that condition 'pSubst->pEList!=0' is not redundant
      assert( pSubst->pEList!=0 && iColumn<pSubst->pEList->nExpr );
                            ^
src/3rdparty/sqlite3/src/sqlite3.c:142133:27: note: Null pointer dereference
      Expr *pCopy = pSubst->pEList->a[iColumn].pExpr;
                          ^
src/3rdparty/sqlite3/src/sqlite3.c:178596:10: warning: Either the condition 'zFilename' is redundant or there is possible null pointer dereference: zFilename. [nullPointerRedundantCheck]
  return zFilename[0] ? zFilename : 0;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:178592:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] && (N--)>0 ){
         ^
src/3rdparty/sqlite3/src/sqlite3.c:178596:10: note: Null pointer dereference
  return zFilename[0] ? zFilename : 0;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:178646:20: warning: Either the condition 'zFilename' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  return zFilename + 1;
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:178642:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] ){
         ^
src/3rdparty/sqlite3/src/sqlite3.c:178646:20: note: Null pointer addition
  return zFilename + 1;
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:109473:51: portability:inconclusive: Casting from double * to unsigned char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    sqlite3VdbeAddOp4Dup8(v, OP_Real, 0, iMem, 0, (u8*)&value, P4_REAL);
                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:34192:34: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    result = sign<0 ? -(double)0 : (double)0;
                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:84841:11: warning: Redundant assignment of 'nByte' to itself. [selfAssignment]
    nByte = ROUND8P(nByte);
          ^
src/3rdparty/sqlite3/src/sqlite3.c:103871:21: style: The comparison 'cnt == 0' is always true. [knownConditionTrueFalse]
  assert( pNC && cnt==0 );
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:103818:13: note: 'cnt' is assigned value '0' here.
  int cnt = 0;                      /* Number of matching column names */
            ^
src/3rdparty/sqlite3/src/sqlite3.c:103871:21: note: The comparison 'cnt == 0' is always true.
  assert( pNC && cnt==0 );
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:141773:18: style: The comparison 'pKeyDup == 0' is always true. [knownConditionTrueFalse]
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:141765:22: note: 'pKeyDup' is assigned value '0' here.
  KeyInfo *pKeyDup = 0; /* Comparison information for duplicate removal */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:141773:18: note: The comparison 'pKeyDup == 0' is always true.
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:171433:23: warning: Redundant assignment of 'yymsp[0].minor.yy528' to itself. [selfAssignment]
{yymsp[0].minor.yy528 = yymsp[0].minor.yy528; /*A-overwrites-X*/}
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:173424:15: style: The comparison 'nErr == 0' is always true. [knownConditionTrueFalse]
  assert( nErr==0 );
              ^
src/3rdparty/sqlite3/src/sqlite3.c:173316:14: note: 'nErr' is assigned value '0' here.
  int nErr = 0;                   /* Number of errors encountered */
             ^
src/3rdparty/sqlite3/src/sqlite3.c:173424:15: note: The comparison 'nErr == 0' is always true.
  assert( nErr==0 );
              ^
src/3rdparty/sqlite3/src/sqlite3.c:90735:3: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return 0;
  ^
src/3rdparty/sqlite3/src/sqlite3.c:95192:7: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
      break;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:24434:10: style: The scope of the variable 'n' can be reduced. [variableScope]
  int i, n;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:31289:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;                             /* Vararg list */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:33568:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:33961:10: style: The scope of the variable 'x' can be reduced. [variableScope]
  int c, x;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:34998:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:35643:15: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
  struct _ht *pEntry;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:40866:11: style: The scope of the variable 'nWrite' can be reduced. [variableScope]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:42820:7: style: The scope of the variable 'iLimit' can be reduced. [variableScope]
  int iLimit = 0;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:43612:13: style: The scope of the variable 'got' can be reduced. [variableScope]
    int fd, got;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:52413:18: style: The scope of the variable 'j' can be reduced. [variableScope]
    unsigned int j;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:52414:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
    int rc;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:54081:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  unsigned int i;
               ^
src/3rdparty/sqlite3/src/sqlite3.c:54357:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:56558:19: style: The scope of the variable 'p' can be reduced. [variableScope]
  PagerSavepoint *p;
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:57054:17: style: The scope of the variable 'aMagic' can be reduced. [variableScope]
  unsigned char aMagic[8];     /* A buffer to hold the magic header */
                ^
src/3rdparty/sqlite3/src/sqlite3.c:58843:7: style: The scope of the variable 'iHdrOff' can be reduced. [variableScope]
  i64 iHdrOff;             /* End of first segment of main-journal records */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:64047:7: style: The scope of the variable 'nativeCksum' can be reduced. [variableScope]
  int nativeCksum;                /* True for native byte-order checksums */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:66661:7: style: The scope of the variable 'cnt' can be reduced. [variableScope]
  int cnt;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:68301:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Btree *p;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:68317:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Btree *p;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:69067:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:70059:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x;                                     /* Excess size of the slot */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:70061:7: style: The scope of the variable 'size' can be reduced. [variableScope]
  int size;                                  /* Size of the free slot */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:70227:6: style: The scope of the variable 'nFrag' can be reduced. [variableScope]
  u8 nFrag = 0;                         /* Reduction in fragmentation */
     ^
src/3rdparty/sqlite3/src/sqlite3.c:70481:7: style: The scope of the variable 'sz' can be reduced. [variableScope]
  int sz;            /* Size of a cell */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:70482:7: style: The scope of the variable 'pc' can be reduced. [variableScope]
  int pc;            /* Address of a freeblock within pPage->aData[] */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:72300:8: style: The scope of the variable 'nFreeList' can be reduced. [variableScope]
  Pgno nFreeList;           /* Number of pages still on the free-list */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:72301:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:73858:8: style: The scope of the variable 'pgno' can be reduced. [variableScope]
  Pgno pgno;
       ^
src/3rdparty/sqlite3/src/sqlite3.c:73883:8: style: The scope of the variable 'pgno' can be reduced. [variableScope]
  Pgno pgno;
       ^
src/3rdparty/sqlite3/src/sqlite3.c:73884:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc = SQLITE_OK;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:80174:20: style: The scope of the variable 'pp' can be reduced. [variableScope]
  sqlite3_backup **pp;                 /* Ptr to head of pagers backup list */
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:83886:11: style: The scope of the variable 'pOp' can be reduced. [variableScope]
  VdbeOp *pOp;
          ^
src/3rdparty/sqlite3/src/sqlite3.c:85487:9: style: The scope of the variable 'rc2' can be reduced. [variableScope]
    int rc2 = SQLITE_OK;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:85570:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                         /* Used to store transient return codes */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:89260:8: style: The scope of the variable 'pVar' can be reduced. [variableScope]
  Mem *pVar;
       ^
src/3rdparty/sqlite3/src/sqlite3.c:90073:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:99489:12: style: The scope of the variable 'db' can be reduced. [variableScope]
  sqlite3 *db;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:100229:7: style: The scope of the variable 'iBuf' can be reduced. [variableScope]
  int iBuf;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:100239:18: style: The scope of the variable 'rc' can be reduced. [variableScope]
      int i = 0, rc;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:100849:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:101422:7: style: The scope of the variable 'bFlush' can be reduced. [variableScope]
  int bFlush;                     /* True to flush contents of memory to PMA */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:102166:11: style: The scope of the variable 'iTask' can be reduced. [variableScope]
      int iTask;
          ^
src/3rdparty/sqlite3/src/sqlite3.c:103396:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:103397:25: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  struct ExprList_item *pItem;
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:103457:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:103458:12: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  SrcItem *pItem;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:103494:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:104895:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;             /* Loop counter */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:105013:13: style: The scope of the variable 'pEList' can be reduced. [variableScope]
  ExprList *pEList;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:105039:18: style: The scope of the variable 'pDup' can be reduced. [variableScope]
      Expr *pE, *pDup;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:110606:11: style: The scope of the variable 'nextCase' can be reduced. [variableScope]
      int nextCase;                     /* GOTO label for next WHEN clause */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:111362:7: style: The scope of the variable 'iVar' can be reduced. [variableScope]
  int iVar;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:111363:18: style: The scope of the variable 'pL' can be reduced. [variableScope]
  sqlite3_value *pL, *pR = 0;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:112276:25: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  struct ExprList_item *pItem;
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:112277:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:116058:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:117365:7: style: The scope of the variable 'iSrc' can be reduced. [variableScope]
  int iSrc;             /* Index in pTabList->a[] of table being read */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:117660:11: style: The scope of the variable 'addrRewind' can be reduced. [variableScope]
      int addrRewind;
          ^
src/3rdparty/sqlite3/src/sqlite3.c:117661:11: style: The scope of the variable 'reg' can be reduced. [variableScope]
      int reg;
          ^
src/3rdparty/sqlite3/src/sqlite3.c:118130:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:118264:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:122388:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:122389:12: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  SrcItem *pItem;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:122615:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:122843:7: style: The scope of the variable 'j' can be reduced. [variableScope]
  int j;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:123030:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:123236:12: style: The scope of the variable 'pColl2' can be reduced. [variableScope]
  CollSeq *pColl2;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:123589:7: style: The scope of the variable 'h' can be reduced. [variableScope]
  int h;              /* Hash value */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:125027:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:125213:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:125215:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:125232:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:125234:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:125489:13: style: The scope of the variable 'bMatch' can be reduced. [variableScope]
        int bMatch;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:125950:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:126187:7: style: The scope of the variable 'flags' can be reduced. [variableScope]
  int flags;                        /* 1: trimleft  2: trimright  3: trim */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:126188:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                            /* Loop counter */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:127727:15: style: The scope of the variable 'zColl' can be reduced. [variableScope]
  const char *zColl;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:127809:14: style: The scope of the variable 'pWInfo' can be reduced. [variableScope]
  WhereInfo *pWInfo;              /* Context used by sqlite3WhereXXX() */
             ^
src/3rdparty/sqlite3/src/sqlite3.c:127871:13: style: The scope of the variable 'pEq' can be reduced. [variableScope]
      Expr *pEq, *pAll = 0;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:129182:7: style: The scope of the variable 'pDb' can be reduced. [variableScope]
  Db *pDb;                   /* Database only autoinc table */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:129183:7: style: The scope of the variable 'memId' can be reduced. [variableScope]
  int memId;                 /* Register holding max rowid */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:134593:26: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int upr, lwr, mid = 0, rc;
                         ^
src/3rdparty/sqlite3/src/sqlite3.c:134831:13: style: The scope of the variable 'aOp' can be reduced. [variableScope]
    VdbeOp *aOp;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:135680:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:138538:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Token *p;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:138639:7: style: The scope of the variable 'iCol' can be reduced. [variableScope]
  int iCol;            /* Index of column matching zCol */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:139844:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:140587:12: style: The scope of the variable 'pColl' can be reduced. [variableScope]
  CollSeq *pColl;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:140589:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  Expr *p;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:140604:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    i64 n;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:140739:9: style: The scope of the variable 'v' can be reduced. [variableScope]
  Vdbe *v = 0;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:140740:7: style: The scope of the variable 'iLimit' can be reduced. [variableScope]
  int iLimit = 0;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:140741:7: style: The scope of the variable 'iOffset' can be reduced. [variableScope]
  int iOffset;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:141735:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;             /* Loop counters */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:144291:15: style: The scope of the variable 'iDb' can be reduced. [variableScope]
          int iDb;                     /* Schema index for this data src */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:147118:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:149637:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                 /* Result code */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:149638:7: style: The scope of the variable 'iCursor' can be reduced. [variableScope]
  int iCursor;            /* Cursor used by pTab */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:149641:9: style: The scope of the variable 'pTerm' can be reduced. [variableScope]
  Expr *pTerm;            /* One term of the conflict-target clause */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:151224:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:152515:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                        /* Loop counter */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:153456:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:153768:17: style: The scope of the variable 'pOp' can be reduced. [variableScope]
        VdbeOp *pOp;     /* Opcode to access the value of the IN constraint */
                ^
src/3rdparty/sqlite3/src/sqlite3.c:154557:13: style: The scope of the variable 'jmp1' can be reduced. [variableScope]
        int jmp1 = 0;                   /* Address of jump operation */
            ^
src/3rdparty/sqlite3/src/sqlite3.c:155751:20: style: The scope of the variable 'pAndTerm' can be reduced. [variableScope]
        WhereTerm *pAndTerm;
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:155752:13: style: The scope of the variable 'j' can be reduced. [variableScope]
        int j;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:156047:7: style: The scope of the variable 'iCur' can be reduced. [variableScope]
  int iCur;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:156350:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:156539:11: style: The scope of the variable 'idxNew' can be reduced. [variableScope]
      int idxNew;
          ^
src/3rdparty/sqlite3/src/sqlite3.c:156540:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:156853:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:156897:9: style: The scope of the variable 'pColRef' can be reduced. [variableScope]
  Expr *pColRef;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:156898:9: style: The scope of the variable 'pTerm' can be reduced. [variableScope]
  Expr *pTerm;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:157054:15: style: The scope of the variable 'pInner' can be reduced. [variableScope]
  WhereLevel *pInner;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:158052:7: style: The scope of the variable 'addrTop' can be reduced. [variableScope]
  int addrTop;                         /* Address of OP_Rewind */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:158053:7: style: The scope of the variable 'addrCont' can be reduced. [variableScope]
  int addrCont;                        /* Jump here to skip a row */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:158055:20: style: The scope of the variable 'pWCEnd' can be reduced. [variableScope]
  const WhereTerm *pWCEnd;             /* Last WHERE clause term */
                   ^
src/3rdparty/sqlite3/src/sqlite3.c:158059:7: style: The scope of the variable 'iCur' can be reduced. [variableScope]
  int iCur;                            /* Cursor for table getting the filter */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:160315:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                    /* Loop counter */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:160317:14: style: The scope of the variable 'aiColumn' can be reduced. [variableScope]
  const i16 *aiColumn;      /* Columns contained in the index */
             ^
src/3rdparty/sqlite3/src/sqlite3.c:160318:7: style: The scope of the variable 'nColumn' can be reduced. [variableScope]
  u16 nColumn;              /* Number of columns in the index */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:160371:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, rc;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:165567:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:166711:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr = 0;
        ^
src/3rdparty/sqlite3/src/sqlite3.c:199573:13: style: The scope of the variable 'pNode' can be reduced. [variableScope]
  JsonNode *pNode;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:199907:13: style: The scope of the variable 'nKey' can be reduced. [variableScope]
  u32 i, j, nKey;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:199908:15: style: The scope of the variable 'zKey' can be reduced. [variableScope]
  const char *zKey;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:200285:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  u32 i;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:200542:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:200543:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:200721:15: style: The scope of the variable 'zPath' can be reduced. [variableScope]
  const char *zPath;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:200872:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
src/3rdparty/sqlite3/src/sqlite3.c:200873:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:200947:17: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  sqlite3_vtab *pNew;
                ^
src/3rdparty/sqlite3/src/sqlite3.c:201088:7: style: The scope of the variable 'jj' can be reduced. [variableScope]
  int jj, nn;
      ^
src/3rdparty/sqlite3/src/sqlite3.c:80497:43: style: Checking if unsigned expression 'acc.mxAlloc' is less than zero. [unsignedLessThanZero]
    assert( acc.zText==zBuf && acc.mxAlloc<=0 );
                                          ^
src/3rdparty/sqlite3/src/sqlite3.c:93152:29: style: Unsigned expression 'p2' can't be negative so it is unnecessary to test it. [unsignedPositive]
      assert( pC->nHdrParsed<=p2 );         /* Conditional skipped */
                            ^
src/3rdparty/sqlite3/src/sqlite3.c:93115:22: note: Assignment 'pC->nHdrParsed=0', assigned value is 0
    pC->nHdrParsed = 0;
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:93152:29: note: Unsigned positive
      assert( pC->nHdrParsed<=p2 );         /* Conditional skipped */
                            ^
src/3rdparty/sqlite3/src/sqlite3.c:154041:19: style: Checking if unsigned expression 'pLoop->u.btree.nBtm' is less than zero. [unsignedLessThanZero]
      nExtraReg = MAX(nExtraReg, pLoop->u.btree.nBtm);
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:154021:21: note: Assignment 'nExtraReg=0', assigned value is 0
    int nExtraReg = 0;           /* Number of extra registers needed */
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:154041:19: note: Unsigned less than zero
      nExtraReg = MAX(nExtraReg, pLoop->u.btree.nBtm);
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:23295:8: style:inconclusive: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'. [funcArgNamesDifferent]
  int *pCurrent,        /* Write current value here */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:8730:57: note: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:23295:8: note: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'.
  int *pCurrent,        /* Write current value here */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:23296:8: style:inconclusive: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'. [funcArgNamesDifferent]
  int *pHighwater,      /* Write high-water mark here */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:8730:68: note: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:23296:8: note: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'.
  int *pHighwater,      /* Write high-water mark here */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:23297:7: style:inconclusive: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'. [funcArgNamesDifferent]
  int resetFlag         /* Reset high-water mark if true */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:8730:80: note: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:23297:7: note: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'.
  int resetFlag         /* Reset high-water mark if true */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:25213:54: style:inconclusive: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'. [funcArgNamesDifferent]
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){
                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:8025:54: note: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'.
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);
                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:25213:54: note: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'.
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){
                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:29124:66: style:inconclusive: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:7122:66: note: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:29124:66: note: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:29149:45: style:inconclusive: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_soft_heap_limit(int n){
                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:7134:63: note: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:29149:45: note: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API void sqlite3_soft_heap_limit(int n){
                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:29166:66: style:inconclusive: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:7123:66: note: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:29166:66: note: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:30147:15: style:inconclusive: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'. [funcArgNamesDifferent]
  const char *fmt,           /* Format string */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:8555:64: note: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'.
SQLITE_API void sqlite3_str_vappendf(sqlite3_str*, const char *zFormat, va_list);
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:30147:15: note: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'.
  const char *fmt,           /* Format string */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:30968:68: style:inconclusive: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_appendchar(sqlite3_str *p, int N, char c){
                                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:8558:66: note: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'.
SQLITE_API void sqlite3_str_appendchar(sqlite3_str*, int N, char C);
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:30968:68: note: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'.
SQLITE_API void sqlite3_str_appendchar(sqlite3_str *p, int N, char c){
                                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:30996:64: style:inconclusive: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_append(sqlite3_str *p, const char *z, int N){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:8556:62: note: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_append(sqlite3_str*, const char *zIn, int N);
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:30996:64: note: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_append(sqlite3_str *p, const char *z, int N){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:31013:67: style:inconclusive: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_appendall(sqlite3_str *p, const char *z){
                                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:8557:65: note: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_appendall(sqlite3_str*, const char *zIn);
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:31013:67: note: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_appendall(sqlite3_str *p, const char *z){
                                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:32699:49: style:inconclusive: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_randomness(int N, void *pBuf){
                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:3371:49: note: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'.
SQLITE_API void sqlite3_randomness(int N, void *P);
                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:32699:49: note: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'.
SQLITE_API void sqlite3_randomness(int N, void *pBuf){
                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:33492:51: style:inconclusive: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){
                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:20517:51: note: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *pData, int nByte);
                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:33492:51: note: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){
                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:33567:52: style:inconclusive: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:20515:52: note: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *pData, int nChar);
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:33567:52: note: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:35693:74: style:inconclusive: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'. [funcArgNamesDifferent]
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){
                                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:13963:71: note: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'.
SQLITE_PRIVATE void *sqlite3HashInsert(Hash*, const char *pKey, void *pData);
                                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:35693:74: note: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'.
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){
                                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:51800:73: style:inconclusive: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'. [funcArgNamesDifferent]
static int memdbUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:51389:67: note: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'.
static int memdbUnfetch(sqlite3_file*, sqlite3_int64 iOfst, void *p);
                                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:51800:73: note: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'.
static int memdbUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:51912:15: style:inconclusive: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'. [funcArgNamesDifferent]
  const char *zPath,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:51396:50: note: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'.
static int memdbAccess(sqlite3_vfs*, const char *zName, int flags, int *);
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:51912:15: note: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'.
  const char *zPath,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:51930:15: style:inconclusive: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'. [funcArgNamesDifferent]
  const char *zPath,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:51397:56: note: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'.
static int memdbFullPathname(sqlite3_vfs*, const char *zName, int, char *zOut);
                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:51930:15: note: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'.
  const char *zPath,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:51942:57: style:inconclusive: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'. [funcArgNamesDifferent]
static void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:51398:52: note: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'.
static void *memdbDlOpen(sqlite3_vfs*, const char *zFilename);
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:51942:57: note: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'.
static void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:51973:64: style:inconclusive: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'. [funcArgNamesDifferent]
static int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:51402:59: note: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'.
static int memdbRandomness(sqlite3_vfs*, int nByte, char *zOut);
                                                          ^
src/3rdparty/sqlite3/src/sqlite3.c:51973:64: note: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'.
static int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:51981:46: style:inconclusive: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'. [funcArgNamesDifferent]
static int memdbSleep(sqlite3_vfs *pVfs, int nMicro){
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:51403:41: note: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'.
static int memdbSleep(sqlite3_vfs*, int microseconds);
                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:51981:46: note: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'.
static int memdbSleep(sqlite3_vfs *pVfs, int nMicro){
                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:52942:11: style:inconclusive: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'. [funcArgNamesDifferent]
  PCache *p                    /* Preallocated space for the PCache */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:16632:11: note: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'.
  PCache *pToInit                /* Preallocated space for the PCache */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:52942:11: note: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'.
  PCache *p                    /* Preallocated space for the PCache */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:53298:64: style:inconclusive: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:16661:57: note: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'.
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache*, Pgno x);
                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:53298:64: note: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'.
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:61146:7: style:inconclusive: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'. [funcArgNamesDifferent]
  int flags           /* PAGER_GET_XXX flags */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:15375:83: note: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'.
SQLITE_PRIVATE int sqlite3PagerGet(Pager *pPager, Pgno pgno, DbPage **ppPage, int clrFlag);
                                                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:61146:7: note: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'.
  int flags           /* PAGER_GET_XXX flags */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:62360:65: style:inconclusive: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:15398:65: note: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'.
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int n);
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:62360:65: note: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'.
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:63021:8: style:inconclusive: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'. [funcArgNamesDifferent]
  int *pbOpen                     /* OUT: Set to true if call is a no-op */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:15406:62: note: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'.
SQLITE_PRIVATE   int sqlite3PagerOpenWal(Pager *pPager, int *pisOpen);
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:63021:8: note: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'.
  int *pbOpen                     /* OUT: Set to true if call is a no-op */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:71396:58: style:inconclusive: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:15548:58: note: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);
                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:71396:58: note: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:71396:86: style:inconclusive: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:15548:87: note: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);
                                                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:71396:86: note: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:73035:13: style:inconclusive: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'. [funcArgNamesDifferent]
  BtCursor *pCur                              /* Write new cursor here */
            ^
src/3rdparty/sqlite3/src/sqlite3.c:15715:13: note: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'.
  BtCursor *pCursor                    /* Space to write cursor structure */
            ^
src/3rdparty/sqlite3/src/sqlite3.c:73035:13: note: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'.
  BtCursor *pCur                              /* Write new cursor here */
            ^
src/3rdparty/sqlite3/src/sqlite3.c:73995:7: style:inconclusive: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'. [funcArgNamesDifferent]
  int biasRight,           /* If true, bias the search to the high end */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:15729:7: note: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'.
  int bias,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:73995:7: note: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'.
  int biasRight,           /* If true, bias the search to the high end */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:74225:19: style:inconclusive: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'. [funcArgNamesDifferent]
  UnpackedRecord *pIdxKey, /* Unpacked index key */
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:15734:19: note: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'.
  UnpackedRecord *pUnKey,
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:74225:19: note: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'.
  UnpackedRecord *pIdxKey, /* Unpacked index key */
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:77447:23: style:inconclusive: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'. [funcArgNamesDifferent]
  const BtreePayload *pX,        /* Content of the row to be inserted */
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:15790:70: note: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'.
SQLITE_PRIVATE int sqlite3BtreeInsert(BtCursor*, const BtreePayload *pPayload,
                                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:77447:23: note: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'.
  const BtreePayload *pX,        /* Content of the row to be inserted */
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:78472:48: style:inconclusive: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:15606:48: note: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *pBtree, int idx, u32 *pValue);
                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:78472:48: note: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:78472:65: style:inconclusive: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:15606:70: note: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *pBtree, int idx, u32 *pValue);
                                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:78472:65: note: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:78502:66: style:inconclusive: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:15607:64: note: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'.
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree*, int idx, u32 value);
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:78502:66: note: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'.
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:79411:52: style:inconclusive: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:15568:52: note: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *pBtree);
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:79411:52: note: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:79428:49: style:inconclusive: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){
                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:15570:49: note: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *pBtree, int iTab, u8 isWriteLock);
                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:79428:49: note: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){
                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:79517:50: style:inconclusive: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:15826:50: note: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'.
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBt, int iVersion);
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:79517:50: note: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'.
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:79559:50: style:inconclusive: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:15828:50: note: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *pBt);
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:79559:50: note: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){
                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:79740:12: style:inconclusive: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'. [funcArgNamesDifferent]
  sqlite3* pDestDb,                     /* Database to write to */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:9386:12: note: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'.
  sqlite3 *pDest,                        /* Destination database handle */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:79740:12: note: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'.
  sqlite3* pDestDb,                     /* Database to write to */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:79741:15: style:inconclusive: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'. [funcArgNamesDifferent]
  const char *zDestDb,                  /* Name of database within pDestDb */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:9387:15: note: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'.
  const char *zDestName,                 /* Destination database name */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:79741:15: note: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'.
  const char *zDestDb,                  /* Name of database within pDestDb */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:79742:12: style:inconclusive: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'. [funcArgNamesDifferent]
  sqlite3* pSrcDb,                      /* Database connection to read from */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:9388:12: note: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'.
  sqlite3 *pSource,                      /* Source database handle */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:79742:12: note: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'.
  sqlite3* pSrcDb,                      /* Database connection to read from */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:79743:15: style:inconclusive: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'. [funcArgNamesDifferent]
  const char *zSrcDb                    /* Name of database within pSrcDb */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:9389:15: note: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'.
  const char *zSourceName                /* Source database name */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:79743:15: note: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'.
  const char *zSrcDb                    /* Name of database within pSrcDb */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:80613:77: style:inconclusive: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'. [funcArgNamesDifferent]
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){
                                                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:23030:61: note: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'.
SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve);
                                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:80613:77: note: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'.
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){
                                                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:80676:64: style:inconclusive: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:23031:64: note: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'.
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int n);
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:80676:64: note: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'.
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:83573:64: style:inconclusive: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:16374:62: note: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe*, int addr, int P1);
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:83573:64: note: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:83577:64: style:inconclusive: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:16375:62: note: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe*, int addr, int P2);
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:83577:64: note: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:83581:64: style:inconclusive: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:16376:62: note: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe*, int addr, int P3);
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:83581:64: note: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:83585:54: style:inconclusive: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){
                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:16377:52: note: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'.
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe*, u16 P5);
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:83585:54: note: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'.
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){
                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:83842:81: style:inconclusive: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){
                                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:16388:79: note: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);
                                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:83842:81: note: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){
                                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:83885:65: style:inconclusive: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:16389:63: note: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe*, void *pP4, int p4type);
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:83885:65: note: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:88254:17: style:inconclusive: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'. [funcArgNamesDifferent]
  unsigned char enc
                ^
src/3rdparty/sqlite3/src/sqlite3.c:6318:58: note: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'.
                           void(*)(void*), unsigned char encoding);
                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:88254:17: note: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'.
  unsigned char enc
                ^
src/3rdparty/sqlite3/src/sqlite3.c:88765:68: style:inconclusive: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'. [funcArgNamesDifferent]
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){
                                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:6049:66: note: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'.
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:88765:68: note: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'.
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){
                                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:88786:65: style:inconclusive: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'. [funcArgNamesDifferent]
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:6135:60: note: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:88786:65: note: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:88816:7: style:inconclusive: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'. [funcArgNamesDifferent]
  int iArg,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:6136:59: note: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));
                                                          ^
src/3rdparty/sqlite3/src/sqlite3.c:88816:7: note: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
  int iArg,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:88989:69: style:inconclusive: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){
                                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:5463:63: note: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:88989:69: note: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){
                                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:88999:62: style:inconclusive: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:5470:56: note: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);
                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:88999:62: note: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:89004:64: style:inconclusive: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:5471:58: note: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);
                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:89004:64: note: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:89009:66: style:inconclusive: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:5464:60: note: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:89009:66: note: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:89014:60: style:inconclusive: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:5465:54: note: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);
                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:89014:60: note: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:89019:71: style:inconclusive: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){
                                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:5466:66: note: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);
                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:89019:71: note: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){
                                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:89024:78: style:inconclusive: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){
                                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:5467:72: note: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);
                                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:89024:78: note: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){
                                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:89029:73: style:inconclusive: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){
                                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:5469:67: note: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);
                                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:89029:73: note: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){
                                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:89039:71: style:inconclusive: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){
                                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:5468:65: note: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);
                                                                ^
src/3rdparty/sqlite3/src/sqlite3.c:89039:71: note: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){
                                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:89045:61: style:inconclusive: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){
                                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:5472:55: note: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);
                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:89045:61: note: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){
                                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:89291:7: style:inconclusive: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'. [funcArgNamesDifferent]
  int nData,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:4892:71: note: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'.
SQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));
                                                                      ^
src/3rdparty/sqlite3/src/sqlite3.c:89291:7: note: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'.
  int nData,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:89374:17: style:inconclusive: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'. [funcArgNamesDifferent]
  unsigned char enc
                ^
src/3rdparty/sqlite3/src/sqlite3.c:4902:56: note: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'.
                         void(*)(void*), unsigned char encoding);
                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:89374:17: note: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'.
  unsigned char enc
                ^
src/3rdparty/sqlite3/src/sqlite3.c:89600:69: style:inconclusive: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){
                                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:8883:62: note: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:89600:69: note: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){
                                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:99257:7: style:inconclusive: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'. [funcArgNamesDifferent]
  int wrFlag,             /* True -> read/write access, false -> read-only */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:7857:7: note: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'.
  int flags,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:99257:7: note: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'.
  int wrFlag,             /* True -> read/write access, false -> read-only */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:99582:61: style:inconclusive: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:7952:56: note: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:99582:61: note: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:99582:68: style:inconclusive: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:7952:63: note: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:99582:68: note: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:109682:56: style:inconclusive: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'. [funcArgNamesDifferent]
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){
                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:105733:56: note: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'.
static int exprCodeVector(Parse *pParse, Expr *p, int *piToFree);
                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:109682:56: note: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'.
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){
                                                       ^
src/3rdparty/sqlite3/src/sqlite3.c:116524:57: style:inconclusive: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){
                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:20685:53: note: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'.
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3*,int iDB);
                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:116524:57: note: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'.
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){
                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:117290:9: style:inconclusive: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'. [funcArgNamesDifferent]
  void *pArg
        ^
src/3rdparty/sqlite3/src/sqlite3.c:3465:9: note: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'.
  void *pUserData
        ^
src/3rdparty/sqlite3/src/sqlite3.c:117290:9: note: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'.
  void *pArg
        ^
src/3rdparty/sqlite3/src/sqlite3.c:125569:44: style:inconclusive: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:9544:44: note: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'.
SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);
                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:125569:44: note: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'.
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:125569:70: style:inconclusive: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:9544:63: note: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'.
SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:125569:70: note: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'.
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                                                     ^
src/3rdparty/sqlite3/src/sqlite3.c:125583:44: style:inconclusive: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:9567:44: note: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'.
SQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);
                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:125583:44: note: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'.
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:125583:85: style:inconclusive: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:9567:82: note: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'.
SQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);
                                                                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:125583:85: note: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'.
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:131920:15: style:inconclusive: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
  const char *zSql,           /* The SQL to be executed */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:733:15: note: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'.
  const char *sql,                           /* SQL to be evaluated */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:131920:15: note: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'.
  const char *zSql,           /* The SQL to be executed */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:131923:10: style:inconclusive: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'. [funcArgNamesDifferent]
  char **pzErrMsg             /* Write error messages here */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:736:10: note: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'.
  char **errmsg                              /* Error msg written here */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:131923:10: note: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'.
  char **pzErrMsg             /* Write error messages here */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:138120:7: style:inconclusive: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:4523:7: note: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138120:7: note: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138132:7: style:inconclusive: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:4530:7: note: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138132:7: note: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138150:7: style:inconclusive: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:4537:7: note: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138150:7: note: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138236:7: style:inconclusive: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:4545:7: note: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138236:7: note: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138248:7: style:inconclusive: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:4552:7: note: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138248:7: note: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138260:7: style:inconclusive: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:4559:7: note: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:138260:7: note: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:146621:10: style:inconclusive: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'. [funcArgNamesDifferent]
  char **pzErrMsg             /* Write error messages here */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:3193:10: note: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'.
  char **pzErrmsg       /* Error msg written here */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:146621:10: note: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'.
  char **pzErrMsg             /* Write error messages here */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:146685:10: style:inconclusive: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'. [funcArgNamesDifferent]
  char **azResult            /* Result returned from sqlite3_get_table() */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:3195:43: note: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'.
SQLITE_API void sqlite3_free_table(char **result);
                                          ^
src/3rdparty/sqlite3/src/sqlite3.c:146685:10: note: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'.
  char **azResult            /* Result returned from sqlite3_get_table() */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:149379:9: style:inconclusive: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'. [funcArgNamesDifferent]
  Expr *pRowid,        /* Expression used to recompute the rowid */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:148203:9: note: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'.
  Expr *pRowidExpr,    /* Expression used to recompute the rowid */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:149379:9: note: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'.
  Expr *pRowid,        /* Expression used to recompute the rowid */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:150387:25: style:inconclusive: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'. [funcArgNamesDifferent]
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:7650:25: note: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *p,   /* Methods for the module */
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:150387:25: note: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:150388:9: style:inconclusive: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'. [funcArgNamesDifferent]
  void *pAux                      /* Context pointer for xCreate/xConnect */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:7651:9: note: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pClientData          /* Client data for xCreate/xConnect */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:150388:9: note: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pAux                      /* Context pointer for xCreate/xConnect */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:150402:25: style:inconclusive: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'. [funcArgNamesDifferent]
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:7656:25: note: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *p,   /* Methods for the module */
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:150402:25: note: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:150403:9: style:inconclusive: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'. [funcArgNamesDifferent]
  void *pAux,                     /* Context pointer for xCreate/xConnect */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:7657:9: note: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pClientData,         /* Client data for xCreate/xConnect */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:150403:9: note: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pAux,                     /* Context pointer for xCreate/xConnect */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:150416:63: style:inconclusive: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_drop_modules(sqlite3 *db, const char** azNames){
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:7675:16: note: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'.
  const char **azKeep         /* Except, do not remove the ones named here */
               ^
src/3rdparty/sqlite3/src/sqlite3.c:150416:63: note: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'.
SQLITE_API int sqlite3_drop_modules(sqlite3 *db, const char** azNames){
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:151085:62: style:inconclusive: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:7733:59: note: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'.
SQLITE_API int sqlite3_declare_vtab(sqlite3*, const char *zSQL);
                                                          ^
src/3rdparty/sqlite3/src/sqlite3.c:151085:62: note: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'.
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){
                                                             ^
src/3rdparty/sqlite3/src/sqlite3.c:173708:45: style:inconclusive: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_complete(const char *zSql){
                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:3027:45: note: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete(const char *sql);
                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:173708:45: note: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete(const char *zSql){
                                            ^
src/3rdparty/sqlite3/src/sqlite3.c:173873:47: style:inconclusive: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_complete16(const void *zSql){
                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:3028:47: note: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete16(const void *sql);
                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:173873:47: note: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete16(const void *zSql){
                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:176009:15: style:inconclusive: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:5654:15: note: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:176009:15: note: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:176011:7: style:inconclusive: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:5656:7: note: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:176011:7: note: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:176012:9: style:inconclusive: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:5657:9: note: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176012:9: note: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176022:15: style:inconclusive: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:5674:15: note: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:176022:15: note: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:176024:7: style:inconclusive: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:5676:7: note: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:176024:7: note: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:176025:9: style:inconclusive: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:5677:9: note: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176025:9: note: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176036:15: style:inconclusive: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:5685:15: note: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:176036:15: note: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:176038:7: style:inconclusive: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:5687:7: note: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:176038:7: note: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:176039:9: style:inconclusive: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:5688:9: note: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176039:9: note: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176056:9: style:inconclusive: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:5667:9: note: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176056:9: note: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176115:15: style:inconclusive: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'. [funcArgNamesDifferent]
  const char *zName,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:7752:64: note: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'.
SQLITE_API int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);
                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:176115:15: note: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'.
  const char *zName,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:176169:12: style:inconclusive: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'. [funcArgNamesDifferent]
  unsigned mTrace,                           /* Mask of events to be traced */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:3663:12: note: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'.
  unsigned uMask,
           ^
src/3rdparty/sqlite3/src/sqlite3.c:176169:12: note: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'.
  unsigned mTrace,                           /* Mask of events to be traced */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:176171:9: style:inconclusive: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'. [funcArgNamesDifferent]
  void *pArg                                 /* Context */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:3665:9: note: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'.
  void *pCtx
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176171:9: note: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'.
  void *pArg                                 /* Context */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:176380:60: style:inconclusive: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:9662:60: note: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'.
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:176380:60: note: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'.
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:176844:47: style:inconclusive: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:4310:44: note: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'.
SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:176844:47: note: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'.
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:176844:60: style:inconclusive: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:4310:52: note: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'.
SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:176844:60: note: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'.
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                                           ^
src/3rdparty/sqlite3/src/sqlite3.c:177526:15: style:inconclusive: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'. [funcArgNamesDifferent]
  const char *zFilename,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:3988:15: note: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const char *filename,   /* Database filename (UTF-8) */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:177526:15: note: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const char *zFilename,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:177546:15: style:inconclusive: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'. [funcArgNamesDifferent]
  const void *zFilename,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:3992:15: note: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const void *filename,   /* Database filename (UTF-16) */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:177546:15: note: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const void *zFilename,
              ^
src/3rdparty/sqlite3/src/sqlite3.c:177587:7: style:inconclusive: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:6426:7: note: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:177587:7: note: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:177588:9: style:inconclusive: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:6427:9: note: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:177588:9: note: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:177600:7: style:inconclusive: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:6433:7: note: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:177600:7: note: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:177601:9: style:inconclusive: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:6434:9: note: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:177601:9: note: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:177625:7: style:inconclusive: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:6441:7: note: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:177625:7: note: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
src/3rdparty/sqlite3/src/sqlite3.c:177626:9: style:inconclusive: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:6442:9: note: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:177626:9: note: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:178579:58: style:inconclusive: Function 'sqlite3_uri_parameter' argument 1 names different: declaration 'z' definition 'zFilename'. [funcArgNamesDifferent]
SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){
                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:4068:63: note: Function 'sqlite3_uri_parameter' argument 1 names different: declaration 'z' definition 'zFilename'.
SQLITE_API const char *sqlite3_uri_parameter(sqlite3_filename z, const char *zParam);
                                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:178579:58: note: Function 'sqlite3_uri_parameter' argument 1 names different: declaration 'z' definition 'zFilename'.
SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){
                                                         ^
src/3rdparty/sqlite3/src/sqlite3.c:178588:52: style:inconclusive: Function 'sqlite3_uri_key' argument 1 names different: declaration 'z' definition 'zFilename'. [funcArgNamesDifferent]
SQLITE_API const char *sqlite3_uri_key(const char *zFilename, int N){
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:4071:57: note: Function 'sqlite3_uri_key' argument 1 names different: declaration 'z' definition 'zFilename'.
SQLITE_API const char *sqlite3_uri_key(sqlite3_filename z, int N);
                                                        ^
src/3rdparty/sqlite3/src/sqlite3.c:178588:52: note: Function 'sqlite3_uri_key' argument 1 names different: declaration 'z' definition 'zFilename'.
SQLITE_API const char *sqlite3_uri_key(const char *zFilename, int N){
                                                   ^
src/3rdparty/sqlite3/src/sqlite3.c:178602:48: style:inconclusive: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'z' definition 'zFilename'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:4069:53: note: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'z' definition 'zFilename'.
SQLITE_API int sqlite3_uri_boolean(sqlite3_filename z, const char *zParam, int bDefault);
                                                    ^
src/3rdparty/sqlite3/src/sqlite3.c:178602:48: note: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'z' definition 'zFilename'.
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:178602:83: style:inconclusive: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:4069:80: note: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'.
SQLITE_API int sqlite3_uri_boolean(sqlite3_filename z, const char *zParam, int bDefault);
                                                                               ^
src/3rdparty/sqlite3/src/sqlite3.c:178602:83: note: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'.
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                                                                  ^
src/3rdparty/sqlite3/src/sqlite3.c:119685:10: warning: Size of pointer 'zExtra' used instead of size of its data. [pointerSize]
  memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);
         ^
src/3rdparty/sqlite3/src/sqlite3.c:162811:16: warning: Expression 'nTabList-1' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation. [signConversionCond]
  nByteWInfo = ROUND8P(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
               ^
src/3rdparty/sqlite3/src/sqlite3.c:162858:15: note: Assuming that condition 'nTabList==0' is not redundant
  if( nTabList==0 ){
              ^
src/3rdparty/sqlite3/src/sqlite3.c:162811:16: note: Negative value is converted to an unsigned value
  nByteWInfo = ROUND8P(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
               ^
src/3rdparty/sqlite3/src/sqlite3.c:10911:9: style: struct member 'sqlite3_rtree_geometry::pContext' is never used. [unusedStructMember]
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:10913:22: style: struct member 'sqlite3_rtree_geometry::aParam' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:10915:10: style: struct member 'sqlite3_rtree_geometry::xDelUser' is never used. [unusedStructMember]
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:10943:9: style: struct member 'sqlite3_rtree_query_info::pContext' is never used. [unusedStructMember]
  void *pContext;                   /* pContext from when function registered */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:10945:22: style: struct member 'sqlite3_rtree_query_info::aParam' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:10947:10: style: struct member 'sqlite3_rtree_query_info::xDelUser' is never used. [unusedStructMember]
  void (*xDelUser)(void*);          /* function to free pUser */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:10948:22: style: struct member 'sqlite3_rtree_query_info::aCoord' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:10949:17: style: struct member 'sqlite3_rtree_query_info::anQueue' is never used. [unusedStructMember]
  unsigned int *anQueue;            /* Number of pending entries in the queue */
                ^
src/3rdparty/sqlite3/src/sqlite3.c:10950:7: style: struct member 'sqlite3_rtree_query_info::nCoord' is never used. [unusedStructMember]
  int nCoord;                       /* Number of coordinates */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:10951:7: style: struct member 'sqlite3_rtree_query_info::iLevel' is never used. [unusedStructMember]
  int iLevel;                       /* Level of current node or entry */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:10952:7: style: struct member 'sqlite3_rtree_query_info::mxLevel' is never used. [unusedStructMember]
  int mxLevel;                      /* The largest iLevel value in the tree */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:10954:21: style: struct member 'sqlite3_rtree_query_info::rParentScore' is never used. [unusedStructMember]
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:10955:7: style: struct member 'sqlite3_rtree_query_info::eParentWithin' is never used. [unusedStructMember]
  int eParentWithin;                /* Visibility of parent node */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:10956:7: style: struct member 'sqlite3_rtree_query_info::eWithin' is never used. [unusedStructMember]
  int eWithin;                      /* OUT: Visibility */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:10957:21: style: struct member 'sqlite3_rtree_query_info::rScore' is never used. [unusedStructMember]
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:10959:19: style: struct member 'sqlite3_rtree_query_info::apSqlParam' is never used. [unusedStructMember]
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:12967:11: style: struct member 'Fts5ExtensionApi::xUserData' is never used. [unusedStructMember]
  void *(*xUserData)(Fts5Context*);
          ^
src/3rdparty/sqlite3/src/sqlite3.c:12969:9: style: struct member 'Fts5ExtensionApi::xColumnCount' is never used. [unusedStructMember]
  int (*xColumnCount)(Fts5Context*);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12970:9: style: struct member 'Fts5ExtensionApi::xRowCount' is never used. [unusedStructMember]
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12971:9: style: struct member 'Fts5ExtensionApi::xColumnTotalSize' is never used. [unusedStructMember]
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12973:9: style: struct member 'Fts5ExtensionApi::xTokenize' is never used. [unusedStructMember]
  int (*xTokenize)(Fts5Context*,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12979:9: style: struct member 'Fts5ExtensionApi::xPhraseCount' is never used. [unusedStructMember]
  int (*xPhraseCount)(Fts5Context*);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12980:9: style: struct member 'Fts5ExtensionApi::xPhraseSize' is never used. [unusedStructMember]
  int (*xPhraseSize)(Fts5Context*, int iPhrase);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12982:9: style: struct member 'Fts5ExtensionApi::xInstCount' is never used. [unusedStructMember]
  int (*xInstCount)(Fts5Context*, int *pnInst);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12983:9: style: struct member 'Fts5ExtensionApi::xInst' is never used. [unusedStructMember]
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12986:9: style: struct member 'Fts5ExtensionApi::xColumnText' is never used. [unusedStructMember]
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12987:9: style: struct member 'Fts5ExtensionApi::xColumnSize' is never used. [unusedStructMember]
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12989:9: style: struct member 'Fts5ExtensionApi::xQueryPhrase' is never used. [unusedStructMember]
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12992:9: style: struct member 'Fts5ExtensionApi::xSetAuxdata' is never used. [unusedStructMember]
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12993:11: style: struct member 'Fts5ExtensionApi::xGetAuxdata' is never used. [unusedStructMember]
  void *(*xGetAuxdata)(Fts5Context*, int bClear);
          ^
src/3rdparty/sqlite3/src/sqlite3.c:12995:9: style: struct member 'Fts5ExtensionApi::xPhraseFirst' is never used. [unusedStructMember]
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12996:10: style: struct member 'Fts5ExtensionApi::xPhraseNext' is never used. [unusedStructMember]
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);
         ^
src/3rdparty/sqlite3/src/sqlite3.c:12998:9: style: struct member 'Fts5ExtensionApi::xPhraseFirstColumn' is never used. [unusedStructMember]
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);
        ^
src/3rdparty/sqlite3/src/sqlite3.c:12999:10: style: struct member 'Fts5ExtensionApi::xPhraseNextColumn' is never used. [unusedStructMember]
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);
         ^
src/3rdparty/sqlite3/src/sqlite3.c:13203:9: style: struct member 'fts5_tokenizer::xTokenize' is never used. [unusedStructMember]
  int (*xTokenize)(Fts5Tokenizer*,
        ^
src/3rdparty/sqlite3/src/sqlite3.c:13240:9: style: struct member 'fts5_api::xCreateTokenizer' is never used. [unusedStructMember]
  int (*xCreateTokenizer)(
        ^
src/3rdparty/sqlite3/src/sqlite3.c:13249:9: style: struct member 'fts5_api::xFindTokenizer' is never used. [unusedStructMember]
  int (*xFindTokenizer)(
        ^
src/3rdparty/sqlite3/src/sqlite3.c:13257:9: style: struct member 'fts5_api::xCreateFunction' is never used. [unusedStructMember]
  int (*xCreateFunction)(
        ^
src/3rdparty/sqlite3/src/sqlite3.c:17170:12: style: union member 'Anonymous1::notUsed1' is never used. [unusedStructMember]
    double notUsed1;            /* Spacer */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:18227:12: style: struct member 'IndexSample::anLt' is never used. [unusedStructMember]
  tRowcnt *anLt;    /* Est. number of rows where key is less than this sample */
           ^
src/3rdparty/sqlite3/src/sqlite3.c:18596:16: style: struct member 'Anonymous13::bSorterRef' is never used. [unusedStructMember]
      unsigned bSorterRef :1; /* Defer evaluation until after sorting */
               ^
src/3rdparty/sqlite3/src/sqlite3.c:19571:7: style: struct member 'Sqlite3Config::mxStrlen' is never used. [unusedStructMember]
  int mxStrlen;                     /* Maximum string length */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:19579:9: style: struct member 'Sqlite3Config::pHeap' is never used. [unusedStructMember]
  void *pHeap;                      /* Heap storage space */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:19580:7: style: struct member 'Sqlite3Config::nHeap' is never used. [unusedStructMember]
  int nHeap;                        /* Size of pHeap[] */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:19581:7: style: struct member 'Sqlite3Config::mnReq' is never used. [unusedStructMember]
  int mnReq, mxReq;                 /* Min and max heap requests sizes */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:19581:14: style: struct member 'Sqlite3Config::mxReq' is never used. [unusedStructMember]
  int mnReq, mxReq;                 /* Min and max heap requests sizes */
             ^
src/3rdparty/sqlite3/src/sqlite3.c:19587:7: style: struct member 'Sqlite3Config::mxParserStack' is never used. [unusedStructMember]
  int mxParserStack;                /* maximum depth of the parser stack */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:19621:7: style: struct member 'Sqlite3Config::szSorterRef' is never used. [unusedStructMember]
  u32 szSorterRef;                  /* Min size in bytes to use sorter-refs */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:19662:22: style: union member 'Anonymous23::pCCurHint' is never used. [unusedStructMember]
    struct CCurHint *pCCurHint;               /* Used by codeCursorHint() */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:22795:7: style: struct member 'ScanStatus::aAddrRange' is never used. [unusedStructMember]
  int aAddrRange[6];
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22796:7: style: struct member 'ScanStatus::addrLoop' is never used. [unusedStructMember]
  int addrLoop;                   /* Address of "loops" counter */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22797:7: style: struct member 'ScanStatus::addrVisit' is never used. [unusedStructMember]
  int addrVisit;                  /* Address of "rows visited" counter */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22798:7: style: struct member 'ScanStatus::iSelectID' is never used. [unusedStructMember]
  int iSelectID;                  /* The "Select-ID" for this loop */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22812:16: style: struct member 'DblquoteStr::pNextStr' is never used. [unusedStructMember]
  DblquoteStr *pNextStr;   /* Next string literal in the list */
               ^
src/3rdparty/sqlite3/src/sqlite3.c:22909:7: style: struct member 'PreUpdate::aRecord' is never used. [unusedStructMember]
  u8 *aRecord;                    /* old.* database record */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22912:19: style: struct member 'PreUpdate::pNewUnpacked' is never used. [unusedStructMember]
  UnpackedRecord *pNewUnpacked;   /* Unpacked version of new.* record */
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:22913:7: style: struct member 'PreUpdate::iNewReg' is never used. [unusedStructMember]
  int iNewReg;                    /* Register for new.* values */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22914:7: style: struct member 'PreUpdate::iBlobWrite' is never used. [unusedStructMember]
  int iBlobWrite;                 /* Value returned by preupdate_blobwrite() */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22915:7: style: struct member 'PreUpdate::iKey1' is never used. [unusedStructMember]
  i64 iKey1;                      /* First key value passed to hook */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22916:7: style: struct member 'PreUpdate::iKey2' is never used. [unusedStructMember]
  i64 iKey2;                      /* Second key value passed to hook */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:22917:8: style: struct member 'PreUpdate::aNew' is never used. [unusedStructMember]
  Mem *aNew;                      /* Array of new.* values */
       ^
src/3rdparty/sqlite3/src/sqlite3.c:22919:10: style: struct member 'PreUpdate::pPk' is never used. [unusedStructMember]
  Index *pPk;                     /* PK index if pTab is WITHOUT ROWID */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:37872:9: style: struct member 'vxworksFileId::zCanonicalName' is never used. [unusedStructMember]
  char *zCanonicalName;         /* Canonical filename */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:40866:18: style: Variable 'nWrite' is assigned a value that is never used. [unreadVariable]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:60961:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:69259:13: style: Variable 'pIdxKey' is assigned a value that is never used. [unreadVariable]
    pIdxKey = 0;
            ^
src/3rdparty/sqlite3/src/sqlite3.c:73884:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:79922:15: style: Variable 'pgszSrc' is assigned a value that is never used. [unreadVariable]
  int pgszSrc = 0;    /* Source page size */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:79923:16: style: Variable 'pgszDest' is assigned a value that is never used. [unreadVariable]
  int pgszDest = 0;   /* Destination page size */
               ^
src/3rdparty/sqlite3/src/sqlite3.c:85404:12: style: Variable 'zSuper' is assigned a value that is never used. [unreadVariable]
    zSuper = 0;
           ^
src/3rdparty/sqlite3/src/sqlite3.c:101767:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;             /* Return code */
         ^
src/3rdparty/sqlite3/src/sqlite3.c:103637:10: style: Variable 'pDup' is assigned a value that is never used. [unreadVariable]
    pDup = 0;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:139054:9: style: Variable 'pOp' is assigned a value that is never used. [unreadVariable]
    pOp = 0; /* Ensure pOp not used after sqltie3VdbeAddOp3() */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:140739:11: style: Variable 'v' is assigned a value that is never used. [unreadVariable]
  Vdbe *v = 0;
          ^
src/3rdparty/sqlite3/src/sqlite3.c:140740:14: style: Variable 'iLimit' is assigned a value that is never used. [unreadVariable]
  int iLimit = 0;
             ^
src/3rdparty/sqlite3/src/sqlite3.c:147860:15: style: Variable 'pWhen' is assigned a value that is never used. [unreadVariable]
  Expr *pWhen = 0;            /* Duplicate of trigger WHEN expression */
              ^
src/3rdparty/sqlite3/src/sqlite3.c:173318:9: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
  int n = 0;                      /* Length of the next token token */
        ^
src/3rdparty/sqlite3/src/sqlite3.c:201321:21: style: Variable 'zRoot' is assigned a value that is never used. [unreadVariable]
  const char *zRoot = 0;
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:40355:0: information: Skipping configuration 'EDEVERR' since the value of 'EDEVERR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      case EDEVERR:
^
src/3rdparty/sqlite3/src/sqlite3.c:37645:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if( errno==EINTR ) continue;
^
src/3rdparty/sqlite3/src/sqlite3.c:37812:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  do{ rc = osFtruncate(h,sz); }while( rc<0 && errno==EINTR );
^
src/3rdparty/sqlite3/src/sqlite3.c:37836:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case EINTR:
^
src/3rdparty/sqlite3/src/sqlite3.c:40277:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if( errno==EINTR ){ got = 1; continue; }
^
src/3rdparty/sqlite3/src/sqlite3.c:40403:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  }while( rc<0 && errno==EINTR );
^
src/3rdparty/sqlite3/src/sqlite3.c:43622:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      do{ got = osRead(fd, zBuf, nBuf); }while( got<0 && errno==EINTR );
^
src/3rdparty/sqlite3/src/sqlite3.c:40352:0: information: Skipping configuration 'ENXIO' since the value of 'ENXIO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      case ENXIO:
^
src/3rdparty/sqlite3/src/sqlite3.c:38344:0: information: Skipping configuration 'EOVERFLOW;SQLITE_DISABLE_LFS' since the value of 'EOVERFLOW' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( pFile->lastErrno==EOVERFLOW ) return SQLITE_NOLFS;
^
src/3rdparty/sqlite3/src/sqlite3.c:37640:0: information: Skipping configuration 'FD_CLOEXEC;O_CLOEXEC' since the value of 'O_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    fd = osOpen(z,f|O_CLOEXEC,m2);
^
src/3rdparty/sqlite3/src/sqlite3.c:40604:0: information: Skipping configuration 'F_FULLFSYNC' since the value of 'F_FULLFSYNC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    rc = osFcntl(fd, F_FULLFSYNC, 0);
^
src/3rdparty/sqlite3/src/sqlite3.c:123802:7: error: Null pointer dereference: (VTable*)0 [nullPointer]
  if( sqlite3GetVTable(pParse->db, pTab)->pMod->pModule->xUpdate==0 ){
      ^
src/3rdparty/sqlite3/src/sqlite3.c:10953:17: style: struct member 'sqlite3_rtree_query_info::iRowid' is never used. [unusedStructMember]
  sqlite3_int64 iRowid;             /* Rowid for current entry */
                ^
src/3rdparty/sqlite3/src/sqlite3.c:12985:19: style: struct member 'Fts5ExtensionApi::xRowid' is never used. [unusedStructMember]
  sqlite3_int64 (*xRowid)(Fts5Context*);
                  ^
src/3rdparty/sqlite3/src/sqlite3.c:15961:13: style: union member 'p4union::pVtab' is never used. [unusedStructMember]
    VTable *pVtab;         /* Used when p4type is P4_VTAB */
            ^
src/3rdparty/sqlite3/src/sqlite3.c:17846:11: style: struct member 'Anonymous4::addColOffset' is never used. [unusedStructMember]
      int addColOffset;    /* Offset in CREATE TABLE stmt to add a new column */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:17856:14: style: struct member 'Anonymous6::azArg' is never used. [unusedStructMember]
      char **azArg;        /* 0: module 1: schema 2: vtab name 3...: args */
             ^
src/3rdparty/sqlite3/src/sqlite3.c:19670:23: style: union member 'Anonymous23::pRename' is never used. [unusedStructMember]
    struct RenameCtx *pRename;                /* RENAME COLUMN context */
                      ^
src/3rdparty/sqlite3/src/sqlite3.c:22508:26: style: union member 'Anonymous25::pVCur' is never used. [unusedStructMember]
    sqlite3_vtab_cursor *pVCur; /* CURTYPE_VTAB.              Vtab cursor */
                         ^
src/3rdparty/sqlite3/src/sqlite3.c:151796:11: style: struct member 'Anonymous38::idxNum' is never used. [unusedStructMember]
      int idxNum;            /* Index number */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:151798:11: style: struct member 'Anonymous38::bOmitOffset' is never used. [unusedStructMember]
      u32 bOmitOffset : 1;   /* True to let virtual table handle offset */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:151800:11: style: struct member 'Anonymous38::omitMask' is never used. [unusedStructMember]
      u16 omitMask;          /* Terms that may be omitted */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:151802:11: style: struct member 'Anonymous38::mHandleIn' is never used. [unusedStructMember]
      u32 mHandleIn;         /* Terms to handle as IN(...) instead of == */
          ^
src/3rdparty/sqlite3/src/sqlite3.c:156970:7: style: struct member 'HiddenIndexInfo::mIn' is never used. [unusedStructMember]
  u32 mIn;                 /* Mask of terms that are <col> IN (...) */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:156971:7: style: struct member 'HiddenIndexInfo::mHandleIn' is never used. [unusedStructMember]
  u32 mHandleIn;           /* Terms that vtab will handle as <col> IN (...) */
      ^
src/3rdparty/sqlite3/src/sqlite3.c:96166:17: style: Unused variable: pVtab [unusedVariable]
  sqlite3_vtab *pVtab;
                ^
src/3rdparty/sqlite3/src/sqlite3.c:96167:25: style: Unused variable: pModule [unusedVariable]
  const sqlite3_module *pModule;
                        ^
src/3rdparty/sqlite3/src/sqlite3.c:103433:18: style: Variable 'pParse' is assigned a value that is never used. [unreadVariable]
     || ((pParse = pWalker->pParse)!=0 && IN_RENAME_OBJECT)
                 ^
src/3rdparty/sqlite3/src/sqlite3.c:156140:22: style: Variable 'eOp2' is assigned a value that is never used. [unreadVariable]
  unsigned char eOp2 = 0;          /* op2 value for LIKE/REGEXP/GLOB */
                     ^
src/3rdparty/sqlite3/src/sqlite3.c:40624:0: information: Skipping configuration 'HAVE_FDATASYNC=0;fdatasync' since the value of 'fdatasync' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = fdatasync(fd);
^
src/eu_about.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_about.c:3388:28: error: There is an unknown macro here somewhere. Configuration is required. If TEXT is a macro then please configure it. [unknownMacro]
                           __EU_INFO_RELEASE,
                           ^
src/eu_api.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_api.c:1022:31: error: syntax error [syntaxError]
           || STRICMP(encoding, ==, "euc-jp")
                              ^
src/eu_api.c:2148:5: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
    pcre_info = NULL;
    ^
src/eu_api.c:564:29: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
                            return -1;
                            ^
src/eu_api.c:413:8: style: Redundant initialization for 'cd'. The initialized value is overwritten before it is read. [redundantInitialization]
    cd = eu_iconv_open(dst_desc, from_desc);
       ^
src/eu_api.c:407:16: note: cd is initialized
    iconv_t cd = (iconv_t)-1;
               ^
src/eu_api.c:413:8: note: cd is overwritten
    cd = eu_iconv_open(dst_desc, from_desc);
       ^
src/eu_list.h:583:23: style: The scope of the variable 'first' can be reduced. [variableScope]
    struct list_head *first;
                      ^
src/eu_api.c:463:13: style: The scope of the variable 'ch1' can be reduced. [variableScope]
    uint8_t ch1, ch2;
            ^
src/eu_api.c:463:18: style: The scope of the variable 'ch2' can be reduced. [variableScope]
    uint8_t ch1, ch2;
                 ^
src/eu_api.c:898:14: style: The scope of the variable 'dw_creat' can be reduced. [variableScope]
    uint32_t dw_creat = 0;
             ^
src/eu_api.c:1598:13: style: The scope of the variable 'offset' can be reduced. [variableScope]
        int offset = 0;
            ^
src/eu_api.c:795:34: style: Unsigned expression 'i-1' can't be negative so it is unnecessary to test it. [unsignedPositive]
                bool pre = i - 1 >= 0?!eu_availed_char(str[i-1]):true;
                                 ^
src/eu_api.c:2033:33: style:inconclusive: Function 'eu_init_calltip_tree' argument 1 names different: declaration 'root' definition 'p'. [funcArgNamesDifferent]
eu_init_calltip_tree(doctype_t *p, const char *key, const char *val)
                                ^
src/eu_api.h:560:51: note: Function 'eu_init_calltip_tree' argument 1 names different: declaration 'root' definition 'p'.
EU_EXT_CLASS bool eu_init_calltip_tree(doctype_t *root, const char *key, const char *val);
                                                  ^
src/eu_api.c:2033:33: note: Function 'eu_init_calltip_tree' argument 1 names different: declaration 'root' definition 'p'.
eu_init_calltip_tree(doctype_t *p, const char *key, const char *val)
                                ^
src/eu_api.c:2075:35: style:inconclusive: Function 'eu_init_completed_tree' argument 1 names different: declaration 'root' definition 'p'. [funcArgNamesDifferent]
eu_init_completed_tree(doctype_t *p, const char *str)
                                  ^
src/eu_api.h:564:53: note: Function 'eu_init_completed_tree' argument 1 names different: declaration 'root' definition 'p'.
EU_EXT_CLASS bool eu_init_completed_tree(doctype_t *root, const char *str);
                                                    ^
src/eu_api.c:2075:35: note: Function 'eu_init_completed_tree' argument 1 names different: declaration 'root' definition 'p'.
eu_init_completed_tree(doctype_t *p, const char *str)
                                  ^
src/eu_changes.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_changes.c:629:17: style: The scope of the variable 'w' can be reduced. [variableScope]
            int w, h;
                ^
src/eu_changes.c:629:20: style: The scope of the variable 'h' can be reduced. [variableScope]
            int w, h;
                   ^
src/eu_changes.c:830:14: style: The scope of the variable 'i' can be reduced. [variableScope]
    uint32_t i;
             ^
src/eu_changes.c:467:28: error: Uninitialized variable: ptr [uninitvar]
            memcpy(buffer, ptr, len * sizeof(WCHAR));
                           ^
src/eu_changes.c:446:9: note: Assuming condition is false
    if (!(g_skylark_lang || i18n_reload_lang()))
        ^
src/eu_changes.c:467:28: note: Uninitialized variable: ptr
            memcpy(buffer, ptr, len * sizeof(WCHAR));
                           ^
src/eu_changes.c:480:28: error: Uninitialized variable: ptr [uninitvar]
            memcpy(buffer, ptr, len * sizeof(WCHAR));
                           ^
src/eu_changes.c:446:9: note: Assuming condition is false
    if (!(g_skylark_lang || i18n_reload_lang()))
        ^
src/eu_changes.c:480:28: note: Uninitialized variable: ptr
            memcpy(buffer, ptr, len * sizeof(WCHAR));
                           ^
src/eu_code.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_complete.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_complete.c:286:5: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
    in = in_ptr;
    ^
src/eu_complete.c:828:21: error: The address of local variable 'v' is accessed at non-zero index. [objectIndex]
    if (it && pv && cvector_size(*pv) > 0)
                    ^
src/eu_complete.c:982:52: note: Address of variable taken here.
                on_complete_sort_update(pnode, it, &v, offset, oit->index);
                                                   ^
src/eu_complete.c:982:52: note: Calling function 'on_complete_sort_update', 3rd argument '&v' value is lifetime=v
                on_complete_sort_update(pnode, it, &v, offset, oit->index);
                                                   ^
src/eu_complete.c:828:21: note: The address of local variable 'v' is accessed at non-zero index.
    if (it && pv && cvector_size(*pv) > 0)
                    ^
src/eu_complete.c:1309:16: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
            if ((ret = count >= 0 && key[0] && str))
               ^
src/eu_complete.c:1244:13: style: Condition 'it' is always false [knownConditionTrueFalse]
        if (it)
            ^
src/eu_complete.c:1233:26: note: Assignment 'it=NULL', assigned value is 0
        complete_t *it = NULL;
                         ^
src/eu_complete.c:1234:13: note: Assuming condition is false
        if (!on_complete_update_postion(pnode, &oit, true))
            ^
src/eu_complete.c:1244:13: note: Condition 'it' is always false
        if (it)
            ^
src/eu_complete.c:1311:21: style: Condition 'ret' is always true [knownConditionTrueFalse]
                if (ret)
                    ^
src/eu_complete.c:1309:22: note: Assuming that condition 'ret=count>=0&&key[0]&&str' is not redundant
            if ((ret = count >= 0 && key[0] && str))
                     ^
src/eu_complete.c:1311:21: note: Condition 'ret' is always true
                if (ret)
                    ^
src/eu_complete.c:879:33: style: Variable 'msub' is reassigned a value before the old one has been used. [redundantAssignment]
        if (it != pvec && (msub = on_complete_var_embed(pnode, it, pvec->index, &oit)) && oit)
                                ^
src/eu_complete.c:866:18: note: msub is assigned
            msub = false;
                 ^
src/eu_complete.c:879:33: note: msub is overwritten
        if (it != pvec && (msub = on_complete_var_embed(pnode, it, pvec->index, &oit)) && oit)
                                ^
src/eu_complete.c:859:10: style: The scope of the variable 'msub' can be reduced. [variableScope]
    bool msub = false;
         ^
src/eu_complete.c:1188:22: style: The scope of the variable 'word_buffer' can be reduced. [variableScope]
                char word_buffer[MAX_SIZE+1];
                     ^
src/eu_complete.c:167:9: style: Unsigned expression 'i_' can't be negative so it is unnecessary to test it. [unsignedPositive]
        cvector_for_each_and_cmp(pnode->doc_ptr->ptrv, on_complete_str_match, key, &it);
        ^
src/eu_complete.c:217:13: style: Unsigned expression 'i_' can't be negative so it is unnecessary to test it. [unsignedPositive]
            cvector_for_each_and_cmp(pvec, on_complete_char_cmp, p[1], &oit);
            ^
src/eu_complete.c:558:13: style: Unsigned expression 'i_' can't be negative so it is unnecessary to test it. [unsignedPositive]
            cvector_for_each_and_cmp(pnode->ac_vec, on_complete_char_cmp, UTIL_BASE10(p[1]) ? p[1] : p[2], &oit);
            ^
src/eu_complete.c:604:9: style: Unsigned expression 'i_' can't be negative so it is unnecessary to test it. [unsignedPositive]
        cvector_for_each_and_cmp(pnode->ac_vec, on_complete_char_cmp, UTIL_BASE10(p[1]) ? p[1] : p[2], &oit);
        ^
src/eu_complete.c:717:25: style: Unsigned expression 'i_' can't be negative so it is unnecessary to test it. [unsignedPositive]
                        cvector_for_each_and_cmp(pnode->re_group, on_complete_group_cmp, p[1], &cit);
                        ^
src/eu_complete.c:808:9: style: Unsigned expression 'i_' can't be negative so it is unnecessary to test it. [unsignedPositive]
        cvector_for_each_and_cmp(pnode->ac_vec, on_complete_char_cmp, ch, &oit);
        ^
src/eu_complete.c:1039:9: style: Unsigned expression 'i_' can't be negative so it is unnecessary to test it. [unsignedPositive]
        cvector_for_each_and_cmp(pnode->doc_ptr->ptrv, on_complete_str_match, key, &it);
        ^
src/eu_complete.c:394:73: style:inconclusive: Function 'on_complete_pcre_match' argument 3 names different: declaration 'pattern' definition 'exp'. [funcArgNamesDifferent]
on_complete_pcre_match(eu_tabpage *pnode, const char *pstr, const char *exp, ptr_re_callback fn)
                                                                        ^
src/eu_complete.c:39:84: note: Function 'on_complete_pcre_match' argument 3 names different: declaration 'pattern' definition 'exp'.
static int on_complete_pcre_match(eu_tabpage *pnode, const char *pstr, const char *pattern, ptr_re_callback fn);
                                                                                   ^
src/eu_complete.c:394:73: note: Function 'on_complete_pcre_match' argument 3 names different: declaration 'pattern' definition 'exp'.
on_complete_pcre_match(eu_tabpage *pnode, const char *pstr, const char *exp, ptr_re_callback fn)
                                                                        ^
src/eu_complete.c:729:35: style: Local variable 'it' shadows outer variable [shadowVariable]
                for (capture_set *it = cvector_begin(pnode->re_group); it != cvector_end(pnode->re_group); ++it)
                                  ^
src/eu_complete.c:708:29: note: Shadowed declaration
                complete_t *it;
                            ^
src/eu_complete.c:729:35: note: Shadow variable
                for (capture_set *it = cvector_begin(pnode->re_group); it != cvector_end(pnode->re_group); ++it)
                                  ^
src/eu_complete.c:859:15: style: Variable 'msub' is assigned a value that is never used. [unreadVariable]
    bool msub = false;
              ^
src/eu_complete.c:860:11: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
    int i = 0;
          ^
src/eu_complete.c:879:33: style: Variable 'msub' is assigned a value that is never used. [unreadVariable]
        if (it != pvec && (msub = on_complete_var_embed(pnode, it, pvec->index, &oit)) && oit)
                                ^
src/eu_complete.c:1148:18: style: Variable 'n_pos' is assigned a value that is never used. [unreadVariable]
    sptr_t n_pos = 0;
                 ^
src/eu_complete.c:1149:24: style: Variable 'current_pos' is assigned a value that is never used. [unreadVariable]
    sptr_t current_pos = 0;
                       ^
src/eu_complete.c:502:21: portability: %Id in format string (no. 2) requires 'ptrdiff_t' but the argument type is 'intptr_t {aka signed long}'. [invalidPrintfArgType_sint]
                    printf("it->pos[%d].min = %Id, it->pos[%d].max = %Id\n", j, it->pos[j].min, j, it->pos[j].max);
                    ^
src/eu_complete.c:502:21: portability: %Id in format string (no. 4) requires 'ptrdiff_t' but the argument type is 'intptr_t {aka signed long}'. [invalidPrintfArgType_sint]
                    printf("it->pos[%d].min = %Id, it->pos[%d].max = %Id\n", j, it->pos[j].min, j, it->pos[j].max);
                    ^
src/eu_config.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_config.c:625:13: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        ret = on_config_create_cache();
            ^
src/eu_config.c:623:17: note: ret is assigned
            ret = eu_mk_dir(eu_config_path);
                ^
src/eu_config.c:625:13: note: ret is overwritten
        ret = on_config_create_cache();
            ^
src/eu_config.c:383:47: style:inconclusive: Function 'eu_config_check_arg' argument 2 names different: declaration 'argc' definition 'arg_c'. [funcArgNamesDifferent]
eu_config_check_arg(const wchar_t **args, int arg_c, const wchar_t *argument)
                                              ^
src/eu_api.h:666:65: note: Function 'eu_config_check_arg' argument 2 names different: declaration 'argc' definition 'arg_c'.
EU_EXT_CLASS bool eu_config_check_arg(const wchar_t **args, int argc, const wchar_t *);
                                                                ^
src/eu_config.c:383:47: note: Function 'eu_config_check_arg' argument 2 names different: declaration 'argc' definition 'arg_c'.
eu_config_check_arg(const wchar_t **args, int arg_c, const wchar_t *argument)
                                              ^
src/eu_config.c:418:49: style:inconclusive: Function 'eu_config_parser_path' argument 2 names different: declaration 'argc' definition 'arg_c'. [funcArgNamesDifferent]
eu_config_parser_path(const wchar_t **args, int arg_c, file_backup **pbak)
                                                ^
src/eu_api.h:667:67: note: Function 'eu_config_parser_path' argument 2 names different: declaration 'argc' definition 'arg_c'.
EU_EXT_CLASS bool eu_config_parser_path(const wchar_t **args, int argc, file_backup **pbak);
                                                                  ^
src/eu_config.c:418:49: note: Function 'eu_config_parser_path' argument 2 names different: declaration 'argc' definition 'arg_c'.
eu_config_parser_path(const wchar_t **args, int arg_c, file_backup **pbak)
                                                ^
src/eu_config.c:190:13: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
        err = on_sql_do_session("SELECT * FROM skylark_session;", on_config_parser_bakup, (void *)&vbak); // 这里又导致工作目录变更了
            ^
src/eu_config.c:194:13: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
        err = on_sql_do_session("SELECT * FROM skylar_ver;", NULL, NULL);
            ^
src/eu_doctype.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_doctype.c:1589:10: style: The scope of the variable 'word_buffer' can be reduced. [variableScope]
    char word_buffer[QW_SIZE+1];
         ^
src/eu_doctype.c:1785:10: style: The scope of the variable 'matching' can be reduced. [variableScope]
    bool matching = false;
         ^
src/eu_doctype.c:1868:10: style: The scope of the variable 'vcontrol' can be reduced. [variableScope]
    bool vcontrol = false;
         ^
src/eu_doctype.c:1784:22: style: Variable 'match_pos' is assigned a value that is never used. [unreadVariable]
    sptr_t match_pos = -1;
                     ^
src/eu_doctype.c:1785:19: style: Variable 'matching' is assigned a value that is never used. [unreadVariable]
    bool matching = false;
                  ^
src/eu_doctype.c:1826:22: style: Variable 'match_pos' is assigned a value that is never used. [unreadVariable]
    sptr_t match_pos = -1;
                     ^
src/eu_document_map.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_document_map.c:391:28: warning: Either the condition '!pview' is redundant or there is possible null pointer dereference: pview. [nullPointerRedundantCheck]
            if ((!pview && pview->hwnd_sc && hwnd_document_static))
                           ^
src/eu_document_map.c:391:18: note: Assuming that condition '!pview' is not redundant
            if ((!pview && pview->hwnd_sc && hwnd_document_static))
                 ^
src/eu_document_map.c:391:28: note: Null pointer dereference
            if ((!pview && pview->hwnd_sc && hwnd_document_static))
                           ^
src/eu_edit.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_edit.c:295:12: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
        if ((has_selection = sel_start != sel_end))
           ^
src/eu_edit.c:635:12: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
        if ((has_selection = sel_start != sel_end))
           ^
src/eu_edit.c:988:12: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
        if ((has_selection = sel_start != sel_end))
           ^
src/eu_edit.c:1007:12: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
        if ((has_selection = sel_start != sel_end))
           ^
src/eu_edit.c:1837:21: style: Redundant initialization for 'sp'. The initialized value is overwritten before it is read. [redundantInitialization]
            if ((sp = strchr(p, '\n')) != NULL)
                    ^
src/eu_edit.c:1835:22: note: sp is initialized
            char *sp = p+strlen(split);
                     ^
src/eu_edit.c:1837:21: note: sp is overwritten
            if ((sp = strchr(p, '\n')) != NULL)
                    ^
src/eu_edit.c:405:17: style: The scope of the variable 'unix_path' can be reduced. [variableScope]
        wchar_t unix_path[MAX_PATH] = {0};
                ^
src/eu_edit.c:1218:12: style: The scope of the variable 'out_len' can be reduced. [variableScope]
    size_t out_len;
           ^
src/eu_edit.c:1280:12: style: The scope of the variable 'out_len' can be reduced. [variableScope]
    size_t out_len;
           ^
src/eu_edit.c:1323:10: style: The scope of the variable 'out_text' can be reduced. [variableScope]
    char out_text[MD5_DIGEST_LENGTH + 1] = {0};
         ^
src/eu_edit.c:1324:10: style: The scope of the variable 'text_exp' can be reduced. [variableScope]
    char text_exp[MD5_DIGEST_LENGTH * 2 + 1] = {0};
         ^
src/eu_edit.c:1357:10: style: The scope of the variable 'out_text' can be reduced. [variableScope]
    char out_text[SHA_DIGEST_LENGTH + 1] = {0};
         ^
src/eu_edit.c:1358:10: style: The scope of the variable 'text_exp' can be reduced. [variableScope]
    char text_exp[SHA_DIGEST_LENGTH * 2 + 1] = {0};
         ^
src/eu_edit.c:1391:10: style: The scope of the variable 'out_text' can be reduced. [variableScope]
    char out_text[SHA256_DIGEST_LENGTH + 1] = {0};
         ^
src/eu_edit.c:1392:10: style: The scope of the variable 'text_exp' can be reduced. [variableScope]
    char text_exp[SHA256_DIGEST_LENGTH * 2 + 1] = {0};
         ^
src/eu_edit.c:1484:12: style: The scope of the variable 'input_len' can be reduced. [variableScope]
    size_t input_len;
           ^
src/eu_edit.c:1822:17: style: The scope of the variable 'split' can be reduced. [variableScope]
    const char *split = "&&";
                ^
src/eu_edit.c:1823:10: style: The scope of the variable 'pre_comment' can be reduced. [variableScope]
    char pre_comment[COMMENT_LEN+1] = {0};
         ^
src/eu_edit.c:1824:10: style: The scope of the variable 'suf_comment' can be reduced. [variableScope]
    char suf_comment[COMMENT_LEN+1] = {0};
         ^
src/eu_edit.c:2052:45: style:inconclusive: Function 'on_edit_convert_eols' argument 2 names different: declaration 'new_eol' definition 'eol_mode'. [funcArgNamesDifferent]
on_edit_convert_eols(eu_tabpage *pnode, int eol_mode)
                                            ^
src/eu_edit.h:88:49: note: Function 'on_edit_convert_eols' argument 2 names different: declaration 'new_eol' definition 'eol_mode'.
int on_edit_convert_eols(eu_tabpage *pnode, int new_eol);
                                                ^
src/eu_edit.c:2052:45: note: Function 'on_edit_convert_eols' argument 2 names different: declaration 'new_eol' definition 'eol_mode'.
on_edit_convert_eols(eu_tabpage *pnode, int eol_mode)
                                            ^
src/eu_edit.c:187:20: style: Local variable 'on_edit_copy_text' shadows outer function [shadowFunction]
            TCHAR *on_edit_copy_text = (TCHAR *) GlobalLock(hgl);
                   ^
src/eu_edit.h:46:6: note: Shadowed declaration
void on_edit_copy_text(eu_tabpage *pnode);
     ^
src/eu_edit.c:187:20: note: Shadow variable
            TCHAR *on_edit_copy_text = (TCHAR *) GlobalLock(hgl);
                   ^
src/eu_edit.c:2140:21: style: Local variable 'count' shadows outer variable [shadowVariable]
                int count = 0;
                    ^
src/eu_edit.c:2133:13: note: Shadowed declaration
        int count = eu_int_cast(cvector_size(v));
            ^
src/eu_edit.c:2140:21: note: Shadow variable
                int count = 0;
                    ^
src/eu_edit.c:2235:31: style: Local variable 'p' shadows outer argument [shadowArgument]
                        char *p = strstr(ppline[i], str_eol);
                              ^
src/eu_edit.c:2127:29: note: Shadowed declaration
on_edit_sorting(eu_tabpage *p, int wm_id)
                            ^
src/eu_edit.c:2235:31: note: Shadow variable
                        char *p = strstr(ppline[i], str_eol);
                              ^
src/eu_edit.c:295:28: style: Variable 'has_selection' is assigned a value that is never used. [unreadVariable]
        if ((has_selection = sel_start != sel_end))
                           ^
src/eu_edit.c:635:28: style: Variable 'has_selection' is assigned a value that is never used. [unreadVariable]
        if ((has_selection = sel_start != sel_end))
                           ^
src/eu_edit.c:988:28: style: Variable 'has_selection' is assigned a value that is never used. [unreadVariable]
        if ((has_selection = sel_start != sel_end))
                           ^
src/eu_edit.c:1007:28: style: Variable 'has_selection' is assigned a value that is never used. [unreadVariable]
        if ((has_selection = sel_start != sel_end))
                           ^
src/eu_edit.c:1599:16: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
    int offset = 0;
               ^
src/eu_encoding.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_encoding.c:29:32: error: syntax error [syntaxError]
            || STRICMP(encoding, ==, "euc-jp")
                               ^
src/eu_encoding.c:390:5: error: Memory pointed to by 'bg5_str' is freed twice. [doubleFree]
    free(bg5_str);
    ^
src/eu_encoding.c:382:9: note: Memory pointed to by 'bg5_str' is freed twice.
        free(bg5_str);
        ^
src/eu_encoding.c:390:5: note: Memory pointed to by 'bg5_str' is freed twice.
    free(bg5_str);
    ^
src/eu_encoding.c:89:21: style: Checking if unsigned expression 'len' is less than zero. [unsignedLessThanZero]
    if (!str || len <= 0)
                    ^
src/eu_encoding.c:105:17: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
    else if ((p = (char *) memchr((void *) str, '\r', len)))
                ^
src/eu_encoding.c:349:17: style: Variable 'code_to' is assigned a value that is never used. [unreadVariable]
    int code_to = 950;
                ^
src/eu_encoding_utf8.c:358:25: style: Condition '(*str>>7)==0' is always false [knownConditionTrueFalse]
        if ((*str >> 7) == 0)
                        ^
src/eu_encoding_utf8.c:355:12: note: Assuming that condition '*str' is not redundant
    while (*str)
           ^
src/eu_encoding_utf8.c:358:25: note: Condition '(*str>>7)==0' is always false
        if ((*str >> 7) == 0)
                        ^
src/eu_exporter.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_exporter.c:54:13: style: The scope of the variable 'current_style' can be reduced. [variableScope]
        int current_style = -1;
            ^
src/eu_exporter.c:138:17: style: The scope of the variable 'tch' can be reduced. [variableScope]
        uint8_t tch = 0;
                ^
src/eu_exporter.c:54:27: style: Variable 'current_style' is assigned a value that is never used. [unreadVariable]
        int current_style = -1;
                          ^
src/eu_exporter.c:243:30: style: Variable 'buffer_style' is assigned a value that is never used. [unreadVariable]
            int buffer_style = STYLE_DEFAULT;
                             ^
src/eu_exporter.c:374:20: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
            offset += sprintf(pcli + offset, "}\r\n"); // rtf/ansi
                   ^
src/eu_file.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_file.c:1176:31: warning: Either the condition 'pbak' is redundant or there is possible null pointer dereference: pbak. [nullPointerRedundantCheck]
    int res = on_file_open_if(pbak->rel_path, selection);
                              ^
src/eu_file.c:1193:18: note: Assuming that condition 'pbak' is not redundant
        else if (pbak && !pbak->hex && !eu_get_config()->m_instance)
                 ^
src/eu_file.c:1176:31: note: Null pointer dereference
    int res = on_file_open_if(pbak->rel_path, selection);
                              ^
src/eu_file.c:2265:9: style: The scope of the variable 'this_index' can be reduced. [variableScope]
    int this_index = 0;
        ^
src/eu_file.c:1369:42: style:inconclusive: Function 'on_file_redirect' argument 2 names different: declaration 'pm' definition 'pbak'. [funcArgNamesDifferent]
on_file_redirect(HWND hwnd, file_backup *pbak)
                                         ^
src/eu_file.h:81:46: note: Function 'on_file_redirect' argument 2 names different: declaration 'pm' definition 'pbak'.
int on_file_redirect(HWND hwnd, file_backup *pm);
                                             ^
src/eu_file.c:1369:42: note: Function 'on_file_redirect' argument 2 names different: declaration 'pm' definition 'pbak'.
on_file_redirect(HWND hwnd, file_backup *pbak)
                                         ^
src/eu_file.c:1531:31: style:inconclusive: Function 'on_file_open_remote' argument 1 names different: declaration 'pserver' definition 'premote'. [funcArgNamesDifferent]
on_file_open_remote(remotefs *premote, file_backup *pbak, const bool selection)
                              ^
src/eu_file.h:71:35: note: Function 'on_file_open_remote' argument 1 names different: declaration 'pserver' definition 'premote'.
int on_file_open_remote(remotefs *pserver, file_backup *pbak, const bool selection);
                                  ^
src/eu_file.c:1531:31: note: Function 'on_file_open_remote' argument 1 names different: declaration 'pserver' definition 'premote'.
on_file_open_remote(remotefs *premote, file_backup *pbak, const bool selection)
                              ^
src/eu_file.c:2424:47: style:inconclusive: Function 'on_file_new_eols' argument 2 names different: declaration 'new_eol' definition 'eol_mode'. [funcArgNamesDifferent]
on_file_new_eols(eu_tabpage *pnode, const int eol_mode)
                                              ^
src/eu_file.h:86:52: note: Function 'on_file_new_eols' argument 2 names different: declaration 'new_eol' definition 'eol_mode'.
void on_file_new_eols(eu_tabpage *pnode, const int new_eol);
                                                   ^
src/eu_file.c:2424:47: note: Function 'on_file_new_eols' argument 2 names different: declaration 'new_eol' definition 'eol_mode'.
on_file_new_eols(eu_tabpage *pnode, const int eol_mode)
                                              ^
src/eu_file.c:157:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 0; i < MAX_SIZE && edit_pid[i] > 0 ; ++i)
                 ^
src/eu_file.c:131:18: note: Shadowed declaration
    volatile int i = 1;
                 ^
src/eu_file.c:157:18: note: Shadow variable
        for (int i = 0; i < MAX_SIZE && edit_pid[i] > 0 ; ++i)
                 ^
src/eu_file.c:232:24: style: Variable 'count' is assigned a value that is never used. [unreadVariable]
            if ((count = GetMenuItemCount(hre)) == 0)
                       ^
src/eu_file.c:791:20: style: Variable 'buf_len' is assigned a value that is never used. [unreadVariable]
    size_t buf_len = 0;
                   ^
src/eu_file.c:2037:17: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
            ret = MoveFileExW(tmp_path, pathfile, MOVEFILE_REPLACE_EXISTING|MOVEFILE_COPY_ALLOWED);
                ^
src/eu_file.c:589:17: warning: %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is 'unsigned long'. [invalidPrintfArgType_uint]
                printf("%s, %I64u\n", __FUNCTION__, pnode->raw_size);
                ^
src/eu_file.c:1186:13: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'intptr_t {aka signed long}'. [invalidPrintfArgType_sint]
            printf("we jump to %zd\n", pnode->nc_pos);
            ^
src/eu_format.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_format.c:637:5: error: Memory leak: str [memleak]
    return ret;
    ^
src/eu_hex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_hex.c:1173:35: warning: Either the condition 'hex_buf!=NULL' is redundant or there is possible null pointer dereference: hex_buf. [nullPointerRedundantCheck]
                        txt_len = eu_int_cast(strlen(hex_buf));
                                  ^
src/eu_hex.c:1174:29: note: Assuming that condition 'hex_buf!=NULL' is not redundant
                        if (STR_NOT_NUL(hex_buf) && (hexview->number_items + txt_len < hexview->total_items))
                            ^
src/eu_hex.c:1173:35: note: Null pointer dereference
                        txt_len = eu_int_cast(strlen(hex_buf));
                                  ^
src/eu_hex.c:86:25: style: The scope of the variable 'num' can be reduced. [variableScope]
        int pos1, pos2, num, x;
                        ^
src/eu_hex.c:873:78: style: Unsigned expression 'hexview->number_items-16*hexview->visiblelines' can't be negative so it is unnecessary to test it. [unsignedPositive]
                    if ((hexview->number_items - 16 * hexview->visiblelines) >= 0)
                                                                             ^
src/eu_hex.c:1679:49: style: Unsigned expression '((struct _BYTERANGE*)lParam)->min' can't be negative so it is unnecessary to test it. [unsignedPositive]
                if ((((PBYTERANGE) lParam)->min >= 0 && ((PBYTERANGE) lParam)->min < hexview->total_items) &&
                                                ^
src/eu_hex.c:1680:49: style: Unsigned expression '((struct _BYTERANGE*)lParam)->max' can't be negative so it is unnecessary to test it. [unsignedPositive]
                    (((PBYTERANGE) lParam)->max >= 0 && ((PBYTERANGE) lParam)->max <= hexview->total_items))
                                                ^
src/eu_hex.c:437:34: style:inconclusive: Function 'hexview_update_theme' argument 1 names different: declaration 'pnode' definition 'p'. [funcArgNamesDifferent]
hexview_update_theme(eu_tabpage *p)
                                 ^
src/eu_hex.h:137:38: note: Function 'hexview_update_theme' argument 1 names different: declaration 'pnode' definition 'p'.
int hexview_update_theme(eu_tabpage *pnode);
                                     ^
src/eu_hex.c:437:34: note: Function 'hexview_update_theme' argument 1 names different: declaration 'pnode' definition 'p'.
hexview_update_theme(eu_tabpage *p)
                                 ^
src/eu_hex.c:2094:26: style:inconclusive: Function 'hexview_updata' argument 1 names different: declaration 'p' definition 'arr'. [funcArgNamesDifferent]
hexview_updata(intptr_t *arr, intptr_t m)
                         ^
src/eu_hex.h:138:31: note: Function 'hexview_updata' argument 1 names different: declaration 'p' definition 'arr'.
void hexview_updata(intptr_t *p, intptr_t m);
                              ^
src/eu_hex.c:2094:26: note: Function 'hexview_updata' argument 1 names different: declaration 'p' definition 'arr'.
hexview_updata(intptr_t *arr, intptr_t m)
                         ^
src/eu_hex.c:2137:48: style:inconclusive: Function 'hexview_strdup_data' argument 2 names different: declaration 'out' definition 'plen'. [funcArgNamesDifferent]
hexview_strdup_data(eu_tabpage *pnode, size_t *plen)
                                               ^
src/eu_hex.h:143:57: note: Function 'hexview_strdup_data' argument 2 names different: declaration 'out' definition 'plen'.
uint8_t *hexview_strdup_data(eu_tabpage *pnode, size_t *out);
                                                        ^
src/eu_hex.c:2137:48: note: Function 'hexview_strdup_data' argument 2 names different: declaration 'out' definition 'plen'.
hexview_strdup_data(eu_tabpage *pnode, size_t *plen)
                                               ^
src/eu_hex.c:2351:25: style: Local variable 'p' shadows outer variable [shadowVariable]
            eu_tabpage *p = on_tabpage_get_ptr(v[i]);
                        ^
src/eu_hex.c:2346:21: note: Shadowed declaration
        eu_tabpage *p = NULL;
                    ^
src/eu_hex.c:2351:25: note: Shadow variable
            eu_tabpage *p = on_tabpage_get_ptr(v[i]);
                        ^
src/eu_hex.c:1293:24: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
            int offset = -1;
                       ^
src/eu_hex.c:1431:22: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
            sptr_t i = 0;
                     ^
src/eu_hex.c:2109:13: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    int len = 0;
            ^
src/eu_hex.c:2111:21: style: Variable 'pbase' is assigned a value that is never used. [unreadVariable]
    uintptr_t pbase = 0;
                    ^
src/eu_hook.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_hook.c:359:29: style: Same expression on both sides of '&&'. [duplicateExpression]
    if (!(func && orig_func && orig_func))
                            ^
src/eu_hook.c:398:17: style: The scope of the variable 'mark' can be reduced. [variableScope]
    const char *mark = "48 8B 48 ?? 48 8B 04 D1 48 8B ?? 8B 50 28";
                ^
src/eu_hook.c:195:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = 0; i < (int)len; i++)
             ^
src/eu_hook.c:150:9: note: Shadowed declaration
    int i = 0, j = 0, count = 0;
        ^
src/eu_hook.c:195:14: note: Shadow variable
    for (int i = 0; i < (int)len; i++)
             ^
src/eu_hook.c:216:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = 0; i < n_sunday; i++)
             ^
src/eu_hook.c:150:9: note: Shadowed declaration
    int i = 0, j = 0, count = 0;
        ^
src/eu_hook.c:216:14: note: Shadow variable
    for (int i = 0; i < n_sunday; i++)
             ^
src/eu_hyperlink.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_input.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_json.c:231:84: style:inconclusive: Function 'json_parse_ex' argument 4 names different: declaration 'error' definition 'error_buf'. [funcArgNamesDifferent]
json_parse_ex(json_settings *settings, const json_char *json, size_t length, char *error_buf)
                                                                                   ^
src/eu_json.h:243:100: note: Function 'json_parse_ex' argument 4 names different: declaration 'error' definition 'error_buf'.
    json_value *json_parse_ex(json_settings *settings, const json_char *json, size_t length, char *error);
                                                                                                   ^
src/eu_json.c:231:84: note: Function 'json_parse_ex' argument 4 names different: declaration 'error' definition 'error_buf'.
json_parse_ex(json_settings *settings, const json_char *json, size_t length, char *error_buf)
                                                                                   ^
src/eu_json.c:856:82: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
                            top->u.dbl *= pow(10.0, (flags & flag_num_e_negative ? -num_e : num_e));
                                                                                 ^
src/eu_json.c:237:16: style: Variable 'flags' is assigned a value that is never used. [unreadVariable]
    long flags = 0;
               ^
src/eu_locale.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_locale.c:254:66: warning: Either the condition 'index<99' is redundant or the array 'sz_localization[3]' is accessed at index 98, which is out of bounds. [arrayIndexOutOfBoundsCond]
        for (index = 0; index < MAX_MULTI_LANG && sz_localization[index].desc[0]; ++index)
                                                                 ^
src/eu_locale.c:254:31: note: Assuming that condition 'index<99' is not redundant
        for (index = 0; index < MAX_MULTI_LANG && sz_localization[index].desc[0]; ++index)
                              ^
src/eu_locale.c:254:66: note: Array index out of bounds
        for (index = 0; index < MAX_MULTI_LANG && sz_localization[index].desc[0]; ++index)
                                                                 ^
src/eu_locale.c:278:62: warning: Either the condition 'index<99' is redundant or the array 'sz_localization[3]' is accessed at index 98, which is out of bounds. [arrayIndexOutOfBoundsCond]
    for (index = 0; index < MAX_MULTI_LANG && sz_localization[index].desc[0]; ++index)
                                                             ^
src/eu_locale.c:278:27: note: Assuming that condition 'index<99' is not redundant
    for (index = 0; index < MAX_MULTI_LANG && sz_localization[index].desc[0]; ++index)
                          ^
src/eu_locale.c:278:62: note: Array index out of bounds
    for (index = 0; index < MAX_MULTI_LANG && sz_localization[index].desc[0]; ++index)
                                                             ^
src/eu_locale.c:431:58: warning: Either the condition 'i<99' is redundant or the array 'sz_localization[3]' is accessed at index 98, which is out of bounds. [arrayIndexOutOfBoundsCond]
    for (int i = 0; i < MAX_MULTI_LANG && sz_localization[i].desc[0]; ++i)
                                                         ^
src/eu_locale.c:431:23: note: Assuming that condition 'i<99' is not redundant
    for (int i = 0; i < MAX_MULTI_LANG && sz_localization[i].desc[0]; ++i)
                      ^
src/eu_locale.c:431:58: note: Array index out of bounds
    for (int i = 0; i < MAX_MULTI_LANG && sz_localization[i].desc[0]; ++i)
                                                         ^
src/eu_locale.c:178:13: style: Variable 'hr' is assigned a value that is never used. [unreadVariable]
    if ((hr = FindResource(g_skylark_lang, MAKEINTRESOURCE(res_id), RT_DIALOG)) == NULL)
            ^
src/eu_locale.c:229:13: style: Variable 'hr' is assigned a value that is never used. [unreadVariable]
    if ((hr = FindResource(g_skylark_lang, MAKEINTRESOURCE(res_id), RT_DIALOG)) == NULL)
            ^
src/eu_log.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_log.c:45:10: style: The scope of the variable 'buffer' can be reduced. [variableScope]
    char buffer[MAX_BUFFER] = {0};
         ^
src/eu_main.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_main.c:202:13: warning: Return value of function freopen() is not used. [ignoredReturnValue]
            freopen("conin$","r",stdin);
            ^
src/eu_main.c:203:13: warning: Return value of function freopen() is not used. [ignoredReturnValue]
            freopen("conout$","w", stdout);
            ^
src/eu_main.c:204:13: warning: Return value of function freopen() is not used. [ignoredReturnValue]
            freopen("conout$","w", stderr);
            ^
src/eu_main.c:219:9: style: Variable 'msg.wParam' is reassigned a value before the old one has been used. [redundantAssignment]
        SKY_SAFE_EXIT(0);
        ^
src/eu_main.c:212:24: note: msg.wParam is assigned
            msg.wParam = eu_lua_script_convert(fname, save);
                       ^
src/eu_main.c:219:9: note: msg.wParam is overwritten
        SKY_SAFE_EXIT(0);
        ^
src/eu_map.c:162:9: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
        node = NULL;
        ^
src/eu_map.c:310:9: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
        node = NULL;
        ^
src/eu_map.c:30:35: style:inconclusive: Function 'map_get' argument 2 names different: declaration 'key' definition 'str'. [funcArgNamesDifferent]
map_get(root_t *root, const char *str)
                                  ^
src/eu_map.h:52:42: note: Function 'map_get' argument 2 names different: declaration 'key' definition 'str'.
map_t *map_get(root_t *root, const char *key);
                                         ^
src/eu_map.c:30:35: note: Function 'map_get' argument 2 names different: declaration 'key' definition 'str'.
map_get(root_t *root, const char *str)
                                  ^
src/eu_map.c:35:23: error: Null pointer dereference: (map_t*)0 [nullPointer]
        map_t *data = rb_entry(node, map_t, node);
                      ^
src/eu_map.c:79:28: error: Null pointer dereference: (map_t*)0 [nullPointer]
        map_t *this_node = rb_entry(*new_node, map_t, node);
                           ^
src/eu_map.c:113:13: error: Null pointer dereference: (map_t*)0 [nullPointer]
    return (rb_entry(node, map_t, node));
            ^
src/eu_map.c:124:13: error: Null pointer dereference: (map_t*)0 [nullPointer]
    return (rb_entry(node, map_t, node));
            ^
src/eu_map.c:135:12: error: Null pointer dereference: (map_t*)0 [nullPointer]
    return rb_entry(next, map_t, node);
           ^
src/eu_map.c:146:12: error: Null pointer dereference: (map_t*)0 [nullPointer]
    return rb_entry(prev, map_t, node);
           ^
src/eu_map.c:180:18: error: Null pointer dereference: (map_t*)0 [nullPointer]
        m_free = rb_entry(free_node, map_t, node);
                 ^
src/eu_map.c:231:31: error: Null pointer dereference: (acshow_t*)0 [nullPointer]
        acshow_t *this_node = rb_entry(*new_node, acshow_t, node);
                              ^
src/eu_map.c:263:13: error: Null pointer dereference: (acshow_t*)0 [nullPointer]
    return (rb_entry(node, acshow_t, node));
            ^
src/eu_map.c:274:13: error: Null pointer dereference: (acshow_t*)0 [nullPointer]
    return (rb_entry(node, acshow_t, node));
            ^
src/eu_map.c:285:12: error: Null pointer dereference: (acshow_t*)0 [nullPointer]
    return rb_entry(next, acshow_t, node);
           ^
src/eu_map.c:296:12: error: Null pointer dereference: (acshow_t*)0 [nullPointer]
    return rb_entry(prev, acshow_t, node);
           ^
src/eu_map.c:327:18: error: Null pointer dereference: (acshow_t*)0 [nullPointer]
        m_free = rb_entry(free_node, acshow_t, node);
                 ^
src/eu_menu.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_nphost.c:99:21: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
                ret = NP_NO_ERROR;
                    ^
src/eu_nphost.c:97:21: note: ret is assigned
                ret = fn_entry(&(*pdata)->funcs);
                    ^
src/eu_nphost.c:99:21: note: ret is overwritten
                ret = NP_NO_ERROR;
                    ^
src/eu_pixmap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_pixmap.c:161:18: style: Variable 'img_size' is assigned a value that is never used. [unreadVariable]
    int img_size = w * h *n;
                 ^
src/eu_print.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_print.c:566:9: style: The scope of the variable 'doc_max' can be reduced. [variableScope]
    int doc_max;
        ^
src/eu_print.c:567:9: style: The scope of the variable 'len_printed' can be reduced. [variableScope]
    int len_printed;
        ^
src/eu_print.c:568:9: style: The scope of the variable 'page_num' can be reduced. [variableScope]
    int page_num;
        ^
src/eu_print.c:569:10: style: The scope of the variable 'print_page' can be reduced. [variableScope]
    bool print_page;
         ^
src/eu_print.c:69:22: style: Variable 'dw' is assigned a value that is never used. [unreadVariable]
        DWORD_PTR dw = SHGetFileInfo(path, attr, psfi, cb_info, flags);
                     ^
src/eu_proc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_proc.c:538:43: style: Condition 'pnode' is always true [knownConditionTrueFalse]
    if((pnode = on_tabpage_focus_at()) && pnode && pnode->doc_ptr && !pnode->hex_mode && p_msg->message == WM_KEYDOWN && p_msg->hwnd == pnode->hwnd_sc)
                                          ^
src/eu_proc.c:538:15: note: Assuming that condition 'pnode=on_tabpage_focus_at()' is not redundant
    if((pnode = on_tabpage_focus_at()) && pnode && pnode->doc_ptr && !pnode->hex_mode && p_msg->message == WM_KEYDOWN && p_msg->hwnd == pnode->hwnd_sc)
              ^
src/eu_proc.c:538:43: note: Condition 'pnode' is always true
    if((pnode = on_tabpage_focus_at()) && pnode && pnode->doc_ptr && !pnode->hex_mode && p_msg->message == WM_KEYDOWN && p_msg->hwnd == pnode->hwnd_sc)
                                          ^
src/eu_proc.c:544:17: style: Condition 'main_up' is always true [knownConditionTrueFalse]
            if (main_up)
                ^
src/eu_proc.c:542:40: note: Assuming that condition 'main_up' is not redundant
        if (p_msg->wParam == VK_TAB && main_up && eu_get_config() && eu_get_config()->eu_complete.snippet)
                                       ^
src/eu_proc.c:544:17: note: Condition 'main_up' is always true
            if (main_up)
                ^
src/eu_proc.c:573:17: style: The scope of the variable 'msg' can be reduced. [variableScope]
        wchar_t msg[PERROR_LEN+1] = {0};
                ^
src/eu_proc.c:628:14: style: The scope of the variable 'remote' can be reduced. [variableScope]
        bool remote = false;
             ^
src/eu_proc.c:629:14: style: The scope of the variable 'backup' can be reduced. [variableScope]
        bool backup = false;
             ^
src/eu_proc.c:1896:57: style: Unsigned expression 'dispinfo->item.number_items' can't be negative so it is unnecessary to test it. [unsignedPositive]
                        if (dispinfo->item.number_items >= 0 && dispinfo->item.number_items <= 255)
                                                        ^
src/eu_proc.c:740:21: style: Local variable 'result' shadows outer variable [shadowVariable]
            LRESULT result = DefWindowProc(hwnd, WM_NCPAINT, wParam, lParam);
                    ^
src/eu_proc.c:697:13: note: Shadowed declaration
    LRESULT result = 0;
            ^
src/eu_proc.c:740:21: note: Shadow variable
            LRESULT result = DefWindowProc(hwnd, WM_NCPAINT, wParam, lParam);
                    ^
src/eu_qrgen.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_qrgen.c:75:18: style: The scope of the variable 'x' can be reduced. [variableScope]
    unsigned int x, y, l, n, un_width, un_adjust_width, un_bytes;
                 ^
src/eu_qrgen.c:75:21: style: The scope of the variable 'y' can be reduced. [variableScope]
    unsigned int x, y, l, n, un_width, un_adjust_width, un_bytes;
                    ^
src/eu_qrgen.c:75:24: style: The scope of the variable 'l' can be reduced. [variableScope]
    unsigned int x, y, l, n, un_width, un_adjust_width, un_bytes;
                       ^
src/eu_qrgen.c:75:27: style: The scope of the variable 'n' can be reduced. [variableScope]
    unsigned int x, y, l, n, un_width, un_adjust_width, un_bytes;
                          ^
src/eu_qrgen.c:77:14: style: The scope of the variable 'psource' can be reduced. [variableScope]
    uint8_t *psource, *pdest;
             ^
src/eu_qrgen.c:77:24: style: The scope of the variable 'pdest' can be reduced. [variableScope]
    uint8_t *psource, *pdest;
                       ^
src/eu_registry.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_registry.c:651:9: style: Variable 'm_sub' is not assigned a value. [unassignedVariable]
    int m_sub;
        ^
src/eu_registry.c:659:9: style: Variable 'm_value' is not assigned a value. [unassignedVariable]
    int m_value;
        ^
src/eu_registry.c:1046:30: style: Variable 'ui_dest' is assigned a value that is never used. [unreadVariable]
    TCHAR ui_dest[QW_SIZE+1] = {0};
                             ^
src/eu_remotefs.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_remotefs.c:706:9: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
    if (sscanf(purl,"%*[^0-9] %[^:] %*[^0-9]%[^/]", addr, port) != 2)
        ^
src/eu_remotefs.c:708:13: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
        if (sscanf(purl,"%*[^:]://%[^:]:%[1-9]", addr, port) != 2)
            ^
src/eu_remotefs.c:150:19: style: The scope of the variable 'enc_pass' can be reduced. [variableScope]
    unsigned char enc_pass[33] = {0};
                  ^
src/eu_remotefs.c:347:9: style: The scope of the variable 'servercount' can be reduced. [variableScope]
    int servercount;
        ^
src/eu_resultctl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_resultctl.c:295:30: style:inconclusive: Function 'on_result_reload' argument 1 names different: declaration 'p' definition 'pedit'. [funcArgNamesDifferent]
on_result_reload(eu_tabpage *pedit)
                             ^
src/eu_resultctl.h:31:35: note: Function 'on_result_reload' argument 1 names different: declaration 'p' definition 'pedit'.
void on_result_reload(eu_tabpage *p);
                                  ^
src/eu_resultctl.c:295:30: note: Function 'on_result_reload' argument 1 names different: declaration 'p' definition 'pedit'.
on_result_reload(eu_tabpage *pedit)
                             ^
src/eu_resultctl.c:82:13: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
        len += l;
            ^
src/eu_resultctl.c:121:13: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
        len += l;
            ^
src/eu_scintilla.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_scintilla.c:480:18: style: Condition '*buf!=0' is always false [knownConditionTrueFalse]
    return (*buf != 0);
                 ^
src/eu_scintilla.c:465:12: note: Assignment '*buf=0', assigned value is 0
    *buf = 0;
           ^
src/eu_scintilla.c:466:9: note: Assuming condition is false
    if (pnode)
        ^
src/eu_scintilla.c:480:18: note: Condition '*buf!=0' is always false
    return (*buf != 0);
                 ^
src/eu_scintilla.c:349:30: style:inconclusive: Function 'on_sci_free_tab' argument 1 names different: declaration 'ppnod' definition 'ppnode'. [funcArgNamesDifferent]
on_sci_free_tab(eu_tabpage **ppnode, eu_tabpage *p)
                             ^
src/eu_scintilla.h:41:35: note: Function 'on_sci_free_tab' argument 1 names different: declaration 'ppnod' definition 'ppnode'.
void on_sci_free_tab(eu_tabpage **ppnod, eu_tabpage *p);
                                  ^
src/eu_scintilla.c:349:30: note: Function 'on_sci_free_tab' argument 1 names different: declaration 'ppnod' definition 'ppnode'.
on_sci_free_tab(eu_tabpage **ppnode, eu_tabpage *p)
                             ^
src/eu_scintilla.c:777:50: style:inconclusive: Function 'eu_send_notify' argument 3 names different: declaration 'nmhdr' definition 'phdr'. [funcArgNamesDifferent]
eu_send_notify(HWND hwnd, uint32_t code, LPNMHDR phdr)
                                                 ^
src/eu_api.h:580:68: note: Function 'eu_send_notify' argument 3 names different: declaration 'nmhdr' definition 'phdr'.
EU_EXT_CLASS void eu_send_notify(HWND hwnd, uint32_t code, LPNMHDR nmhdr);
                                                                   ^
src/eu_scintilla.c:777:50: note: Function 'eu_send_notify' argument 3 names different: declaration 'nmhdr' definition 'phdr'.
eu_send_notify(HWND hwnd, uint32_t code, LPNMHDR phdr)
                                                 ^
src/eu_scintilla.c:353:19: style: Variable 'hwnd' is assigned a value that is never used. [unreadVariable]
        HWND hwnd = eu_module_hwnd();
                  ^
src/eu_script.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_script.c:459:9: portability: %zx in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long}'. [invalidPrintfArgType_uint]
        printf("doc_point = %zx\n", doc_point);
        ^
src/eu_script.c:664:14: style: The scope of the variable 'u8_path' can be reduced. [variableScope]
        char u8_path[MAX_BUFFER] = {0};
             ^
src/eu_script.c:343:9: style: Condition 'filepath' is always true [knownConditionTrueFalse]
    if (filepath)
        ^
src/eu_script.c:314:49: note: Assuming that condition '(filepath=eu_utf16_utf8(fname,NULL))==NULL' is not redundant
    if ((filepath = eu_utf16_utf8(fname, NULL)) == NULL)
                                                ^
src/eu_script.c:343:9: note: Condition 'filepath' is always true
    if (filepath)
        ^
src/eu_search.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_search.c:1289:5: error: Memory leak: curr [memleak]
    return SKYLARK_OK;
    ^
src/eu_search.c:1930:19: warning: Either the condition 'pnode' is redundant or there is possible null pointer dereference: pnode. [nullPointerRedundantCheck]
    if (pnode || !pnode->hex_mode)
                  ^
src/eu_search.c:1930:9: note: Assuming that condition 'pnode' is not redundant
    if (pnode || !pnode->hex_mode)
        ^
src/eu_search.c:1930:19: note: Null pointer dereference
    if (pnode || !pnode->hex_mode)
                  ^
src/eu_search.c:1181:9: style: The scope of the variable 'offset' can be reduced. [variableScope]
    int offset = 0;
        ^
src/eu_search.c:1331:13: style: The scope of the variable 'pos' can be reduced. [variableScope]
    int64_t pos = -1;
            ^
src/eu_search.c:2847:10: style: The scope of the variable 'next_result' can be reduced. [variableScope]
    bool next_result = false;
         ^
src/eu_search.c:2899:10: style: The scope of the variable 'c_index' can be reduced. [variableScope]
    int  c_index = -1;
         ^
src/eu_search.c:3892:9: style: The scope of the variable 'number' can be reduced. [variableScope]
    int number = 0;
        ^
src/eu_search.c:3893:10: style: The scope of the variable 'key' can be reduced. [variableScope]
    char key[QW_SIZE] = {0};
         ^
src/eu_search.c:3894:10: style: The scope of the variable 'str_replace' can be reduced. [variableScope]
    char str_replace[QW_SIZE] = {0};
         ^
src/eu_search.c:2438:25: style: Local variable 'p' shadows outer variable [shadowVariable]
            eu_tabpage *p = on_tabpage_get_ptr(index);
                        ^
src/eu_search.c:2401:17: note: Shadowed declaration
    eu_tabpage *p = NULL;
                ^
src/eu_search.c:2438:25: note: Shadow variable
            eu_tabpage *p = on_tabpage_get_ptr(index);
                        ^
src/eu_search.c:39:17: style: struct member '_report_data::p' is never used. [unusedStructMember]
    eu_tabpage *p;
                ^
src/eu_search.c:41:9: style: struct member '_report_data::button' is never used. [unusedStructMember]
    int button;
        ^
src/eu_search.c:42:10: style: struct member '_report_data::thr' is never used. [unusedStructMember]
    bool thr;
         ^
src/eu_search.c:1181:16: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
    int offset = 0;
               ^
src/eu_search.c:1224:20: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
        int offset = 0;
                   ^
src/eu_search.c:1479:34: style: Variable 'hbr_bkgnd' is assigned a value that is never used. [unreadVariable]
                HBRUSH hbr_bkgnd = (HBRUSH)on_dark_get_brush();
                                 ^
src/eu_search.c:2108:17: style: Variable 'm_loop' is assigned a value that is never used. [unreadVariable]
    bool m_loop = false;
                ^
src/eu_search.c:2110:16: style: Variable 'pos' is assigned a value that is never used. [unreadVariable]
    sptr_t pos = -1;
               ^
src/eu_search.c:2404:27: style: Variable 'msg' is assigned a value that is never used. [unreadVariable]
    TCHAR msg[MAX_BUFFER] = {0};
                          ^
src/eu_search.c:2726:25: style: Variable 'tab' is assigned a value that is never used. [unreadVariable]
                int tab = on_search_active_tab(path, key);
                        ^
src/eu_search.c:2899:18: style: Variable 'c_index' is assigned a value that is never used. [unreadVariable]
    int  c_index = -1;
                 ^
src/eu_search.c:3204:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    int ret = 0;
            ^
src/eu_search.c:3205:27: style: Variable 'lpch' is assigned a value that is never used. [unreadVariable]
    TCHAR lpch[DW_SIZE+1] = { 0 };
                          ^
src/eu_search.c:3892:16: style: Variable 'number' is assigned a value that is never used. [unreadVariable]
    int number = 0;
               ^
src/eu_search.c:1891:21: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
                    printf("We only show %d results\n", RESULAT_MAX_MATCH);
                    ^
src/eu_share.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_snippet.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_snippet.c:329:24: style: Expression is always true because 'else if' condition is opposite to previous condition at line 321. [multiCondition]
        else if (index >= 0)
                       ^
src/eu_snippet.c:321:19: note: first condition
        if (index < 0)
                  ^
src/eu_snippet.c:329:24: note: else if condition is opposite to first condition
        else if (index >= 0)
                       ^
src/eu_snippet.c:408:18: style: Expression is always true because 'else if' condition is opposite to previous condition at line 398. [multiCondition]
        else if (!vec)
                 ^
src/eu_snippet.c:398:13: note: first condition
        if (vec)
            ^
src/eu_snippet.c:408:18: note: else if condition is opposite to first condition
        else if (!vec)
                 ^
src/eu_snippet.c:324:13: warning: Suspicious use of ; at the end of 'if' statement. [suspiciousSemicolon]
            if (on_snippet_get_vec(GetDlgItem(hwnd_snippet, IDC_SNIPPET_CBO1), &doc));
            ^
src/eu_snippet.c:367:17: warning: Suspicious use of ; at the end of 'if' statement. [suspiciousSemicolon]
                if (n > 0 && n < len);
                ^
src/eu_snippet.c:892:28: style:inconclusive: Function 'on_snippet_create_dlg' argument 1 names different: declaration 'hwnd' definition 'parent'. [funcArgNamesDifferent]
on_snippet_create_dlg(HWND parent)
                           ^
src/eu_snippet.h:27:33: note: Function 'on_snippet_create_dlg' argument 1 names different: declaration 'hwnd' definition 'parent'.
void on_snippet_create_dlg(HWND hwnd);
                                ^
src/eu_snippet.c:892:28: note: Function 'on_snippet_create_dlg' argument 1 names different: declaration 'hwnd' definition 'parent'.
on_snippet_create_dlg(HWND parent)
                           ^
src/eu_snippet.c:382:15: style: Variable 'index' is assigned a value that is never used. [unreadVariable]
    int index = -1;
              ^
src/eu_snparser.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_snparser.c:115:30: style: Expression is always true because 'else if' condition is opposite to previous condition at line 113. [multiCondition]
                    else if (!sq)
                             ^
src/eu_snparser.c:113:25: note: first condition
                    if (sq)
                        ^
src/eu_snparser.c:115:30: note: else if condition is opposite to first condition
                    else if (!sq)
                             ^
src/eu_snparser.c:123:30: style: Expression is always true because 'else if' condition is opposite to previous condition at line 121. [multiCondition]
                    else if (!dq)
                             ^
src/eu_snparser.c:121:25: note: first condition
                    if (dq)
                        ^
src/eu_snparser.c:123:30: note: else if condition is opposite to first condition
                    else if (!dq)
                             ^
src/eu_snparser.c:285:18: style: Condition 'size>0' is always true [knownConditionTrueFalse]
        if (size > 0 && strlen(*pbuf) >= 0)
                 ^
src/eu_snparser.c:269:14: note: Assuming that condition 'size>0' is not redundant
    if (size > 0)
             ^
src/eu_snparser.c:285:18: note: Condition 'size>0' is always true
        if (size > 0 && strlen(*pbuf) >= 0)
                 ^
src/eu_snparser.c:350:11: style: Variable 'p' is reassigned a value before the old one has been used. [redundantAssignment]
        p = strtok(NULL, delim);
          ^
src/eu_snparser.c:341:15: note: p is assigned
            p += len;
              ^
src/eu_snparser.c:350:11: note: p is overwritten
        p = strtok(NULL, delim);
          ^
src/eu_snparser.c:285:39: style: Unsigned expression 'strlen(*pbuf)' can't be negative so it is unnecessary to test it. [unsignedPositive]
        if (size > 0 && strlen(*pbuf) >= 0)
                                      ^
src/eu_snparser.c:411:13: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
    char *p = (char *)str;
            ^
src/eu_snparser.c:480:19: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
                n = _snprintf(txt, txt_len, "%s%s", peol, peol);
                  ^
src/eu_snparser.c:484:19: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
                n = _snprintf(txt, txt_len, "%s", peol);
                  ^
src/eu_snparser.c:489:15: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
            n = 0;
              ^
src/eu_splitter.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_splitter.c:318:27: warning: Either the condition 'pnode' is redundant or there is possible null pointer dereference: pnode. [nullPointerRedundantCheck]
            MoveToEx(hdc, pnode->rect_sc.left + SPLIT_WIDTH, cy, NULL);
                          ^
src/eu_splitter.c:324:17: note: Assuming that condition 'pnode' is not redundant
            if (RESULT_SHOW(pnode) && eu_result_hwnd())
                ^
src/eu_splitter.c:318:27: note: Null pointer dereference
            MoveToEx(hdc, pnode->rect_sc.left + SPLIT_WIDTH, cy, NULL);
                          ^
src/eu_splitter.c:319:25: warning: Either the condition 'pnode' is redundant or there is possible null pointer dereference: pnode. [nullPointerRedundantCheck]
            LineTo(hdc, pnode->rect_sc.right,  cy);
                        ^
src/eu_splitter.c:324:17: note: Assuming that condition 'pnode' is not redundant
            if (RESULT_SHOW(pnode) && eu_result_hwnd())
                ^
src/eu_splitter.c:319:25: note: Null pointer dereference
            LineTo(hdc, pnode->rect_sc.right,  cy);
                        ^
src/eu_sql.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_sql.c:54:32: error: There is an unknown macro here somewhere. Configuration is required. If TEXT is a macro then please configure it. [unknownMacro]
    char *pver = eu_utf16_utf8(__EU_INFO_RELEASE_VERSION, NULL);
                               ^
src/eu_statusbar.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_statusbar.c:29:9: style: struct member '_sb_borders::horizontal' is never used. [unusedStructMember]
    int horizontal;
        ^
src/eu_statusbar.c:240:13: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
    RECT rc = {0};
            ^
src/eu_statusbar.c:264:14: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    if ((len = GetMenuString(hmenu, id, &buf[2], FILESIZE-2, MF_BYCOMMAND)) > 0)
             ^
src/eu_statusbar.c:710:16: style: Variable 'count' is assigned a value that is never used. [unreadVariable]
    int  count = 0;
               ^
src/eu_symlistctl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_symlistctl.c:26:13: style: Variable 'msg' is assigned a value that is never used. [unreadVariable]
    MSG msg = {0};
            ^
src/eu_symtreectl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_symtreectl.c:874:17: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
            if (sscanf(line_buf, "%s%s%s%s", config_remark, config_key, config_eval, config_value) < 3)
                ^
src/eu_symtreectl.c:82:9: style: The scope of the variable 'words2_buf_len' can be reduced. [variableScope]
    int words2_buf_len;
        ^
src/eu_symtreectl.c:83:9: style: The scope of the variable 'words2_remain_len' can be reduced. [variableScope]
    int words2_remain_len;
        ^
src/eu_symtreectl.c:495:17: style: The scope of the variable 'nrow2' can be reduced. [variableScope]
            int nrow2;
                ^
src/eu_symtreectl.c:842:14: style: The scope of the variable 'config_remark' can be reduced. [variableScope]
        char config_remark[QW_SIZE] = {0};
             ^
src/eu_symtreectl.c:843:14: style: The scope of the variable 'config_key' can be reduced. [variableScope]
        char config_key[QW_SIZE] = {0};
             ^
src/eu_symtreectl.c:844:14: style: The scope of the variable 'config_eval' can be reduced. [variableScope]
        char config_eval[QW_SIZE] = {0};
             ^
src/eu_symtreectl.c:845:14: style: The scope of the variable 'config_value' can be reduced. [variableScope]
        char config_value[QW_SIZE] = {0};
             ^
src/eu_symtreectl.c:1307:26: style: The scope of the variable 'sql' can be reduced. [variableScope]
                    char sql[MAX_PATH+1] = {0};
                         ^
src/eu_symtreectl.c:1319:26: style: The scope of the variable 'sql' can be reduced. [variableScope]
                    char sql[MAX_PATH+1] = {0};
                         ^
src/eu_symtreectl.c:1093:44: style:inconclusive: Function 'process_value' argument 2 names different: declaration 'tree_root' definition 'new_tvi'. [funcArgNamesDifferent]
process_value(eu_tabpage *pnode, HTREEITEM new_tvi, json_value *json_root, int x)
                                           ^
src/eu_symtreectl.c:1041:44: note: Function 'process_value' argument 2 names different: declaration 'tree_root' definition 'new_tvi'.
process_value(eu_tabpage *pnode, HTREEITEM tree_root, json_value *value, int x);
                                           ^
src/eu_symtreectl.c:1093:44: note: Function 'process_value' argument 2 names different: declaration 'tree_root' definition 'new_tvi'.
process_value(eu_tabpage *pnode, HTREEITEM new_tvi, json_value *json_root, int x)
                                           ^
src/eu_symtreectl.c:1093:65: style:inconclusive: Function 'process_value' argument 3 names different: declaration 'value' definition 'json_root'. [funcArgNamesDifferent]
process_value(eu_tabpage *pnode, HTREEITEM new_tvi, json_value *json_root, int x)
                                                                ^
src/eu_symtreectl.c:1041:67: note: Function 'process_value' argument 3 names different: declaration 'value' definition 'json_root'.
process_value(eu_tabpage *pnode, HTREEITEM tree_root, json_value *value, int x);
                                                                  ^
src/eu_symtreectl.c:1093:65: note: Function 'process_value' argument 3 names different: declaration 'value' definition 'json_root'.
process_value(eu_tabpage *pnode, HTREEITEM new_tvi, json_value *json_root, int x)
                                                                ^
src/eu_symtreectl.c:226:18: style: Local variable 'sql' shadows outer variable [shadowVariable]
            char sql[MAX_BUFFER] = "SELECT table_name FROM user_tables";
                 ^
src/eu_symtreectl.c:85:10: note: Shadowed declaration
    char sql[MAX_SIZE];
         ^
src/eu_symtreectl.c:226:18: note: Shadow variable
            char sql[MAX_BUFFER] = "SELECT table_name FROM user_tables";
                 ^
src/eu_symtreectl.c:516:21: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
                err = 1;
                    ^
src/eu_symtreectl.c:620:17: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
            err = 1;
                ^
src/eu_tablectl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_tablectl.c:650:41: style: Condition 'oci_sub->fnOCIEnvCreate==NULL' is always false [knownConditionTrueFalse]
                oci_sub->fnOCIEnvCreate == NULL ||
                                        ^
src/eu_tablectl.c:649:41: note: Assuming that condition 'oci_sub->fnOCIEnvCreate==NULL' is not redundant
            if (oci_sub->fnOCIEnvCreate == NULL ||
                                        ^
src/eu_tablectl.c:650:41: note: Condition 'oci_sub->fnOCIEnvCreate==NULL' is always false
                oci_sub->fnOCIEnvCreate == NULL ||
                                        ^
src/eu_tablectl.c:698:53: style: Condition 'pnode->db_ptr->config.dbpass[0]==0' is always true [knownConditionTrueFalse]
                if (pnode->db_ptr->config.dbpass[0] == 0)
                                                    ^
src/eu_tablectl.c:693:49: note: Assuming that condition 'pnode->db_ptr->config.dbpass[0]==0' is not redundant
            if (pnode->db_ptr->config.dbpass[0] == 0)
                                                ^
src/eu_tablectl.c:698:53: note: Condition 'pnode->db_ptr->config.dbpass[0]==0' is always true
                if (pnode->db_ptr->config.dbpass[0] == 0)
                                                    ^
src/eu_tablectl.c:938:13: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
            sscanf(line_buf, "%s%s%s%*[ ]%[^\r|\n]", config_remark, config_key, config_eval, config_value);
            ^
src/eu_tablectl.c:287:5: warning: Either the condition 'err_code' is redundant or there is possible null pointer dereference: err_code. [nullPointerRedundantCheck]
    err_code[0] = 0;
    ^
src/eu_tablectl.c:295:9: note: Assuming that condition 'err_code' is not redundant
    if (err_code)
        ^
src/eu_tablectl.c:287:5: note: Null pointer dereference
    err_code[0] = 0;
    ^
src/eu_tablectl.c:649:49: style: Same expression on both sides of '||'. [duplicateExpression]
            if (oci_sub->fnOCIEnvCreate == NULL ||
                                                ^
src/eu_tablectl.c:896:14: style: The scope of the variable 'config_remark' can be reduced. [variableScope]
        char config_remark[QW_SIZE] = {0};
             ^
src/eu_tablectl.c:897:14: style: The scope of the variable 'config_key' can be reduced. [variableScope]
        char config_key[QW_SIZE] = {0};
             ^
src/eu_tablectl.c:898:14: style: The scope of the variable 'config_eval' can be reduced. [variableScope]
        char config_eval[QW_SIZE] = {0};
             ^
src/eu_tablectl.c:899:14: style: The scope of the variable 'config_value' can be reduced. [variableScope]
        char config_value[QW_SIZE] = {0};
             ^
src/eu_tablectl.c:1367:17: style: The scope of the variable 'index' can be reduced. [variableScope]
            int index;
                ^
src/eu_tablectl.c:1226:21: style: Local variable 'msg_str' shadows outer variable [shadowVariable]
                    LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR8, msg_str);
                    ^
src/eu_tablectl.c:1221:17: note: Shadowed declaration
                LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR7, msg_str);
                ^
src/eu_tablectl.c:1226:21: note: Shadow variable
                    LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR8, msg_str);
                    ^
src/eu_tablectl.c:1279:25: style: Local variable 'msg_str' shadows outer variable [shadowVariable]
                        LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR13, msg_str);
                        ^
src/eu_tablectl.c:1245:17: note: Shadowed declaration
                LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR10, msg_str);
                ^
src/eu_tablectl.c:1279:25: note: Shadow variable
                        LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR13, msg_str);
                        ^
src/eu_tablectl.c:1378:21: style: Local variable 'msg_str' shadows outer variable [shadowVariable]
                    LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR7, msg_str);
                    ^
src/eu_tablectl.c:1374:17: note: Shadowed declaration
                LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR1, msg_str);
                ^
src/eu_tablectl.c:1378:21: note: Shadow variable
                    LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR7, msg_str);
                    ^
src/eu_tablectl.c:1386:21: style: Local variable 'msg_str' shadows outer variable [shadowVariable]
                    LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR10, msg_str);
                    ^
src/eu_tablectl.c:1374:17: note: Shadowed declaration
                LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR1, msg_str);
                ^
src/eu_tablectl.c:1386:21: note: Shadow variable
                    LOAD_I18N_RESSTR(IDC_MSG_QUERY_STR10, msg_str);
                    ^
src/eu_tabpage.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_tabpage.c:1540:52: style: Condition 'p' is always true [knownConditionTrueFalse]
            if ((p = on_tabpage_get_ptr(index)) && p && (p == pnode))
                                                   ^
src/eu_tabpage.c:1540:20: note: Assuming that condition 'p=on_tabpage_get_ptr(index)' is not redundant
            if ((p = on_tabpage_get_ptr(index)) && p && (p == pnode))
                   ^
src/eu_tabpage.c:1540:52: note: Condition 'p' is always true
            if ((p = on_tabpage_get_ptr(index)) && p && (p == pnode))
                                                   ^
src/eu_tabpage.c:373:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i = 0;
        ^
src/eu_tabpage.c:725:17: style: The scope of the variable 'i' can be reduced. [variableScope]
            int i, c = 0;
                ^
src/eu_tabpage.c:725:20: style: The scope of the variable 'c' can be reduced. [variableScope]
            int i, c = 0;
                   ^
src/eu_tabpage.c:1341:26: style:inconclusive: Function 'on_tabpage_set_title' argument 1 names different: declaration 'ntab' definition 'ontab'. [funcArgNamesDifferent]
on_tabpage_set_title(int ontab, TCHAR *title)
                         ^
src/eu_tabpage.h:116:31: note: Function 'on_tabpage_set_title' argument 1 names different: declaration 'ntab' definition 'ontab'.
void on_tabpage_set_title(int ntab, TCHAR *title);
                              ^
src/eu_tabpage.c:1341:26: note: Function 'on_tabpage_set_title' argument 1 names different: declaration 'ntab' definition 'ontab'.
on_tabpage_set_title(int ontab, TCHAR *title)
                         ^
src/eu_tabpage.c:902:21: style: Local variable 'count' shadows outer variable [shadowVariable]
                int count = TabCtrl_GetItemCount(hwnd);
                    ^
src/eu_tabpage.c:762:9: note: Shadowed declaration
    int count = 0;
        ^
src/eu_tabpage.c:902:21: note: Shadow variable
                int count = TabCtrl_GetItemCount(hwnd);
                    ^
src/eu_tabpage.c:373:11: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
    int i = 0;
          ^
src/eu_tabpage.c:559:64: style: Variable 'index' is assigned a value that is never used. [unreadVariable]
    if ((num = on_tabpage_sel_number(&v, false)) > 0 && (index = eu_cvector_at(v, tab_move_from)) >= 0)
                                                               ^
src/eu_tabpage.c:585:16: style: Variable 'fn' is assigned a value that is never used. [unreadVariable]
        int fn = 0;
               ^
src/eu_tabpage.c:684:14: style: Variable 'num' is assigned a value that is never used. [unreadVariable]
    if ((num = on_tabpage_sel_number(&v, true)) > 1)
             ^
src/eu_tabpage.c:723:18: style: Variable 'num' is assigned a value that is never used. [unreadVariable]
        if ((num = on_tabpage_sel_number(&v, true)) > 1)
                 ^
src/eu_tabpage.c:725:22: style: Variable 'c' is assigned a value that is never used. [unreadVariable]
            int i, c = 0;
                     ^
src/eu_tabpage.c:857:19: style: Variable 'count' is assigned a value that is never used. [unreadVariable]
            count = TabCtrl_GetItemCount(hwnd);
                  ^
src/eu_tabpage.c:902:27: style: Variable 'count' is assigned a value that is never used. [unreadVariable]
                int count = TabCtrl_GetItemCount(hwnd);
                          ^
src/eu_tabpage.c:1107:20: style: Variable 'tab_height' is assigned a value that is never used. [unreadVariable]
    int tab_height = 0;
                   ^
src/eu_theme.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_theme.c:148:35: style:inconclusive: Function 'on_theme_load_script' argument 1 names different: declaration 'name' definition 'ac_name'. [funcArgNamesDifferent]
on_theme_load_script(const TCHAR *ac_name)
                                  ^
src/eu_theme.h:43:40: note: Function 'on_theme_load_script' argument 1 names different: declaration 'name' definition 'ac_name'.
int  on_theme_load_script(const TCHAR *name);
                                       ^
src/eu_theme.c:148:35: note: Function 'on_theme_load_script' argument 1 names different: declaration 'name' definition 'ac_name'.
on_theme_load_script(const TCHAR *ac_name)
                                  ^
src/eu_theme.c:929:31: style: Variable 'value' is assigned a value that is never used. [unreadVariable]
                    int value = 0;
                              ^
src/eu_theme_dark.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_theme_dark.c:141:16: style: Local variable 'hth' shadows outer variable [shadowVariable]
        HTHEME hth = fnOpenThemeData(hwnd, _T("TAB;HEADER;WINDOW"));
               ^
src/eu_theme_dark.c:134:12: note: Shadowed declaration
    HTHEME hth = NULL;
           ^
src/eu_theme_dark.c:141:16: note: Shadow variable
        HTHEME hth = fnOpenThemeData(hwnd, _T("TAB;HEADER;WINDOW"));
               ^
src/eu_theme_menu.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_toolbar.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_toolbar.c:651:17: style: The scope of the variable 'read_len' can be reduced. [variableScope]
            int read_len = 0;
                ^
src/eu_toolbar.c:1144:14: style: The scope of the variable 'tool_proc' can be reduced. [variableScope]
    intptr_t tool_proc = 0;
             ^
src/eu_toolbar.c:249:43: style:inconclusive: Function 'on_toolbar_setpos_clipdlg' argument 2 names different: declaration 'parent' definition 'hparent'. [funcArgNamesDifferent]
on_toolbar_setpos_clipdlg(HWND hwnd, HWND hparent)
                                          ^
src/eu_toolbar.h:31:48: note: Function 'on_toolbar_setpos_clipdlg' argument 2 names different: declaration 'parent' definition 'hparent'.
void on_toolbar_setpos_clipdlg(HWND hwnd, HWND parent);
                                               ^
src/eu_toolbar.c:249:43: note: Function 'on_toolbar_setpos_clipdlg' argument 2 names different: declaration 'parent' definition 'hparent'.
on_toolbar_setpos_clipdlg(HWND hwnd, HWND hparent)
                                          ^
src/eu_toolbar.c:1140:24: style:inconclusive: Function 'on_toolbar_create' argument 1 names different: declaration 'hwnd' definition 'parent'. [funcArgNamesDifferent]
on_toolbar_create(HWND parent)
                       ^
src/eu_toolbar.h:39:29: note: Function 'on_toolbar_create' argument 1 names different: declaration 'hwnd' definition 'parent'.
int  on_toolbar_create(HWND hwnd);
                            ^
src/eu_toolbar.c:1140:24: note: Function 'on_toolbar_create' argument 1 names different: declaration 'hwnd' definition 'parent'.
on_toolbar_create(HWND parent)
                       ^
src/eu_toolbar.c:186:20: style: Variable 'status' is assigned a value that is never used. [unreadVariable]
    LRESULT status = 0;
                   ^
src/eu_toolbar.c:1144:24: style: Variable 'tool_proc' is assigned a value that is never used. [unreadVariable]
    intptr_t tool_proc = 0;
                       ^
src/eu_treebar.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_treebar.c:261:26: warning: Either the condition '!filename' is redundant or there is possible null pointer dereference: filename. [nullPointerRedundantCheck]
            len = strlen(filename) + strlen(newname) + MAX_BUFFER;
                         ^
src/eu_treebar.c:263:30: note: Assuming that condition '!filename' is not redundant
            if (!pathname || !filename || !newname || !postquote)
                             ^
src/eu_treebar.c:261:26: note: Null pointer dereference
            len = strlen(filename) + strlen(newname) + MAX_BUFFER;
                         ^
src/eu_treebar.c:261:45: warning: Either the condition '!newname' is redundant or there is possible null pointer dereference: newname. [nullPointerRedundantCheck]
            len = strlen(filename) + strlen(newname) + MAX_BUFFER;
                                            ^
src/eu_treebar.c:263:43: note: Assuming that condition '!newname' is not redundant
            if (!pathname || !filename || !newname || !postquote)
                                          ^
src/eu_treebar.c:261:45: note: Null pointer dereference
            len = strlen(filename) + strlen(newname) + MAX_BUFFER;
                                            ^
src/eu_treebar.c:400:26: warning: Either the condition '!filepath' is redundant or there is possible null pointer dereference: filepath. [nullPointerRedundantCheck]
            len = strlen(filepath) + 8;
                         ^
src/eu_treebar.c:402:30: note: Assuming that condition '!filepath' is not redundant
            if (!pathname || !filepath || !postquote)
                             ^
src/eu_treebar.c:400:26: note: Null pointer dereference
            len = strlen(filepath) + 8;
                         ^
src/eu_treebar.c:706:12: style: The scope of the variable 'len' can be reduced. [variableScope]
    size_t len = 0;
           ^
src/eu_treebar.c:828:12: style: The scope of the variable 'dri_len' can be reduced. [variableScope]
    size_t dri_len;
           ^
src/eu_treebar.c:1947:34: style:inconclusive: Function 'on_treebar_adjust_filetree' argument 1 names different: declaration 'treebar' definition 'rect_filebar'. [funcArgNamesDifferent]
on_treebar_adjust_filetree(RECT *rect_filebar, RECT *rect_filetree)
                                 ^
src/eu_treebar.h:52:39: note: Function 'on_treebar_adjust_filetree' argument 1 names different: declaration 'treebar' definition 'rect_filebar'.
void on_treebar_adjust_filetree(RECT *treebar, RECT *rect);
                                      ^
src/eu_treebar.c:1947:34: note: Function 'on_treebar_adjust_filetree' argument 1 names different: declaration 'treebar' definition 'rect_filebar'.
on_treebar_adjust_filetree(RECT *rect_filebar, RECT *rect_filetree)
                                 ^
src/eu_treebar.c:1947:54: style:inconclusive: Function 'on_treebar_adjust_filetree' argument 2 names different: declaration 'rect' definition 'rect_filetree'. [funcArgNamesDifferent]
on_treebar_adjust_filetree(RECT *rect_filebar, RECT *rect_filetree)
                                                     ^
src/eu_treebar.h:52:54: note: Function 'on_treebar_adjust_filetree' argument 2 names different: declaration 'rect' definition 'rect_filetree'.
void on_treebar_adjust_filetree(RECT *treebar, RECT *rect);
                                                     ^
src/eu_treebar.c:1947:54: note: Function 'on_treebar_adjust_filetree' argument 2 names different: declaration 'rect' definition 'rect_filetree'.
on_treebar_adjust_filetree(RECT *rect_filebar, RECT *rect_filetree)
                                                     ^
src/eu_treebar.c:239:26: style: Local variable 'len' shadows outer variable [shadowVariable]
            const size_t len = _tcslen(old->pathname) + _tcslen(ptvi->pszText) + 8;
                         ^
src/eu_treebar.c:222:12: note: Shadowed declaration
    size_t len = 0;
           ^
src/eu_treebar.c:239:26: note: Shadow variable
            const size_t len = _tcslen(old->pathname) + _tcslen(ptvi->pszText) + 8;
                         ^
src/eu_treebar.c:1769:26: style: Local variable 'rc' shadows outer variable [shadowVariable]
                    RECT rc;
                         ^
src/eu_treebar.c:1754:18: note: Shadowed declaration
            RECT rc = {0};
                 ^
src/eu_treebar.c:1769:26: note: Shadow variable
                    RECT rc;
                         ^
src/eu_treebar.c:1797:44: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
                style & TCS_OWNERDRAWFIXED ? (void)0 : SetWindowLongPtr(hwnd, GWL_STYLE, style | TCS_OWNERDRAWFIXED);
                                           ^
src/eu_treebar.c:222:16: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    size_t len = 0;
               ^
src/eu_treebar.c:354:16: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    size_t len = 0;
               ^
src/eu_treebar.c:706:16: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    size_t len = 0;
               ^
src/eu_treebar.c:1764:34: style: Variable 'hbr_bkgnd' is assigned a value that is never used. [unreadVariable]
                HBRUSH hbr_bkgnd = (HBRUSH)on_dark_get_brush();
                                 ^
src/eu_updatechecker.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_updatechecker.c:31:17: style: The scope of the variable 'split' can be reduced. [variableScope]
    const char *split = "\"tag_name\": ";
                ^
src/eu_updatechecker.c:246:13: style: The scope of the variable 'dtag' can be reduced. [variableScope]
    int64_t dtag = 0;
            ^
src/eu_updatechecker.c:246:18: style: Variable 'dtag' is assigned a value that is never used. [unreadVariable]
    int64_t dtag = 0;
                 ^
src/eu_updatechecker.c:288:13: warning: %I64d in format string (no. 1) requires '__int64' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
            printf("curerent_version = %I64d, tag = %I64d\n", dtag, tag);
            ^
src/eu_updatechecker.c:288:13: warning: %I64d in format string (no. 2) requires '__int64' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
            printf("curerent_version = %I64d, tag = %I64d\n", dtag, tag);
            ^
src/eu_util.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_util.c:548:9: style: Condition 'encrypt_len' is always true [knownConditionTrueFalse]
    if (encrypt_len)
        ^
src/eu_util.c:534:29: note: Assuming that condition '!encrypt_len' is not redundant
    if (decrypt_len <= 0 || !encrypt_len)
                            ^
src/eu_util.c:538:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:548:9: note: Condition 'encrypt_len' is always true
    if (encrypt_len)
        ^
src/eu_util.c:574:13: style: Condition 'encrypt_len' is always true [knownConditionTrueFalse]
        if (encrypt_len)
            ^
src/eu_util.c:534:29: note: Assuming that condition '!encrypt_len' is not redundant
    if (decrypt_len <= 0 || !encrypt_len)
                            ^
src/eu_util.c:538:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:574:13: note: Condition 'encrypt_len' is always true
        if (encrypt_len)
            ^
src/eu_util.c:614:9: style: Condition 'decrypt_len' is always true [knownConditionTrueFalse]
    if (decrypt_len)
        ^
src/eu_util.c:600:29: note: Assuming that condition '!decrypt_len' is not redundant
    if (encrypt_len <= 0 || !decrypt_len)
                            ^
src/eu_util.c:604:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:614:9: note: Condition 'decrypt_len' is always true
    if (decrypt_len)
        ^
src/eu_util.c:639:13: style: Condition 'decrypt_len' is always true [knownConditionTrueFalse]
        if (decrypt_len)
            ^
src/eu_util.c:600:29: note: Assuming that condition '!decrypt_len' is not redundant
    if (encrypt_len <= 0 || !decrypt_len)
                            ^
src/eu_util.c:604:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:639:13: note: Condition 'decrypt_len' is always true
        if (decrypt_len)
            ^
src/eu_util.c:675:9: style: Condition 'encrypt_len' is always true [knownConditionTrueFalse]
    if (encrypt_len)
        ^
src/eu_util.c:661:29: note: Assuming that condition '!encrypt_len' is not redundant
    if (decrypt_len <= 0 || !encrypt_len)
                            ^
src/eu_util.c:665:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:675:9: note: Condition 'encrypt_len' is always true
    if (encrypt_len)
        ^
src/eu_util.c:693:9: style: Condition 'encrypt_len' is always true [knownConditionTrueFalse]
    if (encrypt_len)
        ^
src/eu_util.c:661:29: note: Assuming that condition '!encrypt_len' is not redundant
    if (decrypt_len <= 0 || !encrypt_len)
                            ^
src/eu_util.c:665:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:693:9: note: Condition 'encrypt_len' is always true
    if (encrypt_len)
        ^
src/eu_util.c:730:9: style: Condition 'decrypt_len' is always true [knownConditionTrueFalse]
    if (decrypt_len)
        ^
src/eu_util.c:716:29: note: Assuming that condition '!decrypt_len' is not redundant
    if (encrypt_len <= 0 || !decrypt_len)
                            ^
src/eu_util.c:720:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:730:9: note: Condition 'decrypt_len' is always true
    if (decrypt_len)
        ^
src/eu_util.c:748:9: style: Condition 'decrypt_len' is always true [knownConditionTrueFalse]
    if (decrypt_len)
        ^
src/eu_util.c:716:29: note: Assuming that condition '!decrypt_len' is not redundant
    if (encrypt_len <= 0 || !decrypt_len)
                            ^
src/eu_util.c:720:9: note: Assuming condition is false
    if (!util_ssl_open_symbol(fn_name, 2, pfunc))
        ^
src/eu_util.c:748:9: note: Condition 'decrypt_len' is always true
    if (decrypt_len)
        ^
src/eu_util.c:1295:26: style: Same value in both branches of ternary operator. [duplicateValueTernary]
        plen ? *plen = 0 : (void)0;
                         ^
src/eu_util.c:2489:97: style: Same expression on both sides of '|'. [duplicateExpression]
        st_struct.fFlags = FOF_SILENT | FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_NOCONFIRMMKDIR | FOF_SILENT | FOF_FILESONLY;
                                                                                                ^
src/eu_util.c:429:19: style: The scope of the variable 'sha224' can be reduced. [variableScope]
    unsigned char sha224[SHA224_DIGEST_LENGTH + 1] = {0};
                  ^
src/eu_util.c:764:13: style: The scope of the variable 'buf' can be reduced. [variableScope]
    uint8_t buf[BUFF_64K];
            ^
src/eu_util.c:765:13: style: The scope of the variable 'md' can be reduced. [variableScope]
    uint8_t md[MD5_DIGEST_LENGTH+1] = {0};
            ^
src/eu_util.c:766:10: style: The scope of the variable 'text' can be reduced. [variableScope]
    char text[MD5_DIGEST_LENGTH * 2 + 1] = {0};
         ^
src/eu_util.c:793:13: style: The scope of the variable 'buf' can be reduced. [variableScope]
    uint8_t buf[BUFF_64K];
            ^
src/eu_util.c:794:13: style: The scope of the variable 'md' can be reduced. [variableScope]
    uint8_t md[SHA_DIGEST_LENGTH+1] = {0};
            ^
src/eu_util.c:795:10: style: The scope of the variable 'text' can be reduced. [variableScope]
    char text[SHA_DIGEST_LENGTH * 2 + 1] = {0};
         ^
src/eu_util.c:822:13: style: The scope of the variable 'buf' can be reduced. [variableScope]
    uint8_t buf[BUFF_64K];
            ^
src/eu_util.c:823:13: style: The scope of the variable 'md' can be reduced. [variableScope]
    uint8_t md[SHA256_DIGEST_LENGTH+1] = {0};
            ^
src/eu_util.c:824:10: style: The scope of the variable 'text' can be reduced. [variableScope]
    char text[SHA256_DIGEST_LENGTH * 2 + 1] = {0};
         ^
src/eu_util.c:866:17: style: The scope of the variable 'res' can be reduced. [variableScope]
            int res = 0;
                ^
src/eu_util.c:948:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
src/eu_util.c:2180:18: style: The scope of the variable 'sptr' can be reduced. [variableScope]
    char *pptr, *sptr, *start;
                 ^
src/eu_util.c:2714:12: style: The scope of the variable 'offset' can be reduced. [variableScope]
    size_t offset = 0;
           ^
src/eu_util.c:776:19: style: Checking if unsigned expression 'i' is less than zero. [unsignedLessThanZero]
            if (i <= 0)
                  ^
src/eu_util.c:805:19: style: Checking if unsigned expression 'i' is less than zero. [unsignedLessThanZero]
            if (i <= 0)
                  ^
src/eu_util.c:834:19: style: Checking if unsigned expression 'i' is less than zero. [unsignedLessThanZero]
            if (i <= 0)
                  ^
src/eu_util.c:341:61: style:inconclusive: Function 'util_string_to_struct' argument 3 names different: declaration 'bufsize' definition 'len'. [funcArgNamesDifferent]
util_string_to_struct(const char *buffer, void *buf, size_t len)
                                                            ^
src/eu_util.h:115:68: note: Function 'util_string_to_struct' argument 3 names different: declaration 'bufsize' definition 'len'.
bool   util_string_to_struct(const char *buffer, void *buf, size_t bufsize);
                                                                   ^
src/eu_util.c:341:61: note: Function 'util_string_to_struct' argument 3 names different: declaration 'bufsize' definition 'len'.
util_string_to_struct(const char *buffer, void *buf, size_t len)
                                                            ^
src/eu_util.c:1070:49: style:inconclusive: Function 'util_set_working_dir' argument 2 names different: declaration 'old' definition 'pold'. [funcArgNamesDifferent]
util_set_working_dir(const TCHAR *path, TCHAR **pold)
                                                ^
src/eu_util.h:88:53: note: Function 'util_set_working_dir' argument 2 names different: declaration 'old' definition 'pold'.
int util_set_working_dir(const TCHAR *path, TCHAR **old);
                                                    ^
src/eu_util.c:1070:49: note: Function 'util_set_working_dir' argument 2 names different: declaration 'old' definition 'pold'.
util_set_working_dir(const TCHAR *path, TCHAR **pold)
                                                ^
src/eu_util.c:1098:37: style:inconclusive: Function 'util_creater_window' argument 2 names different: declaration 'hparent' definition 'hwnd_parent'. [funcArgNamesDifferent]
util_creater_window(HWND hwnd, HWND hwnd_parent)
                                    ^
src/eu_util.h:116:44: note: Function 'util_creater_window' argument 2 names different: declaration 'hparent' definition 'hwnd_parent'.
bool   util_creater_window(HWND hwnd, HWND hparent);
                                           ^
src/eu_util.c:1098:37: note: Function 'util_creater_window' argument 2 names different: declaration 'hparent' definition 'hwnd_parent'.
util_creater_window(HWND hwnd, HWND hwnd_parent)
                                    ^
src/eu_util.c:1157:47: style:inconclusive: Function 'util_strdup_select' argument 2 names different: declaration 'text_len' definition 'plen'. [funcArgNamesDifferent]
util_strdup_select(eu_tabpage *pnode, size_t *plen, size_t multiple)
                                              ^
src/eu_util.h:95:54: note: Function 'util_strdup_select' argument 2 names different: declaration 'text_len' definition 'plen'.
char*  util_strdup_select(eu_tabpage *pnode, size_t *text_len, size_t multiple);
                                                     ^
src/eu_util.c:1157:47: note: Function 'util_strdup_select' argument 2 names different: declaration 'text_len' definition 'plen'.
util_strdup_select(eu_tabpage *pnode, size_t *plen, size_t multiple)
                                              ^
src/eu_util.c:1341:34: style:inconclusive: Function 'util_trim_left_white' argument 1 names different: declaration 'str' definition 's'. [funcArgNamesDifferent]
util_trim_left_white(const char *s, int *length)
                                 ^
src/eu_util.h:145:46: note: Function 'util_trim_left_white' argument 1 names different: declaration 'str' definition 's'.
const char* util_trim_left_white(const char *str, int *length);
                                             ^
src/eu_util.c:1341:34: note: Function 'util_trim_left_white' argument 1 names different: declaration 'str' definition 's'.
util_trim_left_white(const char *s, int *length)
                                 ^
src/eu_util.c:1605:51: style:inconclusive: Function 'util_query_hostname' argument 3 names different: declaration 'bufsize' definition 'len'. [funcArgNamesDifferent]
util_query_hostname(char *hostname, char *ip, int len)
                                                  ^
src/eu_util.h:89:55: note: Function 'util_query_hostname' argument 3 names different: declaration 'bufsize' definition 'len'.
int util_query_hostname(char *hostname, char *ip, int bufsize);
                                                      ^
src/eu_util.c:1605:51: note: Function 'util_query_hostname' argument 3 names different: declaration 'bufsize' definition 'len'.
util_query_hostname(char *hostname, char *ip, int len)
                                                  ^
src/eu_util.c:1972:31: style:inconclusive: Function 'util_setforce_eol' argument 1 names different: declaration 'pnode' definition 'p'. [funcArgNamesDifferent]
util_setforce_eol(eu_tabpage *p)
                              ^
src/eu_util.h:107:38: note: Function 'util_setforce_eol' argument 1 names different: declaration 'pnode' definition 'p'.
void   util_setforce_eol(eu_tabpage *pnode);
                                     ^
src/eu_util.c:1972:31: note: Function 'util_setforce_eol' argument 1 names different: declaration 'pnode' definition 'p'.
util_setforce_eol(eu_tabpage *p)
                              ^
src/eu_util.c:101:21: style: Variable 'hnsTime.LowPart' is assigned a value that is never used. [unreadVariable]
    hnsTime.LowPart = ft.dwLowDateTime;
                    ^
src/eu_util.c:102:22: style: Variable 'hnsTime.HighPart' is assigned a value that is never used. [unreadVariable]
    hnsTime.HighPart = ft.dwHighDateTime;
                     ^
src/eu_util.c:895:25: style: Variable 'out_len' is assigned a value that is never used. [unreadVariable]
            int out_len = ((eu_bio_ctrl)pfunc[7])(mem, BIO_CTRL_INFO, 0, (char *)(pout));
                        ^
src/eu_util.c:1228:20: style: Variable 'buf_len' is assigned a value that is never used. [unreadVariable]
    sptr_t buf_len = 0;
                   ^
src/eu_util.c:2099:19: style: Variable 'dw_size' is assigned a value that is never used. [unreadVariable]
    DWORD dw_size = 0;
                  ^
src/eu_util.c:2404:20: style: Variable 'quote' is assigned a value that is never used. [unreadVariable]
        bool quote = false;
                   ^
src/eu_view.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/eu_view.c:73:25: style:inconclusive: Function 'on_view_switch_type' argument 1 names different: declaration 'type' definition 'm_type'. [funcArgNamesDifferent]
on_view_switch_type(int m_type)
                        ^
src/eu_view.h:29:29: note: Function 'on_view_switch_type' argument 1 names different: declaration 'type' definition 'm_type'.
int on_view_switch_type(int type);
                            ^
src/eu_view.c:73:25: note: Function 'on_view_switch_type' argument 1 names different: declaration 'type' definition 'm_type'.
on_view_switch_type(int m_type)
                        ^
src/eu_view.c:203:15: style: Variable 'count' is assigned a value that is never used. [unreadVariable]
    int count = 0;
              ^
src/eu_view.c:582:26: style: Variable 'found_pos' is assigned a value that is never used. [unreadVariable]
        sptr_t found_pos = 0;
                         ^
src/3rdparty/luajit/src/host/minilua.c:3629:9: warning: Null pointer dereference: fs [ctunullpointer]
Proto*f=fs->f;
        ^
src/3rdparty/luajit/src/host/minilua.c:3919:4: note: Assuming that condition 'fs' is not redundant

   ^
src/3rdparty/luajit/src/host/minilua.c:3905:10: note: Calling function 'luaK_ret', 1st argument 'fs' value is 0

         ^
src/3rdparty/luajit/src/host/minilua.c:3032:13: note: Calling function luaK_codeABC, 1st argument is null
luaK_codeABC(fs,OP_RETURN,first,nret+1,0);
            ^
src/3rdparty/luajit/src/host/minilua.c:3640:8: note: Calling function luaK_code, 1st argument is null
return luaK_code(fs,CREATE_ABC(o,a,b,c),fs->ls->lastline);
       ^
src/3rdparty/luajit/src/host/minilua.c:3629:9: note: Dereferencing argument fs that is null
Proto*f=fs->f;
        ^
src/3rdparty/luajit/src/lj_obj.h:973:10: warning: Null pointer dereference: o2 [ctunullpointer]
  *o1 = *o2;
         ^
src/3rdparty/luajit/src/lib_ffi.c:336:7: note: Assuming that condition '!tv' is not redundant

      ^
src/3rdparty/luajit/src/lib_ffi.c:339:26: note: Calling function lj_meta_tailcall, 2nd argument is null
  return lj_meta_tailcall(L, tv);
                         ^
src/3rdparty/luajit/src/lj_meta.c:83:3: note: Calling function copyTV, 3rd argument is null
  copyTV(L, base-1-LJ_FR2, tv);  /* Replace frame with new object. */
  ^
src/3rdparty/luajit/src/lj_obj.h:973:10: note: Dereferencing argument o2 that is null
  *o1 = *o2;
         ^
src/3rdparty/luajit/src/lj_buf.h:108:7: error: Null pointer dereference: sb [ctunullpointer]
  if (LJ_UNLIKELY(sz > sbufleft(sb)))
      ^
src/3rdparty/luajit/src/lj_strfmt_num.c:589:38: note: Calling function lj_strfmt_wfnum, 1st argument is null
  MSize len = (MSize)(lj_strfmt_wfnum(NULL, STRFMT_G14, o->n, buf) - buf);
                                     ^
src/3rdparty/luajit/src/lj_strfmt_num.c:287:17: note: Calling function lj_buf_more, 1st argument is null
    if (!p) p = lj_buf_more(sb, width > len ? width : len);
                ^
src/3rdparty/luajit/src/lj_buf.h:108:7: note: Dereferencing argument sb that is null
  if (LJ_UNLIKELY(sz > sbufleft(sb)))
      ^
src/3rdparty/luajit/src/lj_buf.h:195:24: warning: Null pointer dereference: sb [ctunullpointer]
  return lj_str_new(L, sb->b, sbuflen(sb));
                       ^
src/3rdparty/luajit/src/lib_table.c:161:7: note: Assuming that condition '!sbx' is not redundant

      ^
src/3rdparty/luajit/src/lib_table.c:167:34: note: Calling function lj_buf_str, 2nd argument is null
  setstrV(L, L->top-1, lj_buf_str(L, sbx));
                                 ^
src/3rdparty/luajit/src/lj_buf.h:195:24: note: Dereferencing argument sb that is null
  return lj_str_new(L, sb->b, sbuflen(sb));
                       ^
src/3rdparty/sqlite3/src/sqlite3.c:25080:8: error: Null pointer dereference: pVfs [ctunullpointer]
  rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);
       ^
src/3rdparty/sqlite3/src/sqlite3.c:103240:21: note: Calling function sqlite3JournalOpen, 1st argument is null
  sqlite3JournalOpen(0, 0, pJfd, 0, -1);
                    ^
src/3rdparty/sqlite3/src/sqlite3.c:103218:12: note: Calling function sqlite3OsOpen, 1st argument is null
    return sqlite3OsOpen(pVfs, zName, pJfd, flags, 0);
           ^
src/3rdparty/sqlite3/src/sqlite3.c:25080:8: note: Dereferencing argument pVfs that is null
  rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);
       ^
src/3rdparty/sqlite3/src/sqlite3.c:52495:10: warning: Null pointer dereference: p [ctunullpointer]
  return p->iSize;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:69032:9: note: Assuming that condition '!pBt->pHasContent' is not redundant

        ^
src/3rdparty/sqlite3/src/sqlite3.c:69036:47: note: Calling function sqlite3BitvecSize, 1st argument is null
  if( rc==SQLITE_OK && pgno<=sqlite3BitvecSize(pBt->pHasContent) ){
                                              ^
src/3rdparty/sqlite3/src/sqlite3.c:52495:10: note: Dereferencing argument p that is null
  return p->iSize;
         ^
src/3rdparty/sqlite3/src/sqlite3.c:138046:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
src/3rdparty/sqlite3/src/sqlite3.c:138126:34: note: Assuming that condition 'ppStmt==0' is not redundant

                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:138125:29: note: Calling function sqlite3LockAndPrepare, 6th argument is null
  rc = sqlite3LockAndPrepare(db,zSql,nBytes,0,0,ppStmt,pzTail);
                            ^
src/3rdparty/sqlite3/src/sqlite3.c:138046:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
src/3rdparty/sqlite3/src/sqlite3.c:138194:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
src/3rdparty/sqlite3/src/sqlite3.c:138242:34: note: Assuming that condition 'ppStmt==0' is not redundant

                                 ^
src/3rdparty/sqlite3/src/sqlite3.c:138241:24: note: Calling function sqlite3Prepare16, 5th argument is null
  rc = sqlite3Prepare16(db,zSql,nBytes,0,ppStmt,pzTail);
                       ^
src/3rdparty/sqlite3/src/sqlite3.c:138194:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
src/3rdparty/scintilla/src/src/Document.cxx:1350:0: style: The function 'AddData' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:385:0: style: The function 'AddStaticLexerModule' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/bitstream.c:130:0: style: The function 'BitStream_append' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/bitstream.c:52:0: style: The function 'BitStream_newWithBits' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:5025:0: style: The function 'ButtonUpWithModifiers' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/CaseConvert.cxx:784:0: style: The function 'CaseConvert' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:1978:0: style: The function 'ChangeSize' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:2126:0: style: The function 'ClearBeforeTentativeStart' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/ScintillaBase.cxx:532:0: style: The function 'ContextMenu' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Document.cxx:1362:0: style: The function 'ConvertToDocument' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/DBCS.cxx:14:0: style: The function 'DBCSIsLeadByte' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Decoration.cxx:310:0: style: The function 'DecorationCreate' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/ChangeHistory.cxx:406:0: style: The function 'DeletionsAt' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/win32/ScintillaDLL.cxx:26:0: style: The function 'DllMain' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:1417:0: style: The function 'DropCaret' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/ChangeHistory.cxx:330:0: style: The function 'EditionCreateHistory' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/RunStyles.cxx:99:0: style: The function 'FindNextChange' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/UniConversion.cxx:383:0: style: The function 'FixInvalidUTF8' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/PositionCache.cxx:445:0: style: The function 'FontOfPosition' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:354:0: style: The function 'FrameFiller_test' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:379:0: style: The function 'FrameFiller_testMQR' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/nsMBCSGroupProber.cpp:222:0: style: The function 'GetDetectorState' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:396:0: style: The function 'GetDeviceScaleFactorWhenGdiScalingActive' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/win32/HanjaDic.cxx:136:0: style: The function 'GetHangulOfHanja' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/KeyMap.cxx:50:0: style: The function 'GetKeyMap' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:331:0: style: The function 'GetLexerCount' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:345:0: style: The function 'GetLexerFactory' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:336:0: style: The function 'GetLexerName' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:371:0: style: The function 'GetLibraryPropertyNames' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:379:0: style: The function 'GetNameSpace' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:5113:0: style: The function 'Idle' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:5292:0: style: The function 'IdleWork' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:4057:0: style: The function 'KeyDownWithModifiers' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexers/LexD.cxx:201:0: style: The function 'LexerFactoryDInsensitive' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:361:0: style: The function 'LexerNameFromID' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:2801:0: style: The function 'LoadReverseArrowCursor' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/mmask.c:95:0: style: The function 'MMask_makeMaskedFrame' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/mask.c:151:0: style: The function 'Mask_makeMaskedFrame' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/CallTip.cxx:266:0: style: The function 'MouseClick' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:4633:0: style: The function 'MouseLeave' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:169:0: style: The function 'NotifyLexerChanged' is never used. [unusedFunction]

^
src/3rdparty/libmysql/include/openssl/applink.c:97:0: style: The function 'OPENSSL_Applink' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/CallTip.cxx:242:0: style: The function 'PaintCT' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:3906:0: style: The function 'Platform_Finalise' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/win32/PlatWin.cxx:3900:0: style: The function 'Platform_Initialise' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:917:0: style: The function 'QRcode_APIVersion' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:930:0: style: The function 'QRcode_APIVersionString' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:783:0: style: The function 'QRcode_List_size' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:935:0: style: The function 'QRcode_clearCache' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:698:0: style: The function 'QRcode_encodeData' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:712:0: style: The function 'QRcode_encodeDataMQR' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:703:0: style: The function 'QRcode_encodeString8bit' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:727:0: style: The function 'QRcode_encodeString8bitMQR' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:896:0: style: The function 'QRcode_encodeString8bitStructured' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:654:0: style: The function 'QRcode_encodeStringMQR' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrencode.c:904:0: style: The function 'QRcode_encodeStringStructured' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrinput.c:276:0: style: The function 'QRinput_appendECIheader' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrinput.c:174:0: style: The function 'QRinput_getErrorCorrectionLevel' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrinput.c:111:0: style: The function 'QRinput_new' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrinput.c:179:0: style: The function 'QRinput_setErrorCorrectionLevel' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrinput.c:1618:0: style: The function 'QRinput_setFNC1First' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrinput.c:1629:0: style: The function 'QRinput_setFNC1Second' is never used. [unusedFunction]

^
src/3rdparty/qrencode/src/qrinput.c:191:0: style: The function 'QRinput_setVersionAndErrorCorrectionLevel' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/PositionCache.cxx:423:0: style: The function 'RepresentationCount' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/PositionCache.cxx:449:0: style: The function 'RepresentationWidth' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/win32/ScintillaDLL.cxx:21:0: style: The function 'Scintilla_DirectFunction' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/ViewStyle.cxx:675:0: style: The function 'SetElementBase' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/ChangeHistory.cxx:326:0: style: The function 'SetEpoch' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/lexlib/Lexilla.cxx:375:0: style: The function 'SetLibraryProperty' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/CaseFolder.cxx:40:0: style: The function 'SetTranslation' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/ScintillaBase.cxx:527:0: style: The function 'ShouldDisplayPopup' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Document.cxx:292:0: style: The function 'TentativeUndo' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/Editor.cxx:5137:0: style: The function 'TickFor' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/src/UniConversion.cxx:38:0: style: The function 'UTF8PositionFromUTF16Position' is never used. [unusedFunction]

^
src/eu_main.c:84:0: style: The function '_tmain' is never used. [unusedFunction]

^
src/eu_map.c:267:0: style: The function 'ac_last' is never used. [unusedFunction]

^
src/eu_map.c:289:0: style: The function 'ac_prev' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/host/buildvm.c:134:0: style: The function 'collect_reloc' is never used. [unusedFunction]

^
src/3rdparty/libiconv/src/lib/relocatable.c:190:0: style: The function 'compute_curr_prefix' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/chardet.cpp:99:0: style: The function 'detect_dataend' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/chardet.cpp:128:0: style: The function 'detect_destroy' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/chardet.cpp:103:0: style: The function 'detect_handledata' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/chardet.cpp:83:0: style: The function 'detect_init' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/chardet.cpp:95:0: style: The function 'detect_reset' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/chardet.cpp:59:0: style: The function 'detect_uversion' is never used. [unusedFunction]

^
src/3rdparty/chardet/src/chardet.cpp:55:0: style: The function 'detect_version' is never used. [unusedFunction]

^
src/eu_script.c:393:0: style: The function 'do_lua_point' is never used. [unusedFunction]

^
src/eu_api.c:1457:0: style: The function 'eu_accel_ptr' is never used. [unusedFunction]

^
src/eu_api.c:979:0: style: The function 'eu_ascii_escaped' is never used. [unusedFunction]

^
src/eu_api.c:1412:0: style: The function 'eu_config_ptr' is never used. [unusedFunction]

^
src/eu_proc.c:285:0: style: The function 'eu_create_fullscreen' is never used. [unusedFunction]

^
src/eu_api.c:302:0: style: The function 'eu_exist_libcurl' is never used. [unusedFunction]

^
src/eu_hook.c:113:0: style: The function 'eu_hook_exception' is never used. [unusedFunction]

^
src/eu_changes.c:892:0: style: The function 'eu_i18n_msgbox' is never used. [unusedFunction]

^
src/eu_api.c:2033:0: style: The function 'eu_init_calltip_tree' is never used. [unusedFunction]

^
src/eu_api.c:2075:0: style: The function 'eu_init_completed_tree' is never used. [unusedFunction]

^
src/eu_script.c:511:0: style: The function 'eu_lua_script_exec' is never used. [unusedFunction]

^
src/eu_api.c:1314:0: style: The function 'eu_mbcs_utf16' is never used. [unusedFunction]

^
src/eu_api.c:596:0: style: The function 'eu_memstr' is never used. [unusedFunction]

^
src/eu_api.c:959:0: style: The function 'eu_open_file' is never used. [unusedFunction]

^
src/eu_api.c:2169:0: style: The function 'eu_pcre_named_substring' is never used. [unusedFunction]

^
src/eu_util.c:2442:0: style: The function 'eu_prepend_path' is never used. [unusedFunction]

^
src/eu_api.c:2054:0: style: The function 'eu_print_calltip_tree' is never used. [unusedFunction]

^
src/eu_api.c:2086:0: style: The function 'eu_print_completed_tree' is never used. [unusedFunction]

^
src/eu_api.c:1431:0: style: The function 'eu_theme_ptr' is never used. [unusedFunction]

^
src/eu_api.c:1485:0: style: The function 'eu_toolbar_ptr' is never used. [unusedFunction]

^
src/eu_api.c:643:0: style: The function 'eu_update_array' is never used. [unusedFunction]

^
src/eu_api.c:1283:0: style: The function 'eu_utf16_mbcs' is never used. [unusedFunction]

^
src/eu_hook.c:505:0: style: The function 'find_delayload_thunk_by_name' is never used. [unusedFunction]

^
src/eu_hook.c:488:0: style: The function 'find_iat_thunk' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1886:0: style: The function 'fold_abc_fwd' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1936:0: style: The function 'fold_abc_invar' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1913:0: style: The function 'fold_abc_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2392:0: style: The function 'fold_barrier_tab' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2402:0: style: The function 'fold_barrier_tnew_tdup' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:583:0: style: The function 'fold_bufhdr_merge' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:589:0: style: The function 'fold_bufput_bufstr' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:730:0: style: The function 'fold_bufput_kfold_fmt' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:692:0: style: The function 'fold_bufput_kfold_op' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:708:0: style: The function 'fold_bufput_kfold_rep' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:627:0: style: The function 'fold_bufput_kgc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:648:0: style: The function 'fold_bufstr_kfold_cse' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2022:0: style: The function 'fold_comm_bxor' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1988:0: style: The function 'fold_comm_comp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2005:0: style: The function 'fold_comm_dup' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2014:0: style: The function 'fold_comm_dup_minmax' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1972:0: style: The function 'fold_comm_equal' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1300:0: style: The function 'fold_cse_conv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2142:0: style: The function 'fold_cse_uref' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2299:0: style: The function 'fold_fload_cdata_int64_kgc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2324:0: style: The function 'fold_fload_cdata_ptr_int64_cnew' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2313:0: style: The function 'fold_fload_cdata_typeid_cnew' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2288:0: style: The function 'fold_fload_cdata_typeid_kgc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2279:0: style: The function 'fold_fload_func_ffid_kgc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2271:0: style: The function 'fold_fload_sbuf' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2240:0: style: The function 'fold_fload_str_len_kgc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2248:0: style: The function 'fold_fload_str_len_snew' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2258:0: style: The function 'fold_fload_str_len_tostr' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2232:0: style: The function 'fold_fload_tab_ah' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2212:0: style: The function 'fold_fload_tab_tdup_asize' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2220:0: style: The function 'fold_fload_tab_tdup_hmask' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2196:0: style: The function 'fold_fload_tab_tnew_asize' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2204:0: style: The function 'fold_fload_tab_tnew_hmask' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2375:0: style: The function 'fold_fold_base' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2178:0: style: The function 'fold_fwd_href_tdup' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2168:0: style: The function 'fold_fwd_href_tnew' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2347:0: style: The function 'fold_fwd_sload' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:770:0: style: The function 'fold_kfold_add_kgc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:794:0: style: The function 'fold_kfold_add_kptr' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:808:0: style: The function 'fold_kfold_add_kright' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:320:0: style: The function 'fold_kfold_bnot' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:444:0: style: The function 'fold_kfold_bnot64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:326:0: style: The function 'fold_kfold_bswap' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:454:0: style: The function 'fold_kfold_bswap64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:877:0: style: The function 'fold_kfold_conv_kint64_int_i64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:864:0: style: The function 'fold_kfold_conv_kint64_num_i64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:870:0: style: The function 'fold_kfold_conv_kint64_num_u64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:841:0: style: The function 'fold_kfold_conv_kint_ext' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:855:0: style: The function 'fold_kfold_conv_kint_i64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:826:0: style: The function 'fold_kfold_conv_kint_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:832:0: style: The function 'fold_kfold_conv_kintu32_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:913:0: style: The function 'fold_kfold_conv_knum_i64_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:883:0: style: The function 'fold_kfold_conv_knum_int_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:900:0: style: The function 'fold_kfold_conv_knum_u32_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:919:0: style: The function 'fold_kfold_conv_knum_u64_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:216:0: style: The function 'fold_kfold_fpcall1' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:227:0: style: The function 'fold_kfold_fpcall2' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:208:0: style: The function 'fold_kfold_fpmath' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2118:0: style: The function 'fold_kfold_hload_kkptr' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:399:0: style: The function 'fold_kfold_int64arith' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:408:0: style: The function 'fold_kfold_int64arith2' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:471:0: style: The function 'fold_kfold_int64comp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:492:0: style: The function 'fold_kfold_int64comp0' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:432:0: style: The function 'fold_kfold_int64shift' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:301:0: style: The function 'fold_kfold_intarith' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:340:0: style: The function 'fold_kfold_intcomp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:358:0: style: The function 'fold_kfold_intcomp0' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:309:0: style: The function 'fold_kfold_intovarith' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:965:0: style: The function 'fold_kfold_kref' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:197:0: style: The function 'fold_kfold_ldexp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:189:0: style: The function 'fold_kfold_numabsneg' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:179:0: style: The function 'fold_kfold_numarith' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:256:0: style: The function 'fold_kfold_numcomp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:240:0: style: The function 'fold_kfold_numpow' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:514:0: style: The function 'fold_kfold_snew_empty' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:506:0: style: The function 'fold_kfold_snew_kptr' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:551:0: style: The function 'fold_kfold_strcmp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:522:0: style: The function 'fold_kfold_strref' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:530:0: style: The function 'fold_kfold_strref_snew' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:939:0: style: The function 'fold_kfold_strto' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:820:0: style: The function 'fold_kfold_tobit' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:931:0: style: The function 'fold_kfold_tostr_kint' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:925:0: style: The function 'fold_kfold_tostr_knum' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2053:0: style: The function 'fold_merge_eqne_snew_kgc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1325:0: style: The function 'fold_narrow_convert' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2413:0: style: The function 'fold_prof' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1824:0: style: The function 'fold_reassoc_bxor' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1807:0: style: The function 'fold_reassoc_dup' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1816:0: style: The function 'fold_reassoc_dup_minmax' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1767:0: style: The function 'fold_reassoc_intarith_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1787:0: style: The function 'fold_reassoc_intarith_k64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1863:0: style: The function 'fold_reassoc_minmax_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1839:0: style: The function 'fold_reassoc_shift' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1128:0: style: The function 'fold_shortcut_conv_num_int' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:990:0: style: The function 'fold_shortcut_dropleft' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:984:0: style: The function 'fold_shortcut_left' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1001:0: style: The function 'fold_shortcut_leftleft' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:975:0: style: The function 'fold_shortcut_round' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1710:0: style: The function 'fold_simplify_andk_shiftk' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1721:0: style: The function 'fold_simplify_andor_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1739:0: style: The function 'fold_simplify_andor_k64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1561:0: style: The function 'fold_simplify_band_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1574:0: style: The function 'fold_simplify_bor_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1587:0: style: The function 'fold_simplify_bxor_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1193:0: style: The function 'fold_simplify_conv_flt_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1150:0: style: The function 'fold_simplify_conv_i64_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1175:0: style: The function 'fold_simplify_conv_int_i64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1139:0: style: The function 'fold_simplify_conv_int_num' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1279:0: style: The function 'fold_simplify_conv_narrow' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1234:0: style: The function 'fold_simplify_conv_sext' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1223:0: style: The function 'fold_simplify_floor_conv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1341:0: style: The function 'fold_simplify_intadd_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1386:0: style: The function 'fold_simplify_intadd_k64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1443:0: style: The function 'fold_simplify_intmod_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1456:0: style: The function 'fold_simplify_intmod_kleft' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1349:0: style: The function 'fold_simplify_intmul_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1423:0: style: The function 'fold_simplify_intmul_k32' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1431:0: style: The function 'fold_simplify_intmul_k64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1465:0: style: The function 'fold_simplify_intsub' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1364:0: style: The function 'fold_simplify_intsub_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1394:0: style: The function 'fold_simplify_intsub_k64' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1375:0: style: The function 'fold_simplify_intsub_kleft' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1473:0: style: The function 'fold_simplify_intsubadd_leftcancel' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1511:0: style: The function 'fold_simplify_intsubadd_rightcancel' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1530:0: style: The function 'fold_simplify_intsubaddadd_cancel' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1486:0: style: The function 'fold_simplify_intsubsub_leftcancel' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1500:0: style: The function 'fold_simplify_intsubsub_rightcancel' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1017:0: style: The function 'fold_simplify_numadd_negx' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1027:0: style: The function 'fold_simplify_numadd_xneg' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1063:0: style: The function 'fold_simplify_nummuldiv_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1093:0: style: The function 'fold_simplify_nummuldiv_negk' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1103:0: style: The function 'fold_simplify_nummuldiv_negneg' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1113:0: style: The function 'fold_simplify_numpow_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1036:0: style: The function 'fold_simplify_numsub_k' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1044:0: style: The function 'fold_simplify_numsub_negk' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1053:0: style: The function 'fold_simplify_numsub_xneg' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1656:0: style: The function 'fold_simplify_shift1_ki' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1671:0: style: The function 'fold_simplify_shift2_ki' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1636:0: style: The function 'fold_simplify_shift_andk' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1606:0: style: The function 'fold_simplify_shift_ik' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1684:0: style: The function 'fold_simplify_shiftk_andk' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:1203:0: style: The function 'fold_simplify_tobit_conv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_fold.c:2360:0: style: The function 'fold_xload_kptr' is never used. [unusedFunction]

^
src/eu_hex.c:2012:0: style: The function 'hexview_map_read' is never used. [unusedFunction]

^
src/eu_hex.c:2094:0: style: The function 'hexview_updata' is never used. [unusedFunction]

^
src/eu_hex.c:498:0: style: The function 'hexview_vscroll_visible' is never used. [unusedFunction]

^
src/3rdparty/scintilla/src/boostregex/BoostRegExSearch.cxx:440:0: style: The function 'isLineStart' is never used. [unusedFunction]

^
src/eu_toolbar.c:1027:0: style: The function 'is_exec_file' is never used. [unusedFunction]

^
src/eu_json.c:975:0: style: The function 'json_parse' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ccallback.c:679:0: style: The function 'lj_ccallback_enter' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ccallback.c:701:0: style: The function 'lj_ccallback_leave' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_bit.c:145:0: style: The function 'lj_cf_bit_tohex' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:338:0: style: The function 'lj_cf_buffer_decode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:330:0: style: The function 'lj_cf_buffer_encode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:258:0: style: The function 'lj_cf_buffer_method___gc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:273:0: style: The function 'lj_cf_buffer_method___len' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:265:0: style: The function 'lj_cf_buffer_method___tostring' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:216:0: style: The function 'lj_cf_buffer_method_commit' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:249:0: style: The function 'lj_cf_buffer_method_decode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:239:0: style: The function 'lj_cf_buffer_method_encode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:56:0: style: The function 'lj_cf_buffer_method_free' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:161:0: style: The function 'lj_cf_buffer_method_get' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:116:0: style: The function 'lj_cf_buffer_method_put' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:184:0: style: The function 'lj_cf_buffer_method_putcdata' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:152:0: style: The function 'lj_cf_buffer_method_putf' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:226:0: style: The function 'lj_cf_buffer_method_ref' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:202:0: style: The function 'lj_cf_buffer_method_reserve' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:64:0: style: The function 'lj_cf_buffer_method_reset' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:88:0: style: The function 'lj_cf_buffer_method_set' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:72:0: style: The function 'lj_cf_buffer_method_skip' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_buffer.c:289:0: style: The function 'lj_cf_buffer_new' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:461:0: style: The function 'lj_cf_collectgarbage' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:587:0: style: The function 'lj_cf_coroutine_isyieldable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:574:0: style: The function 'lj_cf_coroutine_running' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:557:0: style: The function 'lj_cf_coroutine_status' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:655:0: style: The function 'lj_cf_coroutine_wrap' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:362:0: style: The function 'lj_cf_debug_debug' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:52:0: style: The function 'lj_cf_debug_getfenv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:344:0: style: The function 'lj_cf_debug_gethook' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:110:0: style: The function 'lj_cf_debug_getinfo' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:161:0: style: The function 'lj_cf_debug_getlocal' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:32:0: style: The function 'lj_cf_debug_getmetatable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:26:0: style: The function 'lj_cf_debug_getregistry' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:217:0: style: The function 'lj_cf_debug_getupvalue' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:59:0: style: The function 'lj_cf_debug_setfenv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:323:0: style: The function 'lj_cf_debug_sethook' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:187:0: style: The function 'lj_cf_debug_setlocal' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:41:0: style: The function 'lj_cf_debug_setmetatable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:222:0: style: The function 'lj_cf_debug_setupvalue' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:385:0: style: The function 'lj_cf_debug_traceback' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:228:0: style: The function 'lj_cf_debug_upvalueid' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_debug.c:239:0: style: The function 'lj_cf_debug_upvaluejoin' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:442:0: style: The function 'lj_cf_dofile' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:338:0: style: The function 'lj_cf_error' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:725:0: style: The function 'lj_cf_ffi_abi' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:637:0: style: The function 'lj_cf_ffi_alignof' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:457:0: style: The function 'lj_cf_ffi_callback_free' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:462:0: style: The function 'lj_cf_ffi_callback_set' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:530:0: style: The function 'lj_cf_ffi_cast' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:476:0: style: The function 'lj_cf_ffi_cdef' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:418:0: style: The function 'lj_cf_ffi_clib___gc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:373:0: style: The function 'lj_cf_ffi_clib___index' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:393:0: style: The function 'lj_cf_ffi_clib___newindex' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:700:0: style: The function 'lj_cf_ffi_copy' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:670:0: style: The function 'lj_cf_ffi_errno' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:714:0: style: The function 'lj_cf_ffi_fill' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:793:0: style: The function 'lj_cf_ffi_gc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:585:0: style: The function 'lj_cf_ffi_istype' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:809:0: style: The function 'lj_cf_ffi_load' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:245:0: style: The function 'lj_cf_ffi_meta___add' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:218:0: style: The function 'lj_cf_ffi_meta___call' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:210:0: style: The function 'lj_cf_ffi_meta___concat' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:260:0: style: The function 'lj_cf_ffi_meta___div' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:190:0: style: The function 'lj_cf_ffi_meta___eq' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:146:0: style: The function 'lj_cf_ffi_meta___index' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:347:0: style: The function 'lj_cf_ffi_meta___ipairs' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:205:0: style: The function 'lj_cf_ffi_meta___le' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:195:0: style: The function 'lj_cf_ffi_meta___len' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:200:0: style: The function 'lj_cf_ffi_meta___lt' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:265:0: style: The function 'lj_cf_ffi_meta___mod' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:255:0: style: The function 'lj_cf_ffi_meta___mul' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:163:0: style: The function 'lj_cf_ffi_meta___newindex' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:342:0: style: The function 'lj_cf_ffi_meta___pairs' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:270:0: style: The function 'lj_cf_ffi_meta___pow' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:250:0: style: The function 'lj_cf_ffi_meta___sub' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:281:0: style: The function 'lj_cf_ffi_meta___tostring' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:275:0: style: The function 'lj_cf_ffi_meta___unm' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:767:0: style: The function 'lj_cf_ffi_metatype' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:647:0: style: The function 'lj_cf_ffi_offsetof' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:615:0: style: The function 'lj_cf_ffi_sizeof' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:679:0: style: The function 'lj_cf_ffi_string' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:560:0: style: The function 'lj_cf_ffi_typeinfo' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_ffi.c:548:0: style: The function 'lj_cf_ffi_typeof' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:455:0: style: The function 'lj_cf_gcinfo' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:143:0: style: The function 'lj_cf_getfenv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:482:0: style: The function 'lj_cf_io_close' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:497:0: style: The function 'lj_cf_io_flush' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:519:0: style: The function 'lj_cf_io_input' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:529:0: style: The function 'lj_cf_io_lines' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:393:0: style: The function 'lj_cf_io_method___gc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:401:0: style: The function 'lj_cf_io_method___tostring' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:320:0: style: The function 'lj_cf_io_method_flush' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:387:0: style: The function 'lj_cf_io_method_lines' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:310:0: style: The function 'lj_cf_io_method_read' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:333:0: style: The function 'lj_cf_io_method_seek' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:376:0: style: The function 'lj_cf_io_method_setvbuf' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:315:0: style: The function 'lj_cf_io_method_write' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:421:0: style: The function 'lj_cf_io_open' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:524:0: style: The function 'lj_cf_io_output' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:443:0: style: The function 'lj_cf_io_popen' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:487:0: style: The function 'lj_cf_io_read' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:471:0: style: The function 'lj_cf_io_tmpfile' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:543:0: style: The function 'lj_cf_io_type' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_io.c:492:0: style: The function 'lj_cf_io_write' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:123:0: style: The function 'lj_cf_jit_attach' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:78:0: style: The function 'lj_cf_jit_flush' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:73:0: style: The function 'lj_cf_jit_off' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:68:0: style: The function 'lj_cf_jit_on' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:515:0: style: The function 'lj_cf_jit_opt_start' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:116:0: style: The function 'lj_cf_jit_security' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:101:0: style: The function 'lj_cf_jit_status' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:230:0: style: The function 'lj_cf_jit_util_funcbc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:188:0: style: The function 'lj_cf_jit_util_funcinfo' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:247:0: style: The function 'lj_cf_jit_util_funck' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:267:0: style: The function 'lj_cf_jit_util_funcuvname' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:421:0: style: The function 'lj_cf_jit_util_ircalladdr' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:397:0: style: The function 'lj_cf_jit_util_traceexitstub' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:299:0: style: The function 'lj_cf_jit_util_traceinfo' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:319:0: style: The function 'lj_cf_jit_util_traceir' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:337:0: style: The function 'lj_cf_jit_util_tracek' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:384:0: style: The function 'lj_cf_jit_util_tracemc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_jit.c:362:0: style: The function 'lj_cf_jit_util_tracesnap' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:376:0: style: The function 'lj_cf_loadfile' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:437:0: style: The function 'lj_cf_loadstring' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:131:0: style: The function 'lj_cf_math_random' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:183:0: style: The function 'lj_cf_math_randomseed' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:482:0: style: The function 'lj_cf_newproxy' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:174:0: style: The function 'lj_cf_os_clock' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:220:0: style: The function 'lj_cf_os_date' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:303:0: style: The function 'lj_cf_os_difftime' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:44:0: style: The function 'lj_cf_os_execute' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:161:0: style: The function 'lj_cf_os_exit' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:135:0: style: The function 'lj_cf_os_getenv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:74:0: style: The function 'lj_cf_os_remove' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:87:0: style: The function 'lj_cf_os_rename' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:312:0: style: The function 'lj_cf_os_setlocale' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:278:0: style: The function 'lj_cf_os_time' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_os.c:107:0: style: The function 'lj_cf_os_tmpname' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:509:0: style: The function 'lj_cf_print' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:201:0: style: The function 'lj_cf_rawequal' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:192:0: style: The function 'lj_cf_rawset' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:246:0: style: The function 'lj_cf_select' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:159:0: style: The function 'lj_cf_setfenv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:123:0: style: The function 'lj_cf_string_dump' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:503:0: style: The function 'lj_cf_string_find' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:643:0: style: The function 'lj_cf_string_format' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:537:0: style: The function 'lj_cf_string_gmatch' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:600:0: style: The function 'lj_cf_string_gsub' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:508:0: style: The function 'lj_cf_string_match' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:87:0: style: The function 'lj_cf_string_rep' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_table.c:152:0: style: The function 'lj_cf_table_concat' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_table.c:79:0: style: The function 'lj_cf_table_insert' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_table.c:57:0: style: The function 'lj_cf_table_maxn' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_table.c:259:0: style: The function 'lj_cf_table_sort' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:223:0: style: The function 'lj_cf_unpack' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_dispatch.c:467:0: style: The function 'lj_dispatch_call' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_dispatch.c:403:0: style: The function 'lj_dispatch_ins' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_dispatch.c:524:0: style: The function 'lj_dispatch_stitch' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_err.c:859:0: style: The function 'lj_err_trace' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:44:0: style: The function 'lj_ffh_assert' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_bit.c:114:0: style: The function 'lj_ffh_bit_band' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_bit.c:67:0: style: The function 'lj_ffh_bit_bnot' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_bit.c:79:0: style: The function 'lj_ffh_bit_bswap' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_bit.c:91:0: style: The function 'lj_ffh_bit_lshift' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_bit.c:55:0: style: The function 'lj_ffh_bit_tobit' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:623:0: style: The function 'lj_ffh_coroutine_resume' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:643:0: style: The function 'lj_ffh_coroutine_wrap_err' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:603:0: style: The function 'lj_ffh_coroutine_yield' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:121:0: style: The function 'lj_ffh_ipairs' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:113:0: style: The function 'lj_ffh_ipairs_aux' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:24:0: style: The function 'lj_ffh_math_abs' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:70:0: style: The function 'lj_ffh_math_atan2' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:79:0: style: The function 'lj_ffh_math_ldexp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:51:0: style: The function 'lj_ffh_math_log' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:90:0: style: The function 'lj_ffh_math_min' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_math.c:32:0: style: The function 'lj_ffh_math_sqrt' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:79:0: style: The function 'lj_ffh_next' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:108:0: style: The function 'lj_ffh_pairs' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:350:0: style: The function 'lj_ffh_pcall' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:185:0: style: The function 'lj_ffh_rawget' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:131:0: style: The function 'lj_ffh_setmetatable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:41:0: style: The function 'lj_ffh_string_byte' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:65:0: style: The function 'lj_ffh_string_char' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:106:0: style: The function 'lj_ffh_string_reverse' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_string.c:79:0: style: The function 'lj_ffh_string_sub' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:263:0: style: The function 'lj_ffh_tonumber' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_base.c:322:0: style: The function 'lj_ffh_tostring' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_func.c:157:0: style: The function 'lj_func_newL_gc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_meta.c:213:0: style: The function 'lj_meta_arith' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_meta.c:442:0: style: The function 'lj_meta_call' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_meta.c:355:0: style: The function 'lj_meta_equal_cd' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_meta.c:430:0: style: The function 'lj_meta_istype' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_meta.c:315:0: style: The function 'lj_meta_len' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:346:0: style: The function 'lj_opt_dse_ahstore' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:610:0: style: The function 'lj_opt_dse_fstore' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:510:0: style: The function 'lj_opt_dse_ustore' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:881:0: style: The function 'lj_opt_dse_xstore' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:389:0: style: The function 'lj_opt_fwd_alen' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:275:0: style: The function 'lj_opt_fwd_aload' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:285:0: style: The function 'lj_opt_fwd_hload' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:294:0: style: The function 'lj_opt_fwd_hrefk' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:477:0: style: The function 'lj_opt_fwd_uload' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_opt_mem.c:813:0: style: The function 'lj_opt_fwd_xload' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_trace.c:859:0: style: The function 'lj_trace_exit' is never used. [unusedFunction]

^
src/3rdparty/libiconv/src/libcharset/localcharset.c:831:0: style: The function 'locale_charset' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lib_aux.c:49:0: style: The function 'luaL_execresult' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:1193:0: style: The function 'lua_isyieldable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:1307:0: style: The function 'lua_setallocf' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:421:0: style: The function 'lua_tointegerx' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:358:0: style: The function 'lua_tonumberx' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:622:0: style: The function 'lua_topointer' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:616:0: style: The function 'lua_tothread' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:919:0: style: The function 'lua_upvalueid' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:928:0: style: The function 'lua_upvaluejoin' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_api.c:131:0: style: The function 'lua_version' is never used. [unusedFunction]

^
src/eu_script.c:744:0: style: The function 'luaopen_euapi' is never used. [unusedFunction]

^
src/eu_map.c:117:0: style: The function 'map_last' is never used. [unusedFunction]

^
src/eu_map.c:139:0: style: The function 'map_prev' is never used. [unusedFunction]

^
plugins/pdfview/np_pdfviewer.c:1064:0: style: The function 'npp_entry' is never used. [unusedFunction]

^
plugins/pdfview/np_pdfviewer.c:1091:0: style: The function 'npp_init' is never used. [unusedFunction]

^
plugins/pdfview/np_pdfviewer.c:1104:0: style: The function 'npp_mime_type' is never used. [unusedFunction]

^
plugins/pdfview/np_pdfviewer.c:1133:0: style: The function 'npp_shutdown' is never used. [unusedFunction]

^
src/eu_complete.c:142:0: style: The function 'on_complete_postion_cmp' is never used. [unusedFunction]

^
src/eu_complete.c:204:0: style: The function 'on_complete_replace_callback' is never used. [unusedFunction]

^
src/eu_complete.c:97:0: style: The function 'on_complete_str_cmp' is never used. [unusedFunction]

^
src/eu_theme_dark.c:249:0: style: The function 'on_dark_color_scheme_change_msg' is never used. [unusedFunction]

^
src/eu_theme_dark.c:202:0: style: The function 'on_dark_get_colorization_color' is never used. [unusedFunction]

^
src/eu_theme_dark.c:89:0: style: The function 'on_dark_get_partsize' is never used. [unusedFunction]

^
src/eu_theme_dark.c:131:0: style: The function 'on_dark_get_sys_colour' is never used. [unusedFunction]

^
src/eu_doctype.c:1930:0: style: The function 'on_doc_click_list_jmp' is never used. [unusedFunction]

^
src/eu_doctype.c:1936:0: style: The function 'on_doc_click_list_jump_sh' is never used. [unusedFunction]

^
src/eu_doctype.c:1980:0: style: The function 'on_doc_click_tree_json' is never used. [unusedFunction]

^
src/eu_doctype.c:1986:0: style: The function 'on_doc_click_tree_redis' is never used. [unusedFunction]

^
src/eu_doctype.c:1974:0: style: The function 'on_doc_click_tree_sql' is never used. [unusedFunction]

^
src/eu_doctype.c:1770:0: style: The function 'on_doc_cmake_like' is never used. [unusedFunction]

^
src/eu_doctype.c:1672:0: style: The function 'on_doc_cpp_like' is never used. [unusedFunction]

^
src/eu_doctype.c:1736:0: style: The function 'on_doc_css_like' is never used. [unusedFunction]

^
src/eu_doctype.c:1711:0: style: The function 'on_doc_html_like' is never used. [unusedFunction]

^
src/eu_doctype.c:1015:0: style: The function 'on_doc_init_after_asm' is never used. [unusedFunction]

^
src/eu_doctype.c:1302:0: style: The function 'on_doc_init_after_cmake' is never used. [unusedFunction]

^
src/eu_doctype.c:1063:0: style: The function 'on_doc_init_after_cobol' is never used. [unusedFunction]

^
src/eu_doctype.c:687:0: style: The function 'on_doc_init_after_cpp' is never used. [unusedFunction]

^
src/eu_doctype.c:714:0: style: The function 'on_doc_init_after_cs' is never used. [unusedFunction]

^
src/eu_doctype.c:1180:0: style: The function 'on_doc_init_after_css' is never used. [unusedFunction]

^
src/eu_doctype.c:1288:0: style: The function 'on_doc_init_after_diff' is never used. [unusedFunction]

^
src/eu_doctype.c:754:0: style: The function 'on_doc_init_after_go' is never used. [unusedFunction]

^
src/eu_doctype.c:1085:0: style: The function 'on_doc_init_after_html' is never used. [unusedFunction]

^
src/eu_doctype.c:734:0: style: The function 'on_doc_init_after_java' is never used. [unusedFunction]

^
src/eu_doctype.c:1198:0: style: The function 'on_doc_init_after_js' is never used. [unusedFunction]

^
src/eu_doctype.c:1238:0: style: The function 'on_doc_init_after_json' is never used. [unusedFunction]

^
src/eu_doctype.c:997:0: style: The function 'on_doc_init_after_lisp' is never used. [unusedFunction]

^
src/eu_doctype.c:1322:0: style: The function 'on_doc_init_after_log' is never used. [unusedFunction]

^
src/eu_doctype.c:842:0: style: The function 'on_doc_init_after_lua' is never used. [unusedFunction]

^
src/eu_doctype.c:1274:0: style: The function 'on_doc_init_after_makefile' is never used. [unusedFunction]

^
src/eu_doctype.c:1036:0: style: The function 'on_doc_init_after_nim' is never used. [unusedFunction]

^
src/eu_doctype.c:862:0: style: The function 'on_doc_init_after_perl' is never used. [unusedFunction]

^
src/eu_doctype.c:1335:0: style: The function 'on_doc_init_after_properties' is never used. [unusedFunction]

^
src/eu_doctype.c:819:0: style: The function 'on_doc_init_after_python' is never used. [unusedFunction]

^
src/eu_doctype.c:810:0: style: The function 'on_doc_init_after_redis' is never used. [unusedFunction]

^
src/eu_doctype.c:978:0: style: The function 'on_doc_init_after_ruby' is never used. [unusedFunction]

^
src/eu_doctype.c:955:0: style: The function 'on_doc_init_after_rust' is never used. [unusedFunction]

^
src/eu_doctype.c:931:0: style: The function 'on_doc_init_after_shell_sh' is never used. [unusedFunction]

^
src/eu_doctype.c:794:0: style: The function 'on_doc_init_after_sql' is never used. [unusedFunction]

^
src/eu_doctype.c:774:0: style: The function 'on_doc_init_after_swift' is never used. [unusedFunction]

^
src/eu_doctype.c:1218:0: style: The function 'on_doc_init_after_xml' is never used. [unusedFunction]

^
src/eu_doctype.c:1259:0: style: The function 'on_doc_init_after_yaml' is never used. [unusedFunction]

^
src/eu_doctype.c:176:0: style: The function 'on_doc_init_list_sh' is never used. [unusedFunction]

^
src/eu_doctype.c:197:0: style: The function 'on_doc_init_result' is never used. [unusedFunction]

^
src/eu_doctype.c:187:0: style: The function 'on_doc_init_tree' is never used. [unusedFunction]

^
src/eu_doctype.c:1748:0: style: The function 'on_doc_json_like' is never used. [unusedFunction]

^
src/eu_doctype.c:1856:0: style: The function 'on_doc_keydown_jmp' is never used. [unusedFunction]

^
src/eu_doctype.c:1882:0: style: The function 'on_doc_keydown_redis' is never used. [unusedFunction]

^
src/eu_doctype.c:1866:0: style: The function 'on_doc_keydown_sql' is never used. [unusedFunction]

^
src/eu_doctype.c:1896:0: style: The function 'on_doc_keyup_general' is never used. [unusedFunction]

^
src/eu_doctype.c:1902:0: style: The function 'on_doc_keyup_general_sh' is never used. [unusedFunction]

^
src/eu_doctype.c:1759:0: style: The function 'on_doc_makefile_like' is never used. [unusedFunction]

^
src/eu_doctype.c:1698:0: style: The function 'on_doc_redis_like' is never used. [unusedFunction]

^
src/eu_doctype.c:1913:0: style: The function 'on_doc_reload_list_reqular' is never used. [unusedFunction]

^
src/eu_doctype.c:1919:0: style: The function 'on_doc_reload_list_sh' is never used. [unusedFunction]

^
src/eu_doctype.c:1968:0: style: The function 'on_doc_reload_tree_json' is never used. [unusedFunction]

^
src/eu_doctype.c:1957:0: style: The function 'on_doc_reload_tree_redis' is never used. [unusedFunction]

^
src/eu_doctype.c:1947:0: style: The function 'on_doc_reload_tree_sql' is never used. [unusedFunction]

^
src/eu_doctype.c:476:0: style: The function 'on_doc_send_light' is never used. [unusedFunction]

^
src/eu_doctype.c:609:0: style: The function 'on_doc_special_light' is never used. [unusedFunction]

^
src/eu_doctype.c:1685:0: style: The function 'on_doc_sql_like' is never used. [unusedFunction]

^
src/eu_doctype.c:485:0: style: The function 'on_doc_variable_light' is never used. [unusedFunction]

^
src/eu_doctype.c:1724:0: style: The function 'on_doc_xml_like' is never used. [unusedFunction]

^
src/eu_hook.c:417:0: style: The function 'on_hook_do' is never used. [unusedFunction]

^
src/eu_hook.c:428:0: style: The function 'on_hook_undo' is never used. [unusedFunction]

^
src/eu_document_map.c:108:0: style: The function 'on_map_print' is never used. [unusedFunction]

^
src/eu_document_map.c:39:0: style: The function 'on_map_viewer_height' is never used. [unusedFunction]

^
src/eu_scintilla.c:724:0: style: The function 'on_sci_send_extra' is never used. [unusedFunction]

^
src/eu_search.c:1041:0: style: The function 'on_search_remove_marks_this' is never used. [unusedFunction]

^
src/eu_treebar.c:1486:0: style: The function 'on_treebar_wait_hwnd' is never used. [unusedFunction]

^
src/eu_view.c:608:0: style: The function 'on_view_update_taskbar' is never used. [unusedFunction]

^
plugins/pdfview/np_pdfviewer.c:101:0: style: The function 'pdf_utf8_utf16' is never used. [unusedFunction]

^
src/eu_api.c:364:0: style: The function 'printf_bytes' is never used. [unusedFunction]

^
src/eu_rbtree.c:326:0: style: The function 'rb_augment_erase_begin' is never used. [unusedFunction]

^
src/eu_rbtree.c:353:0: style: The function 'rb_augment_erase_end' is never used. [unusedFunction]

^
src/eu_rbtree.c:311:0: style: The function 'rb_augment_insert' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:201:0: style: The function 'recff_assert' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:715:0: style: The function 'recff_bit_nary' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:732:0: style: The function 'recff_bit_shift' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:694:0: style: The function 'recff_bit_tobit' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:755:0: style: The function 'recff_bit_tohex' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:705:0: style: The function 'recff_bit_unary' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1380:0: style: The function 'recff_buffer_decode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1371:0: style: The function 'recff_buffer_encode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1295:0: style: The function 'recff_buffer_method___len' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1287:0: style: The function 'recff_buffer_method___tostring' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1324:0: style: The function 'recff_buffer_method_commit' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1358:0: style: The function 'recff_buffer_method_decode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1349:0: style: The function 'recff_buffer_method_encode' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1257:0: style: The function 'recff_buffer_method_get' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1218:0: style: The function 'recff_buffer_method_put' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1304:0: style: The function 'recff_buffer_method_putcdata' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1250:0: style: The function 'recff_buffer_method_putf' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1338:0: style: The function 'recff_buffer_method_ref' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1314:0: style: The function 'recff_buffer_method_reserve' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1161:0: style: The function 'recff_buffer_method_reset' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1200:0: style: The function 'recff_buffer_method_set' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1188:0: style: The function 'recff_buffer_method_skip' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1476:0: style: The function 'recff_cdata_arith' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1291:0: style: The function 'recff_cdata_call' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:800:0: style: The function 'recff_cdata_index' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1584:0: style: The function 'recff_clib_index' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1523:0: style: The function 'recff_debug_getmetatable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1731:0: style: The function 'recff_ffi_abi' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1665:0: style: The function 'recff_ffi_copy' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1640:0: style: The function 'recff_ffi_errno' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1683:0: style: The function 'recff_ffi_fill' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1761:0: style: The function 'recff_ffi_gc' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1719:0: style: The function 'recff_ffi_istype' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1635:0: style: The function 'recff_ffi_new' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1648:0: style: The function 'recff_ffi_string' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1707:0: style: The function 'recff_ffi_typeof' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_crecord.c:1744:0: style: The function 'recff_ffi_xof' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:512:0: style: The function 'recff_getfenv' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:221:0: style: The function 'recff_getmetatable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1512:0: style: The function 'recff_io_flush' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1485:0: style: The function 'recff_io_write' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:432:0: style: The function 'recff_ipairs_aux' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:560:0: style: The function 'recff_math_abs' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:612:0: style: The function 'recff_math_atan2' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:633:0: style: The function 'recff_math_call' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:621:0: style: The function 'recff_math_ldexp' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:590:0: style: The function 'recff_math_log' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:646:0: style: The function 'recff_math_minmax' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:639:0: style: The function 'recff_math_pow' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:664:0: style: The function 'recff_math_random' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:568:0: style: The function 'recff_math_round' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:584:0: style: The function 'recff_math_unary' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:524:0: style: The function 'recff_next' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:463:0: style: The function 'recff_pcall' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:281:0: style: The function 'recff_rawequal' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:255:0: style: The function 'recff_rawget' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:267:0: style: The function 'recff_rawset' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:323:0: style: The function 'recff_select' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:235:0: style: The function 'recff_setmetatable' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:874:0: style: The function 'recff_string_char' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:928:0: style: The function 'recff_string_find' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1080:0: style: The function 'recff_string_format' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:920:0: style: The function 'recff_string_op' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:795:0: style: The function 'recff_string_range' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:894:0: style: The function 'recff_string_rep' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1452:0: style: The function 'recff_table_clear' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1425:0: style: The function 'recff_table_concat' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1403:0: style: The function 'recff_table_insert' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:1444:0: style: The function 'recff_table_new' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:347:0: style: The function 'recff_tonumber' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:413:0: style: The function 'recff_tostring' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:207:0: style: The function 'recff_type' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:449:0: style: The function 'recff_xpairs' is never used. [unusedFunction]

^
src/3rdparty/luajit/src/lj_ffrecord.c:484:0: style: The function 'recff_xpcall' is never used. [unusedFunction]

^
src/3rdparty/libiconv/src/lib/relocatable.c:581:0: style: The function 'relocate2' is never used. [unusedFunction]

^
src/3rdparty/libiconv/src/lib/relocatable.c:162:0: style: The function 'set_relocation_prefix' is never used. [unusedFunction]

^
src/eu_share.c:317:0: style: The function 'share_spinlock_wait' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:133465:0: style: The function 'sqlite3_enable_load_extension' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:177695:0: style: The function 'sqlite3_global_recover' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:29101:0: style: The function 'sqlite3_memory_alarm' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:174366:0: style: The function 'sqlite3_shutdown' is never used. [unusedFunction]

^
src/eu_util.c:2262:0: style: The function 'util_add_double_quotes' is never used. [unusedFunction]

^
src/eu_util.c:114:0: style: The function 'util_clock_gettime' is never used. [unusedFunction]

^
src/eu_util.c:1761:0: style: The function 'util_compress' is never used. [unusedFunction]

^
src/eu_util.c:1755:0: style: The function 'util_compress_bound' is never used. [unusedFunction]

^
src/eu_util.c:586:0: style: The function 'util_dec_des_ecb_192' is never used. [unusedFunction]

^
src/eu_util.c:519:0: style: The function 'util_enc_des_ecb_192' is never used. [unusedFunction]

^
src/eu_util.c:129:0: style: The function 'util_gen_tstamp' is never used. [unusedFunction]

^
src/eu_util.c:141:0: style: The function 'util_lock' is never used. [unusedFunction]

^
src/eu_util.c:2224:0: style: The function 'util_string_match' is never used. [unusedFunction]

^
src/eu_util.c:1326:0: style: The function 'util_trim_right_star' is never used. [unusedFunction]

^
src/eu_util.c:1778:0: style: The function 'util_uncompress' is never used. [unusedFunction]

^
src/eu_util.c:160:0: style: The function 'util_unlock' is never used. [unusedFunction]

^
src/eu_util.c:2017:0: style: The function 'util_untransparent' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:87177:0: style: The function 'vdbeRecordCompareInt' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:87272:0: style: The function 'vdbeRecordCompareString' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:100432:0: style: The function 'vdbeSorterCompare' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:100493:0: style: The function 'vdbeSorterCompareInt' is never used. [unusedFunction]

^
src/3rdparty/sqlite3/src/sqlite3.c:100451:0: style: The function 'vdbeSorterCompareText' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

